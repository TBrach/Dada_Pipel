ps_tca_filt <- phyloseq::filter_taxa(ps_tca, function(x){
(sum(x > min_obs) > (prevalence/100)*length(x)) ||
(sum(x) > quantile(taxa_sums(ps_tca), probs = taxa_sums_quantile/100))
}, prune = TRUE)
ps_filt <- phyloseq::prune_taxa(taxa_names(ps_tca_filt), ps) # you need ps_filt for DESeq2Apply_physeq
ps_filt_ra <- phyloseq::transform_sample_counts(ps_filt, function(x){x/sum(x)})
# --
# - Generate a visual overview of the filtering step -
filterList <- visualize_filtering(physeq = ps_tca, prevalence = prevalence, taxa_sums_quantile = taxa_sums_quantile)
# --
# - generate barplot representations of counts before and after filtering -
bar_plot_ps_vs_ps_tca <- plot_sample_bars_compare(physeq = ps, physeq2 = ps_tca, x = "Sample", y = "Abundance", group_var = group_var, color_levels = color_levels, fill = "Phylum", color_sample_names = TRUE)
# --
# - Plots on the question: Were the size factors different between the groups -
SFList <- plot_sizeFactors(physeq = ps, SFs = SFs, group_var = group_var, color_levels = color_levels, shape = shape, test = "t.test", p_adjust_method = "fdr", symnum.args = list(cutpoints = c(0, 1e-04, 0.001, 0.01, 0.05, 1), symbols = c("****", "***", "**", "*", "ns")))
# --
ps_filt_ra
dist_methods
# - calculate the beta diversity distances -
dist_list <- calc_beta_div_distances(ps_filt_ra, dist_methods) # produces objects of class "dist"
physeq <- ps_filt_ra
dist_methods
dist_list <- vector("list", length(dist_methods))
dist_list
names(dist_list) = dist_methods
i <- "bray"
iDist <- phyloseq::distance(physeq, method=i)
install.packages("vegan")
install.packages(vegan)
install.packages("vegan")
version
# - install packages -
# NB: all packages have to be installed, usually via install.packages()
# but some you need to install via bioconductor, e.g.:
# source("https://bioconductor.org/biocLite.R")
# biocLite("phyloseq")
# --
# - load packages -
library(phyloseq); # packageVersion("phyloseq")
library(dada2); # packageVersion("dada2")
library(vegan); # packageVersion("vegan")
library(ggplot2); # packageVersion("ggplot2")
library(dplyr); # packageVersion("dplyr")
library(tidyr); # packageVersion("tidyr")
library(gridExtra); # packageVersion("gridExtra")
library(xtable); # packageVersion("xtable")
library(RVAideMemoire); #packageVersion("RVAideMemoire")
library(viridis); # packageVersion("viridis")
library(scales); # packageVersion("scales") # for the oob = squish option in gradient plots
library(ggthemes); # packageVersion("ggthemes")
library(DESeq2); # packageVersion("DESeq2")
library(ggpubr); # packageVersion("ggpubr")
# - packaged from Mani's analysis that I could add -
# library(cowplot)
# library(coin)
# library(ade4)
# library(ggrepel)
# library(ggforce)
# library(bookdown)
# library(kableExtra)
# library(RColorBrewer)
# library(bindrcpp)
# library(stringr)
# library(pheatmap)
# library(BiocParallel)
# library(microbiomeX)
# --
# - define cbPalette and QuantColors15 schemes -
# R color blind palette is used for group comparisons (unless more than 8 groups)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") # ref: http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/
# QuantColors15 is used for phyla comparisons as long as there are < 15 phyla, each color is easy to distinguish from the two colors surrounding it
tol15rainbow=c("#114477", "#4477AA", "#77AADD", "#117755", "#44AA88", "#99CCBB", "#777711", "#AAAA44", "#DDDD77", "#771111", "#AA4444", "#DD7777", "#771144", "#AA4477", "#DD77AA") # ref: https://tradeblotter.wordpress.com/2013/02/28/the-paul-tol-21-color-salute/
QuantColors15 <- tol15rainbow[c(1, 12, 4, 7, 13, 2, 11, 5, 8, 14, 3, 10, 6, 9, 15)]
# --
# - source all functions -
functionpath <- "./Functions"
source(file.path(functionpath, "000_helper_functions.R"))
source(file.path(functionpath, "010_explore_ps_functions.R"))
source(file.path(functionpath, "020_preprocess_filtering_functions.R"))
source(file.path(functionpath, "030_alpha_diversity_functions.R"))
source(file.path(functionpath, "040_beta_diversity_functions.R"))
source(file.path(functionpath, "050_diff_abundance_functions.R"))
source(file.path(functionpath, "060_phylum_analysis_functions.R"))
# - load your phyloseq object -
# NB: USER INPUT
name_phyloseq_rds <- "microdiab_ngt.rds"
# NB: USER INPUT
datapath <- "./Example_phyloseq_objects"
# Test your input:
if(! file.exists(file.path(datapath, name_phyloseq_rds))){
stop("The given path/file to your phyloseq object does not exist.")
}
ps <- readRDS(file.path(datapath, name_phyloseq_rds))
# --
# - Define the group variable for sample comparisons -
# NB: USER INPUT
group_var <- "Country" # MANDATORY: a variable in sample_data(ps) based on which samples will be compared
# Test your input:
if(! group_var %in% colnames(sample_data(ps))) {
stop("The given group_var is not a variable in the sample data of the loaded phyloseq object.")
}
# --
# - Define the order of the groups in your group_var -
# NB: USER INPUT
group_var_levels <- c("DK", "IN") # defines the order of the groups in all plots. If set to NULL:
if (is.null(group_var_levels)) {
group_var_levels <- unique(sample_data(ps)[[group_var]])
}
# Test your input:
if (!all(group_var_levels %in% unique(sample_data(ps)[[group_var]])) ||
!all(unique(sample_data(ps)[[group_var]]) %in% group_var_levels)) {
stop("The given group_var_levels do not fit to all unique values in the group_var column.")
}
if (length(group_var_levels) < 2) {
stop("Sorry, you currently need to have at least two levels in your group_var for this analysis to make sense.")
}
if (length(group_var_levels) > 15) {
stop("Sorry, there are currently max 15 levels (groups) allowed in your group_var.")
}
# --
# - Set the colors representing the groups in your group_var -
# NB: USER INPUT
color_levels <- c(cbPalette[2], cbPalette[4]) # choose your preferred colors for each group in your group_var. If set to NULL:
if (is.null(color_levels)) {
if (length(group_var_levels) < 9) {
color_levels <- cbPalette[1:length(group_var_levels)]
} else {
color_levels <- QuantColors15[1:length(group_var_levels)]
}
}
# Test your input:
if (length(color_levels) != length(group_var_levels)) {
stop("The number of colors in the given color_levels did not fit to group_var_levels.")
}
if (!all(areColors(color_levels))) {
stop("Stopped because not all entries in color_levels were valid R colors.")
}
# --
# - optional: use another variable in sample_data(ps) as shape in some of the plots -
# NB: user input
shape <- NULL
# Test your input:
if (!is.null(shape)) {
if (! shapoe %in% colnames(sample_data(ps))) {
stop("The given shape is not a variable in the sample data of the loaded phyloseq object.")
}
}
# --
# - Set the taxonomic_level for the analysis -
# NB: You can choose all levels within colnames(tax_table(ps))
# phyloseq::taxglom to that level will be used.
# if you set taxonomic_leve to NULL, all taxa will be analysed (i.e. strain/species/ASV level analysis)
# NB user input
taxonomic_level <- "Genus"
# NB user input
phylum_NA_removal <- "no" # if yes you remove all taxa for which Phylum = NA before the analyses
# Test your input:
if (!is.null(taxonomic_level) && !(taxonomic_level %in% colnames(tax_table(ps)))){
stop("You provided a taxonomic_level that is not present in the tax_table of the loaded phyloseq object.")
}
# --
# - Filtering inputs -
# NB: user input
prevalence <- 0 # in percent, for prevalence filtering of taxa
# NB: user input
min_obs <- 0L # in counts, a taxon will be considered present (for prevalence) if count > min_obs
# NB: user input
taxa_sums_quantile <- 90 # in percent, taxa whose taxa_sums are above this threshold will be kept even if they do not pass prevalence filter
# Test filtering inputs and set invalid inputs to defaults
if (!is.numeric(prevalence) || prevalence < 0 || prevalence > 100) {
prevalence <- 5
}
if (!is.numeric(min_obs)) {
min_obs <- 0L
}
if (!is.numeric(taxa_sums_quantile) || taxa_sums_quantile < 0 || taxa_sums_quantile > 100) {
taxa_sums_quantile <- 0
}
# --
# - Alpha diversity and rarifaction inputs -
# NB: user input
alpha_div_measures <- c("Observed", "Shannon") # ?phyloseq::estimate_richness: may include c("Observed", "Chao1", "ACE", "Shannon", "Simpson", "InvSimpson", "Fisher")
# NB: user input
seed <- 1234 # for reproducibility of rarefaction curves
# NB: user input
step_size <- 200 # steps in sample_sums for rarefaction curves
# NB: user input
rare_level <- NULL # sample_sums/total_counts level to which rarefaction is perforemd, if NULL, min(sample_sums(ps)) is used!
# NB: user input
rare_max_total <- NULL # maximal sample_sums/total_counts value to which rarefaction curves are calculated, if NULL: quantile(sample_sums(ps), probs = .25) is used
# Test alpha-diversity inputs and set invalid inputs to defaults
if (! all(alpha_div_measures %in% c("Observed", "Chao1", "ACE", "Shannon", "Simpson", "InvSimpson", "Fisher"))) {
alpha_div_measures <- c("Observed", "Shannon")
}
if (!is.numeric(seed)) {
seed <- 1234
}
if (!is.numeric(step_size)) {
step_size <- 200
}
if (!is.numeric(rare_level)) {
rare_level <- NULL # will be changed to min(sample_sums(ps))
}
if (!is.numeric(rare_max_total)) {
rare_max_total <- NULL # quantile(sample_sums(ps), probs = .25)
}
# --
# - beta diversity inputs -
dist_methods <- c("bray") # otions: see unlist(phyloseq::distanceMethodList)
coord_cor <- FALSE # adjustment of the axis representation in ordination plots
# Test beta diversity inputs and set invalid inputs to defaults
if (! all(dist_methods %in% unlist(phyloseq::distanceMethodList))) {
dist_methods <- c("jsd")
}
if (! is.logical(coord_cor)){
coord_cor <- FALSE
}
# --
# - remove taxa with Phylum == NA -
ps <- phyloseq::subset_taxa(ps, taxa_sums(ps) != 0)
# - caluclation of Size Factors -
SFs <- calc_SFs(physeq = ps)
# - perform tax_glom -
if (!is.null(taxonomic_level)){
ps <- phyloseq::tax_glom(ps, taxrank = taxonomic_level, NArm = FALSE)
} else {
taxonomic_level <- "Species" # for later labelling in plots, even though in this case it is ASV level analysis but there is no strain taxonomy in taxa_table
}
# - filtering  -
# NB: SFs were already calculated in exploratory analysis before tax_glom!
library_size_adjust_list <- simply_adjust_LS(ps, SFs = SFs)
ps_tca <- library_size_adjust_list[[1]] # tca: total counts adjusted
ps_tca_filt <- phyloseq::filter_taxa(ps_tca, function(x){
(sum(x > min_obs) > (prevalence/100)*length(x)) ||
(sum(x) > quantile(taxa_sums(ps_tca), probs = taxa_sums_quantile/100))
}, prune = TRUE)
ps_filt <- phyloseq::prune_taxa(taxa_names(ps_tca_filt), ps) # you need ps_filt for DESeq2Apply_physeq
ps_filt_ra <- phyloseq::transform_sample_counts(ps_filt, function(x){x/sum(x)})
# --
# - Generate a visual overview of the filtering step -
filterList <- visualize_filtering(physeq = ps_tca, prevalence = prevalence, taxa_sums_quantile = taxa_sums_quantile)
# --
# - generate barplot representations of counts before and after filtering -
bar_plot_ps_vs_ps_tca <- plot_sample_bars_compare(physeq = ps, physeq2 = ps_tca, x = "Sample", y = "Abundance", group_var = group_var, color_levels = color_levels, fill = "Phylum", color_sample_names = TRUE)
# --
# - Plots on the question: Were the size factors different between the groups -
SFList <- plot_sizeFactors(physeq = ps, SFs = SFs, group_var = group_var, color_levels = color_levels, shape = shape, test = "t.test", p_adjust_method = "fdr", symnum.args = list(cutpoints = c(0, 1e-04, 0.001, 0.01, 0.05, 1), symbols = c("****", "***", "**", "*", "ns")))
# --
# - calculate the beta diversity distances -
dist_list <- calc_beta_div_distances(ps_filt_ra, dist_methods) # produces objects of class "dist"
source("https://bioconductor.org/biocLite.R")
?BiocUpgrade
source("https://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
# - calculate the beta diversity distances -
dist_list <- calc_beta_div_distances(ps_filt_ra, dist_methods) # produces objects of class "dist"
# - install packages -
# NB: all packages have to be installed, usually via install.packages()
# but some you need to install via bioconductor, e.g.:
# source("https://bioconductor.org/biocLite.R")
# biocLite("phyloseq")
# --
# - load packages -
library(phyloseq); # packageVersion("phyloseq")
library(dada2); # packageVersion("dada2")
library(vegan); # packageVersion("vegan")
library(ggplot2); # packageVersion("ggplot2")
library(dplyr); # packageVersion("dplyr")
library(tidyr); # packageVersion("tidyr")
library(gridExtra); # packageVersion("gridExtra")
library(xtable); # packageVersion("xtable")
library(RVAideMemoire); #packageVersion("RVAideMemoire")
library(viridis); # packageVersion("viridis")
library(scales); # packageVersion("scales") # for the oob = squish option in gradient plots
library(ggthemes); # packageVersion("ggthemes")
library(DESeq2); # packageVersion("DESeq2")
library(ggpubr); # packageVersion("ggpubr")
# - packaged from Mani's analysis that I could add -
# library(cowplot)
# library(coin)
# library(ade4)
# library(ggrepel)
# library(ggforce)
# library(bookdown)
# library(kableExtra)
# library(RColorBrewer)
# library(bindrcpp)
# library(stringr)
# library(pheatmap)
# library(BiocParallel)
# library(microbiomeX)
# --
# - define cbPalette and QuantColors15 schemes -
# R color blind palette is used for group comparisons (unless more than 8 groups)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") # ref: http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/
# QuantColors15 is used for phyla comparisons as long as there are < 15 phyla, each color is easy to distinguish from the two colors surrounding it
tol15rainbow=c("#114477", "#4477AA", "#77AADD", "#117755", "#44AA88", "#99CCBB", "#777711", "#AAAA44", "#DDDD77", "#771111", "#AA4444", "#DD7777", "#771144", "#AA4477", "#DD77AA") # ref: https://tradeblotter.wordpress.com/2013/02/28/the-paul-tol-21-color-salute/
QuantColors15 <- tol15rainbow[c(1, 12, 4, 7, 13, 2, 11, 5, 8, 14, 3, 10, 6, 9, 15)]
# --
source("https://bioconductor.org/biocLite.R")
biocLite("phyloseq")
packageVersion("vegan")
packageVersion("phyloseq")
biocLite("vegan")
library(vegan)
packageVersion("vegan")
rm(list = ls())
# - install packages -
# NB: all packages have to be installed, usually via install.packages()
# but some you need to install via bioconductor, e.g.:
# source("https://bioconductor.org/biocLite.R")
# biocLite("phyloseq")
# --
# - load packages -
library(phyloseq); # packageVersion("phyloseq")
library(dada2); # packageVersion("dada2")
library(vegan); # packageVersion("vegan")
library(ggplot2); # packageVersion("ggplot2")
library(dplyr); # packageVersion("dplyr")
library(tidyr); # packageVersion("tidyr")
library(gridExtra); # packageVersion("gridExtra")
library(xtable); # packageVersion("xtable")
library(RVAideMemoire); #packageVersion("RVAideMemoire")
library(viridis); # packageVersion("viridis")
library(scales); # packageVersion("scales") # for the oob = squish option in gradient plots
library(ggthemes); # packageVersion("ggthemes")
library(DESeq2); # packageVersion("DESeq2")
library(ggpubr); # packageVersion("ggpubr")
# - packaged from Mani's analysis that I could add -
# library(cowplot)
# library(coin)
# library(ade4)
# library(ggrepel)
# library(ggforce)
# library(bookdown)
# library(kableExtra)
# library(RColorBrewer)
# library(bindrcpp)
# library(stringr)
# library(pheatmap)
# library(BiocParallel)
# library(microbiomeX)
# --
# - define cbPalette and QuantColors15 schemes -
# R color blind palette is used for group comparisons (unless more than 8 groups)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") # ref: http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/
# QuantColors15 is used for phyla comparisons as long as there are < 15 phyla, each color is easy to distinguish from the two colors surrounding it
tol15rainbow=c("#114477", "#4477AA", "#77AADD", "#117755", "#44AA88", "#99CCBB", "#777711", "#AAAA44", "#DDDD77", "#771111", "#AA4444", "#DD7777", "#771144", "#AA4477", "#DD77AA") # ref: https://tradeblotter.wordpress.com/2013/02/28/the-paul-tol-21-color-salute/
QuantColors15 <- tol15rainbow[c(1, 12, 4, 7, 13, 2, 11, 5, 8, 14, 3, 10, 6, 9, 15)]
# --
# - source all functions -
functionpath <- "./Functions"
source(file.path(functionpath, "000_helper_functions.R"))
source(file.path(functionpath, "010_explore_ps_functions.R"))
source(file.path(functionpath, "020_preprocess_filtering_functions.R"))
source(file.path(functionpath, "030_alpha_diversity_functions.R"))
source(file.path(functionpath, "040_beta_diversity_functions.R"))
source(file.path(functionpath, "050_diff_abundance_functions.R"))
source(file.path(functionpath, "060_phylum_analysis_functions.R"))
# - load your phyloseq object -
# NB: USER INPUT
name_phyloseq_rds <- "microdiab_ngt.rds"
# NB: USER INPUT
datapath <- "./Example_phyloseq_objects"
# Test your input:
if(! file.exists(file.path(datapath, name_phyloseq_rds))){
stop("The given path/file to your phyloseq object does not exist.")
}
ps <- readRDS(file.path(datapath, name_phyloseq_rds))
# --
# - Define the group variable for sample comparisons -
# NB: USER INPUT
group_var <- "Country" # MANDATORY: a variable in sample_data(ps) based on which samples will be compared
# Test your input:
if(! group_var %in% colnames(sample_data(ps))) {
stop("The given group_var is not a variable in the sample data of the loaded phyloseq object.")
}
# --
# - Define the order of the groups in your group_var -
# NB: USER INPUT
group_var_levels <- c("DK", "IN") # defines the order of the groups in all plots. If set to NULL:
if (is.null(group_var_levels)) {
group_var_levels <- unique(sample_data(ps)[[group_var]])
}
# Test your input:
if (!all(group_var_levels %in% unique(sample_data(ps)[[group_var]])) ||
!all(unique(sample_data(ps)[[group_var]]) %in% group_var_levels)) {
stop("The given group_var_levels do not fit to all unique values in the group_var column.")
}
if (length(group_var_levels) < 2) {
stop("Sorry, you currently need to have at least two levels in your group_var for this analysis to make sense.")
}
if (length(group_var_levels) > 15) {
stop("Sorry, there are currently max 15 levels (groups) allowed in your group_var.")
}
# --
# - Set the colors representing the groups in your group_var -
# NB: USER INPUT
color_levels <- c(cbPalette[2], cbPalette[4]) # choose your preferred colors for each group in your group_var. If set to NULL:
if (is.null(color_levels)) {
if (length(group_var_levels) < 9) {
color_levels <- cbPalette[1:length(group_var_levels)]
} else {
color_levels <- QuantColors15[1:length(group_var_levels)]
}
}
# Test your input:
if (length(color_levels) != length(group_var_levels)) {
stop("The number of colors in the given color_levels did not fit to group_var_levels.")
}
if (!all(areColors(color_levels))) {
stop("Stopped because not all entries in color_levels were valid R colors.")
}
# --
# - optional: use another variable in sample_data(ps) as shape in some of the plots -
# NB: user input
shape <- NULL
# Test your input:
if (!is.null(shape)) {
if (! shapoe %in% colnames(sample_data(ps))) {
stop("The given shape is not a variable in the sample data of the loaded phyloseq object.")
}
}
# --
# - Set the taxonomic_level for the analysis -
# NB: You can choose all levels within colnames(tax_table(ps))
# phyloseq::taxglom to that level will be used.
# if you set taxonomic_leve to NULL, all taxa will be analysed (i.e. strain/species/ASV level analysis)
# NB user input
taxonomic_level <- "Genus"
# NB user input
phylum_NA_removal <- "no" # if yes you remove all taxa for which Phylum = NA before the analyses
# Test your input:
if (!is.null(taxonomic_level) && !(taxonomic_level %in% colnames(tax_table(ps)))){
stop("You provided a taxonomic_level that is not present in the tax_table of the loaded phyloseq object.")
}
# --
# - Filtering inputs -
# NB: user input
prevalence <- 0 # in percent, for prevalence filtering of taxa
# NB: user input
min_obs <- 0L # in counts, a taxon will be considered present (for prevalence) if count > min_obs
# NB: user input
taxa_sums_quantile <- 90 # in percent, taxa whose taxa_sums are above this threshold will be kept even if they do not pass prevalence filter
# Test filtering inputs and set invalid inputs to defaults
if (!is.numeric(prevalence) || prevalence < 0 || prevalence > 100) {
prevalence <- 5
}
if (!is.numeric(min_obs)) {
min_obs <- 0L
}
if (!is.numeric(taxa_sums_quantile) || taxa_sums_quantile < 0 || taxa_sums_quantile > 100) {
taxa_sums_quantile <- 0
}
# --
# - Alpha diversity and rarifaction inputs -
# NB: user input
alpha_div_measures <- c("Observed", "Shannon") # ?phyloseq::estimate_richness: may include c("Observed", "Chao1", "ACE", "Shannon", "Simpson", "InvSimpson", "Fisher")
# NB: user input
seed <- 1234 # for reproducibility of rarefaction curves
# NB: user input
step_size <- 200 # steps in sample_sums for rarefaction curves
# NB: user input
rare_level <- NULL # sample_sums/total_counts level to which rarefaction is perforemd, if NULL, min(sample_sums(ps)) is used!
# NB: user input
rare_max_total <- NULL # maximal sample_sums/total_counts value to which rarefaction curves are calculated, if NULL: quantile(sample_sums(ps), probs = .25) is used
# Test alpha-diversity inputs and set invalid inputs to defaults
if (! all(alpha_div_measures %in% c("Observed", "Chao1", "ACE", "Shannon", "Simpson", "InvSimpson", "Fisher"))) {
alpha_div_measures <- c("Observed", "Shannon")
}
if (!is.numeric(seed)) {
seed <- 1234
}
if (!is.numeric(step_size)) {
step_size <- 200
}
if (!is.numeric(rare_level)) {
rare_level <- NULL # will be changed to min(sample_sums(ps))
}
if (!is.numeric(rare_max_total)) {
rare_max_total <- NULL # quantile(sample_sums(ps), probs = .25)
}
# --
# - beta diversity inputs -
dist_methods <- c("bray") # otions: see unlist(phyloseq::distanceMethodList)
coord_cor <- FALSE # adjustment of the axis representation in ordination plots
# Test beta diversity inputs and set invalid inputs to defaults
if (! all(dist_methods %in% unlist(phyloseq::distanceMethodList))) {
dist_methods <- c("jsd")
}
if (! is.logical(coord_cor)){
coord_cor <- FALSE
}
# --
# - remove taxa with Phylum == NA -
ps <- phyloseq::subset_taxa(ps, taxa_sums(ps) != 0)
# - caluclation of Size Factors -
SFs <- calc_SFs(physeq = ps)
# - perform tax_glom -
if (!is.null(taxonomic_level)){
ps <- phyloseq::tax_glom(ps, taxrank = taxonomic_level, NArm = FALSE)
} else {
taxonomic_level <- "Species" # for later labelling in plots, even though in this case it is ASV level analysis but there is no strain taxonomy in taxa_table
}
?phyloseq::distance
phyloseq::distance(ps, "bray")
phyloseq::distance
version
phyloseq::distance(ps, method = "unifrac")
phyloseq::distance(ps, method = "jsd")
phyloseq::distance(ps, method = "bray")
rm(list = ls())
