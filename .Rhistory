the_names <- paste(df$Family, df$Genus, df$Species)
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)}) # in case of ambiguous species assignment keep only first one
the_names <- paste(df$Family, df$Genus, df$Species)
row_names_for_heat_maps <- lapply(prev_table_list, function(df){
the_names <- paste(df$Family, df$Genus, df$Species)
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)}) # in case of ambiguous species assignment keep only first one
the_name
row_names_for_heat_maps <- lapply(prev_table_list, function(df){
the_names <- paste(df$Family, df$Genus, df$Species)
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)}) # in case of ambiguous species assignment keep only first one
the_names <- paste(df$Family, df$Genus, df$Species)
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)
the_name
the_name <- paste(the_name, df$signi.)
the_name
row_names_for_heat_maps <- lapply(prev_table_list, function(df){
the_names <- paste(df$Family, df$Genus, df$Species)
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)
the_name <- paste(the_name, df$signi.)
}) # in case of ambiguous species assignment keep only first one
tax_orders <- lapply(1:length(diff_prevalence), function(i){
df <- diff_prevalence[[i]]
df$Taxon[1:head_values[i]]
})
pruned_ps_filt_ra <- lapply(1:length(diff_prevalence), function(i){
prune_taxa(tax_orders[[i]], ps_filt_ra)
})
heat_maps_prev <- lapply(1:length(pruned_ps_filt_ra), function(i){
maps <- make_heat_map_physeq_levels(pruned_ps_filt_ra[[i]], group_var = group_var, max_abundance_for_color = .05, tax_order = tax_orders[[i]], tax_names = row_names_for_heat_maps[[i]], color_sample_names = TRUE, gradient_steps = c(0.15, 0.3, 0.45, 1))
maps[[i]]
})
head_values
sum(head_values)
25/60
out_list <- DESeq2Apply_physeq(physeq = ps_filt, group_var = group_var, SFs = SFs, p.adjust.method = "fdr")
DESeq2_result_list <- out_list[[1]]
physeq_DESadjust <- out_list[[2]]
suppressWarnings(head_values <- sapply(DESeq2_result_list, function(df){
max(which(df$p_val_adj < 0.05))
}))
original_head_values <- data.frame(Comparison = c(names(head_values), "Total"), NoSignificant = c(head_values, ntaxa(ps_filt)),
PC_Significant = 100*c(head_values, ntaxa(ps_filt))/ntaxa(ps_filt))
head_values
head_values
head_values[head_values < 10] <- 10
head_values[head_values > 25] <- 25
i = 1
df <- head(DESeq2_result_list[[i]], head_values[i])
View(df)
DES_table_list <- lapply(1:length(DESeq2_result_list), function(i){
df <- head(DESeq2_result_list[[i]], head_values[i])
df <- dplyr::select(df, Family:Species, 4:5, 8:9, 13:14, 19:20)
colnames(df)[4:7] <- c("adj_p_val", "signi.", "fisher_p", "fisher_sign")
df
})
names(DES_table_list) <- names(DESeq2_result_list)
row_names_for_heat_maps <- lapply(DES_table_list, function(df){
the_names <- paste(df$Family, df$Genus, df$Species)
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)
the_name <- paste(the_name, df$signi.)
}) # in case of ambiguous species assignment keep only first one
row_names_for_heat_maps
tax_orders <- lapply(1:length(DESeq2_result_list), function(i){
df <- DESeq2_result_list[[i]]
df$Taxon[1:head_values[i]]
})
pruned_physeqs <- lapply(1:length(DESeq2_result_list), function(i){
# prune_taxa(tax_orders[[i]], ps_tca_filt)
prune_taxa(tax_orders[[i]], physeq_DESadjust)
})
heat_maps_DES <- lapply(1:length(pruned_physeqs), function(i){
maps <- make_heat_map_physeq_levels(pruned_physeqs[[i]], group_var = group_var, max_abundance_for_color = NULL, tax_order = tax_orders[[i]],
tax_names = row_names_for_heat_maps[[i]], color_sample_names = TRUE, gradient_steps = c(0.15, 0.3, 0.45, 1))
maps[[i]]
})
violin_plots_DES <- lapply(1:length(tax_orders), function(i){
plotlist <- plot_top_abundances_boxAndviolin(physeq = pruned_physeqs[[i]], group_var = group_var, tax_order = tax_orders[[i]], tax_names = row_names_for_heat_maps[[i]])
plotlist[[i]]
})
violin_plots_DES <- lapply(violin_plots_DES, `[[`, 8)
(5 + 0.41*sum(head_values))
sum(head_values)/5
ceiling(sum(head_values)/5)
13*2.2
wilcox_ra_result_list <- wilcoxTestApply_physeq(physeq = ps_filt_ra, group_var = group_var, excludeZeros = TRUE, p.adjust.method = "fdr")
suppressWarnings(head_values <- sapply(wilcox_ra_result_list, function(df){
max(which(df$p_val_adj < 0.05))
}))
original_head_values <- data.frame(Comparison = c(names(head_values), "Total"), NoSignificant = c(head_values, ntaxa(ps_filt_ra)),
PC_Significant = 100*c(head_values, ntaxa(ps_filt_ra))/ntaxa(ps_filt_ra))
head_values[head_values < 10] <- 10
head_values[head_values > 25] <- 25
wilcox_ra_table_list <- lapply(1:length(wilcox_ra_result_list), function(i){
df <- head(wilcox_ra_result_list[[i]], head_values[i])
df <- dplyr::select(df, Family:Species, 4:5, 8:9, 13:14, 19:20)
colnames(df)[4:7] <- c("adj_p_val", "signi.", "fisher_p", "fisher_sign")
df
})
names(wilcox_ra_table_list) <- names(wilcox_ra_result_list)
row_names_for_heat_maps <- lapply(wilcox_ra_table_list, function(df){
the_names <- paste(df$Family, df$Genus, df$Species)
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)
the_name <- paste(the_name, df$signi.)
}) # in case of ambiguous species assignment keep only first one
row_names_for_heat_maps
TbTmatrixes_list <- calculate_TbTmatrixes(ps_filt, group_var = group_var)
TbTresult_list <- evaluate_TbTmatrixes(TbTmatrixes_list, physeq = ps_filt, group_var = group_var, p.adjust.method = "fdr")
TbT_table_list <- lapply(1:length(TbTresult_list), function(i){
df <- head(TbTresult_list[[i]], head_values[i])
df <- dplyr::select(df, Family:Species, 2:3, 4:5, 10:11, 16:17)
colnames(df)[6:7] <- c("fisher_p", "fisher_sign")
df
})
names(TbT_table_list) <- names(TbTresult_list)
row_names_for_heat_maps <- lapply(TbT_table_list, function(df){
the_names <- paste(df$Family, df$Genus, df$Species)
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)}) # in case of ambiguous species assignment keep only first one
tax_orders <- lapply(1:length(TbTresult_list), function(i){
df <- TbTresult_list[[i]]
as.character(df$Taxon[1:head_values[i]])
})
pruned_physeqs <- lapply(1:length(TbTresult_list), function(i){
prune_taxa(tax_orders[[i]], ps_filt_ra)
})
heat_maps_tbt <- lapply(1:length(pruned_physeqs), function(i){
maps <- make_heat_map_physeq_levels(pruned_physeqs[[i]], group_var = group_var, max_abundance_for_color = .05, tax_order = tax_orders[[i]],
tax_names = row_names_for_heat_maps[[i]], color_sample_names = TRUE, gradient_steps = c(0.15, 0.3, 0.45, 1))
maps[[i]]
})
violin_plots_tbt <- lapply(1:length(tax_orders), function(i){
plotlist <- plot_top_abundances_boxAndviolin(physeq = pruned_physeqs[[i]], group_var = group_var, tax_order = tax_orders[[i]], tax_names = row_names_for_heat_maps[[i]])
plotlist[[i]]
})
violin_plots_tbt <- lapply(violin_plots_tbt, `[[`, 8)
extra_level
ps_extra <- tax_glom(ps, taxrank = extra_level, NArm = FALSE)
library_size_adjust_list <- adj_LS(ps_extra)
ps_tca_extra <- library_size_adjust_list[[1]]
SFs <- library_size_adjust_list[[2]] # NB: differs from SFs from ASVs but correlated
filterList <- plot_abundance_prev_filter(physeq = ps_tca_extra, prevalence = prevalence, taxa_sums_quantile = taxa_sums_quantile)
ps_tca_filt_extra <- filter_taxa(ps_tca_extra, function(x){(sum(x > min_obs) > (prevalence/100)*length(x)) || (sum(x) > quantile(taxa_sums(ps_tca_extra), probs = taxa_sums_quantile/100))}, prune = TRUE)
ps
ps_tca_filt_extra <- filter_taxa(ps_tca_extra, function(x){(sum(x > min_obs) > (prevalence/100)*length(x)) || (sum(x) > quantile(taxa_sums(ps_tca_extra), probs = taxa_sums_quantile/100))}, prune = TRUE)
ps_filt_extra <- prune_taxa(taxa_names(ps_tca_filt_extra), ps_extra) # needed for DESeq2Apply_physeq
ps_filt_ra_extra <- transform_sample_counts(ps_filt_extra, function(x){x/sum(x)}) # same for ps_tca_filt
Tr_bar <- plot_bar_own(physeq = ps_filt_ra_extra, x = "Sample", group_var = group_var, fill = extra_level)
filterList[[1]]
Tr_bar
overview <- get_overview_of_physeq(ps_tca_filt_extra)
Tr <- make_heat_map_physeq(ps_filt_ra_extra, group_var, max_abundance_for_color = .1, tax_order = NULL,
tax_names = NULL, color_sample_names = TRUE, gradient_steps = c(0.25, 0.5, 0.75, 1))
Tr <- make_heat_map_physeq(ps_filt_ra_extra, group_var, max_abundance_for_color = NULL, tax_order = NULL,
tax_names = NULL, color_sample_names = TRUE, gradient_steps = c(0.25, 0.5, 0.75, 1))
Tr
taxa_names(ps_filt_ra_extra)
tax_table(ps_filt_ra_extra)
tax_table(ps_filt_ra_extra)[, extra_level]
taxNames <- tax_table(ps_filt_ra_extra)[, extra_level]
class(taxNames)
taxNames <- as.character(tax_table(ps_filt_ra_extra)[, extra_level])
taxNames
Tr <- make_heat_map_physeq(ps_filt_ra_extra, group_var, max_abundance_for_color = NULL, tax_order = NULL,
tax_names = taxNames, color_sample_names = TRUE, gradient_steps = c(0.25, 0.5, 0.75, 1))
taxNames <- as.character(tax_table(ps_filt_ra_extra)[, extra_level])
taxNames[is.na(taxNames)] <- "NA"
Tr <- make_heat_map_physeq(ps_filt_ra_extra, group_var, max_abundance_for_color = NULL, tax_order = NULL,
tax_names = taxNames, color_sample_names = TRUE, gradient_steps = c(0.25, 0.5, 0.75, 1))
Tr
taxNames <- as.character(tax_table(ps_tca_filt)[, "Species"])
taxNames[is.na(taxNames)] <- "NA"
Tr <- make_heat_map_physeq(ps_filt_ra, group_var, max_abundance_for_color = .05, tax_order = NULL,
tax_names = taxNames, color_sample_names = TRUE, gradient_steps = c(0.25, 0.5, 0.75, 1))
Tr
taxNames <- as.character(tax_table(ps_tca_filt)[, "Species"])
taxNames[is.na(taxNames)] <- "NA"
taxNames <- sapply(strsplit(taxNames, split = "/"), `[`, 1)
Tr <- make_heat_map_physeq(ps_filt_ra, group_var, max_abundance_for_color = .05, tax_order = NULL,
tax_names = taxNames, color_sample_names = TRUE, gradient_steps = c(0.25, 0.5, 0.75, 1))
Tr
(1 + 0.07*ntaxa(ps_filt_ra_extra))
diff_prevalence <- test_differential_prevalence(physeq = ps_filt_ra_extra, group_var = group_var, p.adj.method = "fdr", minCount = 0L)
suppressWarnings(head_values <- sapply(diff_prevalence, function(df){
max(which(df[, 3] < 0.05))
}))
original_head_values <- data.frame(Comparison = c(names(head_values), "Total"), NoSignificant = c(head_values, ntaxa(ps_filt_ra_extra)),
PC_Significant = 100*c(head_values, ntaxa(ps_filt_ra_extra))/ntaxa(ps_filt_ra_extra))
head_values[head_values < 10] <- min(10, ntaxa(ps_filt_ra_extra))
head_values[head_values > 25] <- 25
prev_table_list <- lapply(1:length(diff_prevalence), function(i){
df <- head(diff_prevalence[[i]], head_values[i])
df <- dplyr::select(df, which(colnames(df) == extra_level), 3:6)
colnames(df)[2:3] <- c("adj_p_val", "signi.")
df
})
names(prev_table_list) <- names(diff_prevalence)
diff_prevalence <- test_differential_prevalence(physeq = ps_filt_ra_extra, group_var = group_var, p.adj.method = "fdr", minCount = 0L)
suppressWarnings(head_values <- sapply(diff_prevalence, function(df){
max(which(df[, 3] < 0.05))
}))
original_head_values <- data.frame(Comparison = c(names(head_values), "Total"), NoSignificant = c(head_values, ntaxa(ps_filt_ra_extra)),
PC_Significant = 100*c(head_values, ntaxa(ps_filt_ra_extra))/ntaxa(ps_filt_ra_extra))
# Show at least 10 taxa even if less are significant and show max 25 even if far more are significant
head_values[head_values < 10] <- min(10, ntaxa(ps_filt_ra_extra))
head_values[head_values > 25] <- 25
prev_table_list <- lapply(1:length(diff_prevalence), function(i){
df <- head(diff_prevalence[[i]], head_values[i])
df <- dplyr::select(df, which(colnames(df) == extra_level), 3:6)
colnames(df)[2:3] <- c("adj_p_val", "signi.")
df
})
names(prev_table_list) <- names(diff_prevalence)
row_names_for_heat_maps <- lapply(prev_table_list, function(df){
the_names <- paste(df$Family, df$Genus, df$Species)
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)
the_name <- paste(the_name, df$signi.)
}) # in case of ambiguous species assignment keep only first one
tax_orders <- lapply(1:length(diff_prevalence), function(i){
df <- diff_prevalence[[i]]
df$Taxon[1:head_values[i]]
})
pruned_ps_filt_ra <- lapply(1:length(diff_prevalence), function(i){
prune_taxa(tax_orders[[i]], ps_filt_ra_extra)
})
heat_maps_prev <- lapply(1:length(pruned_ps_filt_ra), function(i){
maps <- make_heat_map_physeq_levels(pruned_ps_filt_ra[[i]], group_var = group_var, max_abundance_for_color = NULL, tax_order = tax_orders[[i]], tax_names = row_names_for_heat_maps[[i]], color_sample_names = TRUE, gradient_steps = c(0.15, 0.3, 0.45, 1))
maps[[i]]
})
(5 + 0.41*sum(head_values))
out_list <- DESeq2Apply_physeq(physeq = ps_filt_extra, group_var = group_var, SFs = SFs, p.adjust.method = "fdr")
DESeq2_result_list <- out_list[[1]]
physeq_DESadjust <- out_list[[2]]
suppressWarnings(head_values <- sapply(DESeq2_result_list, function(df){
max(which(df$p_val_adj < 0.05))
}))
original_head_values <- data.frame(Comparison = c(names(head_values), "Total"), NoSignificant = c(head_values, ntaxa(ps_filt_extra)),
PC_Significant = 100*c(head_values, ntaxa(ps_filt_extra))/ntaxa(ps_filt_extra))
head_values[head_values < 10] <- min(10, ntaxa(ps_filt_extra))
head_values[head_values > 25] <- 25
DES_table_list <- lapply(1:length(DESeq2_result_list), function(i){
df <- head(DESeq2_result_list[[i]], head_values[i])
df <- dplyr::select(df, which(colnames(df) == extra_level), 4:5, 8:9, 13:14, 19:20)
colnames(df)[2:5] <- c("adj_p_val", "signi.", "fisher_p", "fisher_sign")
df
})
names(DES_table_list) <- names(DESeq2_result_list)
# print(xtable(DES_table_list[[1]], align = "|c|c|c|c|c|c|c|c|c|c|", digits = 4), include.rownames = FALSE)
row_names_for_heat_maps <- lapply(DES_table_list, function(df){
the_names <- paste(df$Family, df$Genus, df$Species)
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)
the_name <- paste(the_name, df$signi.)
}) # in case of ambiguous species assignment keep only first one
tax_orders <- lapply(1:length(DESeq2_result_list), function(i){
df <- DESeq2_result_list[[i]]
df$Taxon[1:head_values[i]]
})
pruned_physeqs <- lapply(1:length(DESeq2_result_list), function(i){
# prune_taxa(tax_orders[[i]], ps_tca_filt_extra)
prune_taxa(tax_orders[[i]], physeq_DESadjust)
})
heat_maps_DES <- lapply(1:length(pruned_physeqs), function(i){
maps <- make_heat_map_physeq_levels(pruned_physeqs[[i]], group_var = group_var, max_abundance_for_color = NULL, tax_order = tax_orders[[i]],
tax_names = row_names_for_heat_maps[[i]], color_sample_names = TRUE, gradient_steps = c(0.15, 0.3, 0.45, 1))
maps[[i]]
})
violin_plots_DES <- lapply(1:length(tax_orders), function(i){
plotlist <- plot_top_abundances_boxAndviolin(physeq = pruned_physeqs[[i]], group_var = group_var, tax_order = tax_orders[[i]], tax_names = row_names_for_heat_maps[[i]])
plotlist[[i]]
})
# there are 8 plots per list, only pick violin plot faceted, and logged abundance:
violin_plots_DES <- lapply(violin_plots_DES, `[[`, 8)
extra_level = "Phylum"
ps_extra <- tax_glom(ps, taxrank = extra_level, NArm = FALSE)
library_size_adjust_list <- adj_LS(ps_extra)
ps_tca_extra <- library_size_adjust_list[[1]]
SFs <- library_size_adjust_list[[2]] # NB: differs from SFs from ASVs but correlated
filterList <- plot_abundance_prev_filter(physeq = ps_tca_extra, prevalence = prevalence, taxa_sums_quantile = taxa_sums_quantile)
ps_tca_filt_extra <- filter_taxa(ps_tca_extra, function(x){(sum(x > min_obs) > (prevalence/100)*length(x)) || (sum(x) > quantile(taxa_sums(ps_tca_extra), probs = taxa_sums_quantile/100))}, prune = TRUE)
ps_filt_extra <- prune_taxa(taxa_names(ps_tca_filt_extra), ps_extra) # needed for DESeq2Apply_physeq
ps_filt_ra_extra <- transform_sample_counts(ps_filt_extra, function(x){x/sum(x)}) # same for ps_tca_filt
Tr_bar <- plot_bar_own(physeq = ps_filt_ra_extra, x = "Sample", group_var = group_var, fill = extra_level)
Tr_bar
filterList[[1]]
taxNames <- as.character(tax_table(ps_filt_ra_extra)[, extra_level])
taxNames[is.na(taxNames)] <- "NA"
taxNames <- sapply(strsplit(taxNames, split = "/"), `[`, 1)
Tr <- make_heat_map_physeq(ps_filt_ra_extra, group_var, max_abundance_for_color = NULL, tax_order = NULL,
tax_names = taxNames, color_sample_names = TRUE, gradient_steps = c(0.25, 0.5, 0.75, 1))
T
Tr
(1 + 0.07*ntaxa(ps_filt_ra_extra))
i
df <- head(diff_prevalence[[i]], head_values[i])
View(df)
which(colnames(df) == extra_level
q
colnames(df)
which(colnames(df) == extra_level)
df[, which(colnames(df) == extra_level)]
the_names <- as.character(df[, which(colnames(df) == extra_level)])
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)
the_name <- paste(the_name, df$signi.)
the_name
extra_level
extra_level = "Phylum"
ps_extra <- tax_glom(ps, taxrank = extra_level, NArm = FALSE)
library_size_adjust_list <- adj_LS(ps_extra)
ps_tca_extra <- library_size_adjust_list[[1]]
SFs <- library_size_adjust_list[[2]] # NB: differs from SFs from ASVs but correlated
filterList <- plot_abundance_prev_filter(physeq = ps_tca_extra, prevalence = prevalence, taxa_sums_quantile = taxa_sums_quantile)
ps_tca_filt_extra <- filter_taxa(ps_tca_extra, function(x){(sum(x > min_obs) > (prevalence/100)*length(x)) || (sum(x) > quantile(taxa_sums(ps_tca_extra), probs = taxa_sums_quantile/100))}, prune = TRUE)
ps_filt_extra <- prune_taxa(taxa_names(ps_tca_filt_extra), ps_extra) # needed for DESeq2Apply_physeq
ps_filt_ra_extra <- transform_sample_counts(ps_filt_extra, function(x){x/sum(x)}) # same for ps_tca_filt
## add bar plots
Tr_bar <- plot_bar_own(physeq = ps_filt_ra_extra, x = "Sample", group_var = group_var, fill = extra_level)
diff_prevalence <- test_differential_prevalence(physeq = ps_filt_ra_extra, group_var = group_var, p.adj.method = "fdr", minCount = 0L)
suppressWarnings(head_values <- sapply(diff_prevalence, function(df){
max(which(df[, 3] < 0.05))
}))
original_head_values <- data.frame(Comparison = c(names(head_values), "Total"), NoSignificant = c(head_values, ntaxa(ps_filt_ra_extra)),
PC_Significant = 100*c(head_values, ntaxa(ps_filt_ra_extra))/ntaxa(ps_filt_ra_extra))
head_values[head_values < 10] <- min(10, ntaxa(ps_filt_ra_extra))
head_values[head_values > 25] <- 25
prev_table_list <- lapply(1:length(diff_prevalence), function(i){
df <- head(diff_prevalence[[i]], head_values[i])
df <- dplyr::select(df, which(colnames(df) == extra_level), 3:6)
colnames(df)[2:3] <- c("adj_p_val", "signi.")
df
})
names(prev_table_list) <- names(diff_prevalence)
row_names_for_heat_maps <- lapply(prev_table_list, function(df){
the_names <- as.character(df[, which(colnames(df) == extra_level)])
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)
the_name <- paste(the_name, df$signi.)
})
row_names_for_heat_maps
diff_prevalence <- test_differential_prevalence(physeq = ps_filt_ra_extra, group_var = group_var, p.adj.method = "fdr", minCount = 0L)
suppressWarnings(head_values <- sapply(diff_prevalence, function(df){
max(which(df[, 3] < 0.05))
}))
original_head_values <- data.frame(Comparison = c(names(head_values), "Total"), NoSignificant = c(head_values, ntaxa(ps_filt_ra_extra)),
PC_Significant = 100*c(head_values, ntaxa(ps_filt_ra_extra))/ntaxa(ps_filt_ra_extra))
# Show at least 10 taxa even if less are significant and show max 25 even if far more are significant
head_values[head_values < 10] <- min(10, ntaxa(ps_filt_ra_extra))
head_values[head_values > 25] <- 25
prev_table_list <- lapply(1:length(diff_prevalence), function(i){
df <- head(diff_prevalence[[i]], head_values[i])
df <- dplyr::select(df, which(colnames(df) == extra_level), 3:6)
colnames(df)[2:3] <- c("adj_p_val", "signi.")
df
})
names(prev_table_list) <- names(diff_prevalence)
row_names_for_heat_maps <- lapply(prev_table_list, function(df){
the_names <- as.character(df[, which(colnames(df) == extra_level)])
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)
the_name <- paste(the_name, df$signi.)
})
tax_orders <- lapply(1:length(diff_prevalence), function(i){
df <- diff_prevalence[[i]]
df$Taxon[1:head_values[i]]
})
pruned_ps_filt_ra <- lapply(1:length(diff_prevalence), function(i){
prune_taxa(tax_orders[[i]], ps_filt_ra_extra)
})
heat_maps_prev <- lapply(1:length(pruned_ps_filt_ra), function(i){
maps <- make_heat_map_physeq_levels(pruned_ps_filt_ra[[i]], group_var = group_var, max_abundance_for_color = .3, tax_order = tax_orders[[i]], tax_names = row_names_for_heat_maps[[i]], color_sample_names = TRUE, gradient_steps = c(0.15, 0.3, 0.45, 1))
maps[[i]]
})
out_list <- DESeq2Apply_physeq(physeq = ps_filt_extra, group_var = group_var, SFs = SFs, p.adjust.method = "fdr")
DESeq2_result_list <- out_list[[1]]
physeq_DESadjust <- out_list[[2]]
suppressWarnings(head_values <- sapply(DESeq2_result_list, function(df){
max(which(df$p_val_adj < 0.05))
}))
original_head_values <- data.frame(Comparison = c(names(head_values), "Total"), NoSignificant = c(head_values, ntaxa(ps_filt_extra)),
PC_Significant = 100*c(head_values, ntaxa(ps_filt_extra))/ntaxa(ps_filt_extra))
head_values[head_values < 10] <- min(10, ntaxa(ps_filt_extra))
head_values[head_values > 25] <- 25
DES_table_list <- lapply(1:length(DESeq2_result_list), function(i){
df <- head(DESeq2_result_list[[i]], head_values[i])
df <- dplyr::select(df, which(colnames(df) == extra_level), 4:5, 8:9, 13:14, 19:20)
colnames(df)[2:5] <- c("adj_p_val", "signi.", "fisher_p", "fisher_sign")
df
})
names(DES_table_list) <- names(DESeq2_result_list)
# print(xtable(DES_table_list[[1]], align = "|c|c|c|c|c|c|c|c|c|c|", digits = 4), include.rownames = FALSE)
row_names_for_heat_maps <- lapply(DES_table_list, function(df){
the_names <- as.character(df[, which(colnames(df) == extra_level)])
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)
the_name <- paste(the_name, df$signi.)
})
tax_orders <- lapply(1:length(DESeq2_result_list), function(i){
df <- DESeq2_result_list[[i]]
df$Taxon[1:head_values[i]]
})
pruned_physeqs <- lapply(1:length(DESeq2_result_list), function(i){
# prune_taxa(tax_orders[[i]], ps_tca_filt_extra)
prune_taxa(tax_orders[[i]], physeq_DESadjust)
})
heat_maps_DES <- lapply(1:length(pruned_physeqs), function(i){
maps <- make_heat_map_physeq_levels(pruned_physeqs[[i]], group_var = group_var, max_abundance_for_color = 2000, tax_order = tax_orders[[i]],
tax_names = row_names_for_heat_maps[[i]], color_sample_names = TRUE, gradient_steps = c(0.15, 0.3, 0.45, 1))
maps[[i]]
})
violin_plots_DES <- lapply(1:length(tax_orders), function(i){
plotlist <- plot_top_abundances_boxAndviolin(physeq = pruned_physeqs[[i]], group_var = group_var, tax_order = tax_orders[[i]], tax_names = row_names_for_heat_maps[[i]])
plotlist[[i]]
})
# there are 8 plots per list, only pick violin plot faceted, and logged abundance:
violin_plots_DES <- lapply(violin_plots_DES, `[[`, 8)
heat_maps_DES[[1]]
wilcox_ra_result_list <- wilcoxTestApply_physeq(physeq = ps_filt_ra_extra, group_var = group_var, excludeZeros = TRUE, p.adjust.method = "fdr")
suppressWarnings(head_values <- sapply(wilcox_ra_result_list, function(df){
max(which(df$p_val_adj < 0.05))
}))
original_head_values <- data.frame(Comparison = c(names(head_values), "Total"), NoSignificant = c(head_values, ntaxa(ps_filt_ra_extra)),
PC_Significant = 100*c(head_values, ntaxa(ps_filt_ra_extra))/ntaxa(ps_filt_ra_extra))
head_values[head_values < 10] <- min(10, ntaxa(ps_filt_ra_extra))
head_values[head_values > 25] <- 25
wilcox_ra_table_list <- lapply(1:length(wilcox_ra_result_list), function(i){
df <- head(wilcox_ra_result_list[[i]], head_values[i])
df <- dplyr::select(df, which(colnames(df) == extra_level), 4:5, 8:9, 13:14, 19:20)
colnames(df)[2:5] <- c("adj_p_val", "signi.", "fisher_p", "fisher_sign")
df
})
names(wilcox_ra_table_list) <- names(wilcox_ra_result_list)
# print(xtable(wilcox_ra_table_list[[1]], align = "|c|c|c|c|c|c|c|c|c|c|", digits = 4), include.rownames = FALSE)
row_names_for_heat_maps <- lapply(wilcox_ra_table_list, function(df){
the_names <- as.character(df[, which(colnames(df) == extra_level)])
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)
the_name <- paste(the_name, df$signi.)
}) # in case of ambiguous species assignment keep only first one
tax_orders <- lapply(1:length(wilcox_ra_result_list), function(i){
df <- wilcox_ra_result_list[[i]]
as.character(df$Taxon[1:head_values[i]])
})
pruned_physeqs <- lapply(1:length(wilcox_ra_result_list), function(i){
prune_taxa(tax_orders[[i]], ps_filt_ra_extra)
})
heat_maps_wilcox <- lapply(1:length(pruned_physeqs), function(i){
maps <- make_heat_map_physeq_levels(pruned_physeqs[[i]], group_var = group_var, max_abundance_for_color = .3, tax_order = tax_orders[[i]],
tax_names = row_names_for_heat_maps[[i]], color_sample_names = TRUE, gradient_steps = c(0.15, 0.3, 0.45, 1))
maps[[i]]
})
violin_plots_wilcox <- lapply(1:length(tax_orders), function(i){
plotlist <- plot_top_abundances_boxAndviolin(physeq = pruned_physeqs[[i]], group_var = group_var, tax_order = tax_orders[[i]], tax_names = row_names_for_heat_maps[[i]])
plotlist[[i]]
})
# there are 8 plots per list, only pick violin plot faceted, and logged abundance:
violin_plots_wilcox <- lapply(violin_plots_wilcox, `[[`, 8)
TbTmatrixes_list <- calculate_TbTmatrixes(ps_filt_extra, group_var = group_var)
# NB: because ratios have been divided by geometric mean over all samples and then log transformed, each row (over all samples) sums to 0:
# max(sapply(TbTmatrixes_list[[1]], function(x){max(apply(x, 1, sum, na.rm = T))}))
TbTresult_list <- evaluate_TbTmatrixes(TbTmatrixes_list, physeq = ps_filt_extra, group_var = group_var, p.adjust.method = "fdr")
# suppressWarnings(head_values <- sapply(TbTresult_list, function(df){
#         # max(which(df$p_val_adj < 0.05))
#         25
# }))
# original_head_values <- data.frame(Comparison = c(names(head_values), "Total"), NoSignificant = c(head_values, ntaxa(ps_filt)),
#                                    PC_Significant = 100*c(head_values, ntaxa(ps_filt))/ntaxa(ps_filt))
# head_values[head_values < 10] <- 10
# head_values[head_values > 25] <- 25
TbT_table_list <- lapply(1:length(TbTresult_list), function(i){
df <- head(TbTresult_list[[i]], head_values[i])
df <- dplyr::select(df, which(colnames(df) == extra_level), 2:3, 4:5, 10:11, 16:17)
colnames(df)[4:5] <- c("fisher_p", "fisher_sign")
df
})
names(TbT_table_list) <- names(TbTresult_list)
df <- TbT_table_list[[1]]
View(df)
TbTmatrixes_list <- calculate_TbTmatrixes(ps_filt_extra, group_var = group_var)
# NB: because ratios have been divided by geometric mean over all samples and then log transformed, each row (over all samples) sums to 0:
# max(sapply(TbTmatrixes_list[[1]], function(x){max(apply(x, 1, sum, na.rm = T))}))
TbTresult_list <- evaluate_TbTmatrixes(TbTmatrixes_list, physeq = ps_filt_extra, group_var = group_var, p.adjust.method = "fdr")
# suppressWarnings(head_values <- sapply(TbTresult_list, function(df){
#         # max(which(df$p_val_adj < 0.05))
#         25
# }))
# original_head_values <- data.frame(Comparison = c(names(head_values), "Total"), NoSignificant = c(head_values, ntaxa(ps_filt)),
#                                    PC_Significant = 100*c(head_values, ntaxa(ps_filt))/ntaxa(ps_filt))
# head_values[head_values < 10] <- 10
# head_values[head_values > 25] <- 25
TbT_table_list <- lapply(1:length(TbTresult_list), function(i){
df <- head(TbTresult_list[[i]], head_values[i])
df <- dplyr::select(df, which(colnames(df) == extra_level), 2:3, 4:5, 10:11, 16:17)
colnames(df)[4:5] <- c("fisher_p", "fisher_sign")
df
})
names(TbT_table_list) <- names(TbTresult_list)
# print(xtable(TbT_table_list[[1]], align = "|c|c|c|c|c|c|c|c|c|c|", digits = 4), include.rownames = FALSE)
row_names_for_heat_maps <- lapply(TbT_table_list, function(df){
the_names <- as.character(df[, which(colnames(df) == extra_level)])
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)}) # in case of ambiguous species assignment keep only first one
tax_orders <- lapply(1:length(TbTresult_list), function(i){
df <- TbTresult_list[[i]]
as.character(df$Taxon[1:head_values[i]])
})
# NB: currently using ps_filt_ra here, need something better!!
pruned_physeqs <- lapply(1:length(TbTresult_list), function(i){
prune_taxa(tax_orders[[i]], ps_filt_ra_extra)
})
heat_maps_tbt <- lapply(1:length(pruned_physeqs), function(i){
maps <- make_heat_map_physeq_levels(pruned_physeqs[[i]], group_var = group_var, max_abundance_for_color = NULL, tax_order = tax_orders[[i]],
tax_names = row_names_for_heat_maps[[i]], color_sample_names = TRUE, gradient_steps = c(0.15, 0.3, 0.45, 1))
maps[[i]]
})
violin_plots_tbt <- lapply(1:length(tax_orders), function(i){
plotlist <- plot_top_abundances_boxAndviolin(physeq = pruned_physeqs[[i]], group_var = group_var, tax_order = tax_orders[[i]], tax_names = row_names_for_heat_maps[[i]])
plotlist[[i]]
})
# there are 8 plots per list, only pick violin plot faceted, and logged abundance:
violin_plots_tbt <- lapply(violin_plots_tbt, `[[`, 8)
