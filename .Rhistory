prev_table_list <- lapply(1:length(diff_prevalence), function(i){
df <- head(diff_prevalence[[i]], head_values[i])
df <- dplyr::select(df, which(colnames(df) == extra_level), 3:6)
colnames(df)[2:3] <- c("adj_p_val", "signi.")
df
})
names(prev_table_list) <- names(diff_prevalence)
row_names_for_heat_maps <- lapply(prev_table_list, function(df){
the_names <- paste(df[, 1], df$signi., sep = "_")
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)})
tax_orders <- lapply(1:length(diff_prevalence), function(i){
df <- diff_prevalence[[i]]
df$Taxon[1:head_values[i]]
})
pruned_ps_filt_ra <- lapply(1:length(diff_prevalence), function(i){
prune_taxa(tax_orders[[i]], ps_filt_ra)
})
heat_maps_prev <- lapply(1:length(pruned_ps_filt_ra), function(i){
maps <- make_heat_map_physeq_levels(pruned_ps_filt_ra[[i]], group_var = group_var, max_abundance_for_color = .05, tax_order = tax_orders[[i]], tax_names = row_names_for_heat_maps[[i]], color_sample_names = TRUE, gradient_steps = c(0.15, 0.3, 0.45, 1))
maps[[i]]
})
heat_maps_prev[[2]]
out_list <- DESeq2Apply_physeq(physeq = ps_filt_extra, group_var = group_var, SFs = SFs, p.adjust.method = "fdr")
DESeq2_result_list <- out_list[[1]]
suppressWarnings(head_values <- sapply(DESeq2_result_list, function(df){
max(which(df$p_val_adj < 0.05))
}))
out_list <- DESeq2Apply_physeq(physeq = ps_filt_extra, group_var = group_var, SFs = SFs, p.adjust.method = "fdr")
DESeq2_result_list <- out_list[[1]]
# physeq_DESadjust <- out_list[[2]]
suppressWarnings(head_values <- sapply(DESeq2_result_list, function(df){
max(which(df$p_val_adj < 0.05))
}))
original_head_values <- data.frame(Comparison = c(names(head_values), "Total"), NoSignificant = c(head_values, ntaxa(ps_filt_extra)),
PC_Significant = 100*c(head_values, ntaxa(ps_filt_extra))/ntaxa(ps_filt_extra))
head_values[head_values < 10] <- min(10, ntaxa(ps_filt_extra))
head_values[head_values > 25] <- 25
DES_table_list <- lapply(1:length(DESeq2_result_list), function(i){
df <- head(DESeq2_result_list[[i]], head_values[i])
df <- dplyr::select(df, which(colnames(df) == extra_level), 4:5, 8:9, 13:14, 19:20)
colnames(df)[2:5] <- c("adj_p_val", "signi.", "fisher_p", "fisher_sign")
df
})
names(DES_table_list) <- names(DESeq2_result_list)
print(xtable(DES_table_list[[1]], align = "|c|c|c|c|c|c|c|c|c|c|", digits = 4), include.rownames = FALSE)
row_names_for_heat_maps <- lapply(DES_table_list, function(df){
paste(df[, 1], df$signi., sep = "")
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)}) # in case of ambiguous species assignment keep only first one
row_names_for_heat_maps <- lapply(DES_table_list, function(df){
the_names <- paste(df[, 1], df$signi., sep = "")
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)}) # in case of ambiguous species assignment keep only first one
tax_orders <- lapply(1:length(DESeq2_result_list), function(i){
df <- DESeq2_result_list[[i]]
df$Taxon[1:head_values[i]]
})
pruned_physeqs <- lapply(1:length(DESeq2_result_list), function(i){
prune_taxa(tax_orders[[i]], ps_tca_filt)
})
heat_maps_DES <- lapply(1:length(pruned_physeqs), function(i){
maps <- make_heat_map_physeq_levels(pruned_physeqs[[i]], group_var = group_var, max_abundance_for_color = 2000, tax_order = tax_orders[[i]],
tax_names = row_names_for_heat_maps[[i]], color_sample_names = TRUE, gradient_steps = c(0.15, 0.3, 0.45, 1))
maps[[i]]
})
violin_plots_DES <- lapply(1:length(tax_orders), function(i){
plotlist <- plot_top_abundances_boxAndviolin(physeq = pruned_physeqs[[i]], group_var = group_var, tax_order = tax_orders[[i]], tax_names = row_names_for_heat_maps[[i]])
plotlist[[i]]
})
violin_plots_DES <- lapply(violin_plots_DES, `[[`, 8)
knitr::kable(original_head_values, row.names = FALSE)
i = 1
print(knitr::kable(DES_table_list[[i]], caption = names(DES_table_list)[i]))
heat_maps_DES[[1]]
violin_plots_DES[[1]]
wilcox_ra_result_list <- wilcoxTestApply_physeq(physeq = ps_filt_ra_extra, group_var = group_var, excludeZeros = TRUE, p.adjust.method = "fdr")
suppressWarnings(head_values <- sapply(wilcox_ra_result_list, function(df){
max(which(df$p_val_adj < 0.05))
}))
head_values
wilcox_ra_result_list <- wilcoxTestApply_physeq(physeq = ps_filt_ra_extra, group_var = group_var, excludeZeros = TRUE, p.adjust.method = "fdr")
suppressWarnings(head_values <- sapply(wilcox_ra_result_list, function(df){
max(which(df$p_val_adj < 0.05))
}))
original_head_values <- data.frame(Comparison = c(names(head_values), "Total"), NoSignificant = c(head_values, ntaxa(ps_filt_ra_extra)),
PC_Significant = 100*c(head_values, ntaxa(ps_filt_ra_extra))/ntaxa(ps_filt_ra_extra))
head_values[head_values < 10] <- min(10, ntaxa(ps_filt_ra_extra))
head_values[head_values > 25] <- 25
wilcox_ra_table_list <- lapply(1:length(wilcox_ra_result_list), function(i){
df <- head(wilcox_ra_result_list[[i]], head_values[i])
df <- dplyr::select(df, which(colnames(df) == extra_level), 4:5, 8:9, 13:14, 19:20)
colnames(df)[2:5] <- c("adj_p_val", "signi.", "fisher_p", "fisher_sign")
df
})
names(wilcox_ra_table_list) <- names(wilcox_ra_result_list)
print(xtable(wilcox_ra_table_list[[1]], align = "|c|c|c|c|c|c|c|c|c|c|", digits = 4), include.rownames = FALSE)
row_names_for_heat_maps <- lapply(wilcox_ra_table_list, function(df){
the_names <- paste(df[, 1], df$signi., sep = "")
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)}) # in case of ambiguous species assignment keep only first one
tax_orders <- lapply(1:length(wilcox_ra_result_list), function(i){
df <- wilcox_ra_result_list[[i]]
as.character(df$Taxon[1:head_values[i]])
})
out_list <- DESeq2Apply_physeq(physeq = ps_filt_extra, group_var = group_var, SFs = SFs, p.adjust.method = "fdr")
DESeq2_result_list <- out_list[[1]]
physeq_DESadjust <- out_list[[2]]
suppressWarnings(head_values <- sapply(DESeq2_result_list, function(df){
max(which(df$p_val_adj < 0.05))
}))
original_head_values <- data.frame(Comparison = c(names(head_values), "Total"), NoSignificant = c(head_values, ntaxa(ps_filt_extra)),
PC_Significant = 100*c(head_values, ntaxa(ps_filt_extra))/ntaxa(ps_filt_extra))
head_values[head_values < 10] <- min(10, ntaxa(ps_filt_extra))
head_values[head_values > 25] <- 25
DES_table_list <- lapply(1:length(DESeq2_result_list), function(i){
df <- head(DESeq2_result_list[[i]], head_values[i])
df <- dplyr::select(df, which(colnames(df) == extra_level), 4:5, 8:9, 13:14, 19:20)
colnames(df)[2:5] <- c("adj_p_val", "signi.", "fisher_p", "fisher_sign")
df
})
names(DES_table_list) <- names(DESeq2_result_list)
row_names_for_heat_maps <- lapply(DES_table_list, function(df){
the_names <- paste(df[, 1], df$signi., sep = "")
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)}) # in case of ambiguous species assignment keep only first one
tax_orders <- lapply(1:length(DESeq2_result_list), function(i){
df <- DESeq2_result_list[[i]]
df$Taxon[1:head_values[i]]
})
physeq_DESadjust
pruned_physeqs <- lapply(1:length(DESeq2_result_list), function(i){
# prune_taxa(tax_orders[[i]], ps_tca_filt_extra)
prune_taxa(tax_orders[[i]], physeq_DESadjust)
})
heat_maps_DES <- lapply(1:length(pruned_physeqs), function(i){
maps <- make_heat_map_physeq_levels(pruned_physeqs[[i]], group_var = group_var, max_abundance_for_color = 2000, tax_order = tax_orders[[i]],
tax_names = row_names_for_heat_maps[[i]], color_sample_names = TRUE, gradient_steps = c(0.15, 0.3, 0.45, 1))
maps[[i]]
})
violin_plots_DES <- lapply(1:length(tax_orders), function(i){
plotlist <- plot_top_abundances_boxAndviolin(physeq = pruned_physeqs[[i]], group_var = group_var, tax_order = tax_orders[[i]], tax_names = row_names_for_heat_maps[[i]])
plotlist[[i]]
})
violin_plots_DES <- lapply(violin_plots_DES, `[[`, 8)
original_head_values
print(xtable(DES_table_list[[1]], align = "|c|c|c|c|c|c|c|c|c|c|", digits = 4), include.rownames = FALSE)
heat_maps_DES[[1]]
violin_plots_DES[[1]]
diff_prevalence <- test_differential_prevalence(physeq = ps_filt_ra, group_var = group_var, p.adj.method = "fdr", minCount = 0L)
suppressWarnings(head_values <- sapply(diff_prevalence, function(df){
max(which(df[, 3] < 0.05))
}))
original_head_values <- data.frame(Comparison = c(names(head_values), "Total"), NoSignificant = c(head_values, ntaxa(ps_filt_ra)),
PC_Significant = 100*c(head_values, ntaxa(ps_filt_ra))/ntaxa(ps_filt_ra))
# Show at least 10 taxa even if less are significant and show max 25 even if far more are significant
head_values[head_values < 10] <- 10
head_values[head_values > 25] <- 25
prev_table_list <- lapply(1:length(diff_prevalence), function(i){
df <- head(diff_prevalence[[i]], head_values[i])
df <- dplyr::select(df, Family:Species, 3:6)
colnames(df)[4:5] <- c("adj_p_val", "signi.")
df
})
names(prev_table_list) <- names(diff_prevalence)
row_names_for_heat_maps <- lapply(prev_table_list, function(df){
the_names <- paste(df$Family, df$Genus, df$Species, df$signi.)
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)}) # in case of ambiguous species assignment keep only first one
tax_orders <- lapply(1:length(diff_prevalence), function(i){
df <- diff_prevalence[[i]]
df$Taxon[1:head_values[i]]
})
pruned_ps_filt_ra <- lapply(1:length(diff_prevalence), function(i){
prune_taxa(tax_orders[[i]], ps_filt_ra)
})
heat_maps_prev <- lapply(1:length(pruned_ps_filt_ra), function(i){
maps <- make_heat_map_physeq_levels(pruned_ps_filt_ra[[i]], group_var = group_var, max_abundance_for_color = .05, tax_order = tax_orders[[i]], tax_names = row_names_for_heat_maps[[i]], color_sample_names = TRUE, gradient_steps = c(0.15, 0.3, 0.45, 1))
maps[[i]]
})
df <- prev_table_list[[2]]
print(xtable(df, align = "|c|c|c|c|c|c|c|c|", digits = 4), include.rownames = FALSE)
heat_maps_prev[[1]]
out_list <- DESeq2Apply_physeq(physeq = ps_filt_extra, group_var = group_var, SFs = SFs, p.adjust.method = "fdr")
DESeq2_result_list <- out_list[[1]]
physeq_DESadjust <- out_list[[2]]
suppressWarnings(head_values <- sapply(DESeq2_result_list, function(df){
max(which(df$p_val_adj < 0.05))
}))
original_head_values <- data.frame(Comparison = c(names(head_values), "Total"), NoSignificant = c(head_values, ntaxa(ps_filt_extra)),
PC_Significant = 100*c(head_values, ntaxa(ps_filt_extra))/ntaxa(ps_filt_extra))
head_values[head_values < 10] <- min(10, ntaxa(ps_filt_extra))
head_values[head_values > 25] <- 25
DES_table_list <- lapply(1:length(DESeq2_result_list), function(i){
df <- head(DESeq2_result_list[[i]], head_values[i])
df <- dplyr::select(df, which(colnames(df) == extra_level), 4:5, 8:9, 13:14, 19:20)
colnames(df)[2:5] <- c("adj_p_val", "signi.", "fisher_p", "fisher_sign")
df
})
names(DES_table_list) <- names(DESeq2_result_list)
# print(xtable(DES_table_list[[1]], align = "|c|c|c|c|c|c|c|c|c|c|", digits = 4), include.rownames = FALSE)
row_names_for_heat_maps <- lapply(DES_table_list, function(df){
the_names <- paste(df[, 1], df$signi., sep = "")
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)}) # in case of ambiguous species assignment keep only first one
tax_orders <- lapply(1:length(DESeq2_result_list), function(i){
df <- DESeq2_result_list[[i]]
df$Taxon[1:head_values[i]]
})
pruned_physeqs <- lapply(1:length(DESeq2_result_list), function(i){
# prune_taxa(tax_orders[[i]], ps_tca_filt_extra)
prune_taxa(tax_orders[[i]], physeq_DESadjust)
})
heat_maps_DES <- lapply(1:length(pruned_physeqs), function(i){
maps <- make_heat_map_physeq_levels(pruned_physeqs[[i]], group_var = group_var, max_abundance_for_color = 2000, tax_order = tax_orders[[i]],
tax_names = row_names_for_heat_maps[[i]], color_sample_names = TRUE, gradient_steps = c(0.15, 0.3, 0.45, 1))
maps[[i]]
})
violin_plots_DES <- lapply(1:length(tax_orders), function(i){
plotlist <- plot_top_abundances_boxAndviolin(physeq = pruned_physeqs[[i]], group_var = group_var, tax_order = tax_orders[[i]], tax_names = row_names_for_heat_maps[[i]])
plotlist[[i]]
})
# there are 8 plots per list, only pick violin plot faceted, and logged abundance:
violin_plots_DES <- lapply(violin_plots_DES, `[[`, 8)
print(xtable(DES_table_list[[1]], align = "|c|c|c|c|c|c|c|c|c|c|", digits = 4), include.rownames = FALSE)
heat_maps_DES[[1]]
wilcox_ra_result_list <- wilcoxTestApply_physeq(physeq = ps_filt_ra_extra, group_var = group_var, excludeZeros = TRUE, p.adjust.method = "fdr")
suppressWarnings(head_values <- sapply(wilcox_ra_result_list, function(df){
max(which(df$p_val_adj < 0.05))
}))
original_head_values <- data.frame(Comparison = c(names(head_values), "Total"), NoSignificant = c(head_values, ntaxa(ps_filt_ra_extra)),
PC_Significant = 100*c(head_values, ntaxa(ps_filt_ra_extra))/ntaxa(ps_filt_ra_extra))
head_values[head_values < 10] <- min(10, ntaxa(ps_filt_ra_extra))
head_values[head_values > 25] <- 25
wilcox_ra_table_list <- lapply(1:length(wilcox_ra_result_list), function(i){
df <- head(wilcox_ra_result_list[[i]], head_values[i])
df <- dplyr::select(df, which(colnames(df) == extra_level), 4:5, 8:9, 13:14, 19:20)
colnames(df)[2:5] <- c("adj_p_val", "signi.", "fisher_p", "fisher_sign")
df
})
names(wilcox_ra_table_list) <- names(wilcox_ra_result_list)
print(xtable(wilcox_ra_table_list[[1]], align = "|c|c|c|c|c|c|c|c|c|c|", digits = 4), include.rownames = FALSE)
row_names_for_heat_maps <- lapply(wilcox_ra_table_list, function(df){
the_names <- paste(df[, 1], df$signi., sep = "")
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)}) # in case of ambiguous species assignment keep only first one
tax_orders <- lapply(1:length(wilcox_ra_result_list), function(i){
df <- wilcox_ra_result_list[[i]]
as.character(df$Taxon[1:head_values[i]])
})
pruned_physeqs <- lapply(1:length(wilcox_ra_result_list), function(i){
prune_taxa(tax_orders[[i]], ps_filt_ra_extra)
})
heat_maps_wilcox <- lapply(1:length(pruned_physeqs), function(i){
maps <- make_heat_map_physeq_levels(pruned_physeqs[[i]], group_var = group_var, max_abundance_for_color = .05, tax_order = tax_orders[[i]],
tax_names = row_names_for_heat_maps[[i]], color_sample_names = TRUE, gradient_steps = c(0.15, 0.3, 0.45, 1))
maps[[i]]
})
violin_plots_wilcox <- lapply(1:length(tax_orders), function(i){
plotlist <- plot_top_abundances_boxAndviolin(physeq = pruned_physeqs[[i]], group_var = group_var, tax_order = tax_orders[[i]], tax_names = row_names_for_heat_maps[[i]])
plotlist[[i]]
})
violin_plots_wilcox <- lapply(violin_plots_wilcox, `[[`, 8)
print(xtable(wilcox_ra_table_list[[1]], align = "|c|c|c|c|c|c|c|c|c|c|c|c|", digits = 4), include.rownames = FALSE)
print(xtable(wilcox_ra_table_list[[1]], align = "|c|c|c|c|c|c|c|c|c|c|", digits = 4), include.rownames = FALSE)
heat_maps_wilcox[[1]]
violin_plots_wilcox[[1]]
TbTmatrixes_list <- calculate_TbTmatrixes(ps_filt_extra, group_var = group_var)
TbTresult_list <- evaluate_TbTmatrixes(TbTmatrixes_list, physeq = ps_filt_extra, group_var = group_var, p.adjust.method = "fdr")
head_values
TbT_table_list <- lapply(1:length(TbTresult_list), function(i){
df <- head(TbTresult_list[[i]], head_values[i])
df <- dplyr::select(df, which(colnames(df) == extra_level), 2:3, 4:5, 10:11, 16:17)
colnames(df)[4:5] <- c("fisher_p", "fisher_sign")
df
})
names(TbT_table_list) <- names(TbTresult_list)
print(xtable(TbT_table_list[[1]], align = "|c|c|c|c|c|c|c|c|c|c|", digits = 4), include.rownames = FALSE)
row_names_for_heat_maps <- lapply(TbT_table_list, function(df){
the_names <- paste(df[, 1], df$signi., sep = "")
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)}) # in case of ambiguous species assignment keep only first one
row_names_for_heat_maps
df <- TbT_table_list[[1]]
df
paste(df[, 1], df$signi., sep = "")
df$signi.
row_names_for_heat_maps <- lapply(TbT_table_list, function(df){
the_names <- paste(df[, 1], df$signi., sep = "")
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)}) # in case of ambiguous species assignment keep only first one
tax_orders <- lapply(1:length(TbTresult_list), function(i){
df <- TbTresult_list[[i]]
as.character(df$Taxon[1:head_values[i]])
})
pruned_physeqs <- lapply(1:length(TbTresult_list), function(i){
prune_taxa(tax_orders[[i]], ps_filt_ra_extra)
})
heat_maps_tbt <- lapply(1:length(pruned_physeqs), function(i){
maps <- make_heat_map_physeq_levels(pruned_physeqs[[i]], group_var = group_var, max_abundance_for_color = .05, tax_order = tax_orders[[i]],
tax_names = row_names_for_heat_maps[[i]], color_sample_names = TRUE, gradient_steps = c(0.15, 0.3, 0.45, 1))
maps[[i]]
})
violin_plots_tbt <- lapply(1:length(tax_orders), function(i){
plotlist <- plot_top_abundances_boxAndviolin(physeq = pruned_physeqs[[i]], group_var = group_var, tax_order = tax_orders[[i]], tax_names = row_names_for_heat_maps[[i]])
plotlist[[i]]
})
violin_plots_tbt <- lapply(violin_plots_tbt, `[[`, 8)
print(xtable(TbT_table_list[[1]], align = "|c|c|c|c|c|c|c|c|c|c|c|c|", digits = 4), include.rownames = FALSE)
heat_maps_tbt[[1]]
violin_plots_tbt[[1]]
extra_level = "Phylum"
ps_tca_filt_extra <- tax_glom(ps_tca_filt, taxrank = extra_level, NArm = FALSE)
ps_filt_extra <- tax_glom(ps_filt, taxrank = extra_level, NArm = FALSE)
ps_filt_ra_extra <- transform_sample_counts(ps_filt_extra, function(x){x/sum(x)}) # same for ps_tca_filt
overview <- get_overview_of_physeq(ps_tca_filt_extra)
Tr <- make_heat_map_physeq(ps_filt_ra_extra, group_var, max_abundance_for_color = .1, tax_order = NULL,
tax_names = NULL, color_sample_names = TRUE, gradient_steps = c(0.25, 0.5, 0.75, 1))
Tr
Tr <- make_heat_map_physeq(ps_filt_ra_extra, group_var, max_abundance_for_color = .3, tax_order = NULL,
tax_names = NULL, color_sample_names = TRUE, gradient_steps = c(0.25, 0.5, 0.75, 1))
Tr
diff_prevalence <- test_differential_prevalence(physeq = ps_filt_ra_extra, group_var = group_var, p.adj.method = "fdr", minCount = 0L)
suppressWarnings(head_values <- sapply(diff_prevalence, function(df){
max(which(df[, 3] < 0.05))
}))
head_values
original_head_values <- data.frame(Comparison = c(names(head_values), "Total"), NoSignificant = c(head_values, ntaxa(ps_filt_ra_extra)),
PC_Significant = 100*c(head_values, ntaxa(ps_filt_ra_extra))/ntaxa(ps_filt_ra_extra))
original_head_values
head_values[head_values < 10] <- min(10, ntaxa(ps_filt_ra_extra))
head_values[head_values > 25] <- 25
head_values
prev_table_list <- lapply(1:length(diff_prevalence), function(i){
df <- head(diff_prevalence[[i]], head_values[i])
df <- dplyr::select(df, which(colnames(df) == extra_level), 3:6)
colnames(df)[2:3] <- c("adj_p_val", "signi.")
df
})
names(prev_table_list) <- names(diff_prevalence)
row_names_for_heat_maps <- lapply(prev_table_list, function(df){
the_names <- paste(df[, 1], df$signi., sep = "")
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)})
tax_orders <- lapply(1:length(diff_prevalence), function(i){
df <- diff_prevalence[[i]]
df$Taxon[1:head_values[i]]
})
diff_prevalence <- test_differential_prevalence(physeq = ps_filt_ra_extra, group_var = group_var, p.adj.method = "fdr", minCount = 0L)
suppressWarnings(head_values <- sapply(diff_prevalence, function(df){
max(which(df[, 3] < 0.05))
}))
original_head_values <- data.frame(Comparison = c(names(head_values), "Total"), NoSignificant = c(head_values, ntaxa(ps_filt_ra_extra)),
PC_Significant = 100*c(head_values, ntaxa(ps_filt_ra_extra))/ntaxa(ps_filt_ra_extra))
# Show at least 10 taxa even if less are significant and show max 25 even if far more are significant
head_values[head_values < 10] <- min(10, ntaxa(ps_filt_ra_extra))
head_values[head_values > 25] <- 25
prev_table_list <- lapply(1:length(diff_prevalence), function(i){
df <- head(diff_prevalence[[i]], head_values[i])
df <- dplyr::select(df, which(colnames(df) == extra_level), 3:6)
colnames(df)[2:3] <- c("adj_p_val", "signi.")
df
})
names(prev_table_list) <- names(diff_prevalence)
row_names_for_heat_maps <- lapply(prev_table_list, function(df){
the_names <- paste(df[, 1], df$signi., sep = "")
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)})
tax_orders <- lapply(1:length(diff_prevalence), function(i){
df <- diff_prevalence[[i]]
df$Taxon[1:head_values[i]]
})
pruned_ps_filt_ra <- lapply(1:length(diff_prevalence), function(i){
prune_taxa(tax_orders[[i]], ps_filt_ra_extra)
})
heat_maps_prev <- lapply(1:length(pruned_ps_filt_ra), function(i){
maps <- make_heat_map_physeq_levels(pruned_ps_filt_ra[[i]], group_var = group_var, max_abundance_for_color = .05, tax_order = tax_orders[[i]], tax_names = row_names_for_heat_maps[[i]], color_sample_names = TRUE, gradient_steps = c(0.15, 0.3, 0.45, 1))
maps[[i]]
})
knitr::kable(original_head_values, row.names = FALSE)
i
print(knitr::kable(prev_table_list[[i]], caption = names(prev_table_list)[i]))
heat_maps_prev[[1]]
out_list <- DESeq2Apply_physeq(physeq = ps_filt_extra, group_var = group_var, SFs = SFs, p.adjust.method = "fdr")
DESeq2_result_list <- out_list[[1]]
physeq_DESadjust <- out_list[[2]]
suppressWarnings(head_values <- sapply(DESeq2_result_list, function(df){
max(which(df$p_val_adj < 0.05))
}))
original_head_values <- data.frame(Comparison = c(names(head_values), "Total"), NoSignificant = c(head_values, ntaxa(ps_filt_extra)),
PC_Significant = 100*c(head_values, ntaxa(ps_filt_extra))/ntaxa(ps_filt_extra))
head_values[head_values < 10] <- min(10, ntaxa(ps_filt_extra))
head_values[head_values > 25] <- 25
head_values
DES_table_list <- lapply(1:length(DESeq2_result_list), function(i){
df <- head(DESeq2_result_list[[i]], head_values[i])
df <- dplyr::select(df, which(colnames(df) == extra_level), 4:5, 8:9, 13:14, 19:20)
colnames(df)[2:5] <- c("adj_p_val", "signi.", "fisher_p", "fisher_sign")
df
})
names(DES_table_list) <- names(DESeq2_result_list)
print(xtable(DES_table_list[[1]], align = "|c|c|c|c|c|c|c|c|c|c|", digits = 4), include.rownames = FALSE)
row_names_for_heat_maps <- lapply(DES_table_list, function(df){
the_names <- paste(df[, 1], df$signi., sep = "")
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)}) # in case of ambiguous species assignment keep only first one
tax_orders <- lapply(1:length(DESeq2_result_list), function(i){
df <- DESeq2_result_list[[i]]
df$Taxon[1:head_values[i]]
})
pruned_physeqs <- lapply(1:length(DESeq2_result_list), function(i){
# prune_taxa(tax_orders[[i]], ps_tca_filt_extra)
prune_taxa(tax_orders[[i]], physeq_DESadjust)
})
heat_maps_DES <- lapply(1:length(pruned_physeqs), function(i){
maps <- make_heat_map_physeq_levels(pruned_physeqs[[i]], group_var = group_var, max_abundance_for_color = 2000, tax_order = tax_orders[[i]],
tax_names = row_names_for_heat_maps[[i]], color_sample_names = TRUE, gradient_steps = c(0.15, 0.3, 0.45, 1))
maps[[i]]
})
violin_plots_DES <- lapply(1:length(tax_orders), function(i){
plotlist <- plot_top_abundances_boxAndviolin(physeq = pruned_physeqs[[i]], group_var = group_var, tax_order = tax_orders[[i]], tax_names = row_names_for_heat_maps[[i]])
plotlist[[i]]
})
violin_plots_DES <- lapply(violin_plots_DES, `[[`, 8)
knitr::kable(original_head_values, row.names = FALSE)
print(knitr::kable(DES_table_list[[i]], caption = names(DES_table_list)[i]))
print(xtable(DES_table_list[[1]], align = "|c|c|c|c|c|c|c|c|c|c|", digits = 4), include.rownames = FALSE)
heat_maps_DES[[1]]
violin_plots_DES[[1]]
wilcox_ra_result_list <- wilcoxTestApply_physeq(physeq = ps_filt_ra_extra, group_var = group_var, excludeZeros = TRUE, p.adjust.method = "fdr")
suppressWarnings(head_values <- sapply(wilcox_ra_result_list, function(df){
max(which(df$p_val_adj < 0.05))
}))
original_head_values <- data.frame(Comparison = c(names(head_values), "Total"), NoSignificant = c(head_values, ntaxa(ps_filt_ra_extra)),
PC_Significant = 100*c(head_values, ntaxa(ps_filt_ra_extra))/ntaxa(ps_filt_ra_extra))
head_values[head_values < 10] <- min(10, ntaxa(ps_filt_ra_extra))
head_values[head_values > 25] <- 25
wilcox_ra_table_list <- lapply(1:length(wilcox_ra_result_list), function(i){
df <- head(wilcox_ra_result_list[[i]], head_values[i])
df <- dplyr::select(df, which(colnames(df) == extra_level), 4:5, 8:9, 13:14, 19:20)
colnames(df)[2:5] <- c("adj_p_val", "signi.", "fisher_p", "fisher_sign")
df
})
names(wilcox_ra_table_list) <- names(wilcox_ra_result_list)
row_names_for_heat_maps <- lapply(wilcox_ra_table_list, function(df){
the_names <- paste(df[, 1], df$signi., sep = "")
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)}) # in case of ambiguous species assignment keep only first one
tax_orders <- lapply(1:length(wilcox_ra_result_list), function(i){
df <- wilcox_ra_result_list[[i]]
as.character(df$Taxon[1:head_values[i]])
})
pruned_physeqs <- lapply(1:length(wilcox_ra_result_list), function(i){
prune_taxa(tax_orders[[i]], ps_filt_ra_extra)
})
heat_maps_wilcox <- lapply(1:length(pruned_physeqs), function(i){
maps <- make_heat_map_physeq_levels(pruned_physeqs[[i]], group_var = group_var, max_abundance_for_color = .05, tax_order = tax_orders[[i]],
tax_names = row_names_for_heat_maps[[i]], color_sample_names = TRUE, gradient_steps = c(0.15, 0.3, 0.45, 1))
maps[[i]]
})
violin_plots_wilcox <- lapply(1:length(tax_orders), function(i){
plotlist <- plot_top_abundances_boxAndviolin(physeq = pruned_physeqs[[i]], group_var = group_var, tax_order = tax_orders[[i]], tax_names = row_names_for_heat_maps[[i]])
plotlist[[i]]
})
violin_plots_wilcox <- lapply(violin_plots_wilcox, `[[`, 8)
heat_maps_wilcox <- lapply(1:length(pruned_physeqs), function(i){
maps <- make_heat_map_physeq_levels(pruned_physeqs[[i]], group_var = group_var, max_abundance_for_color = .3, tax_order = tax_orders[[i]],
tax_names = row_names_for_heat_maps[[i]], color_sample_names = TRUE, gradient_steps = c(0.15, 0.3, 0.45, 1))
maps[[i]]
})
violin_plots_wilcox <- lapply(1:length(tax_orders), function(i){
plotlist <- plot_top_abundances_boxAndviolin(physeq = pruned_physeqs[[i]], group_var = group_var, tax_order = tax_orders[[i]], tax_names = row_names_for_heat_maps[[i]])
plotlist[[i]]
})
violin_plots_wilcox <- lapply(violin_plots_wilcox, `[[`, 8)
knitr::kable(original_head_values, row.names = FALSE)
for (i in 1:length(wilcox_ra_table_list)){
print(knitr::kable(wilcox_ra_table_list[[i]], caption = names(wilcox_ra_table_list)[i]))
}
heat_maps_wilcox[[1]]
violin_plots_wilcox[[1]]
TbTmatrixes_list <- calculate_TbTmatrixes(ps_filt_extra, group_var = group_var)
TbTresult_list <- evaluate_TbTmatrixes(TbTmatrixes_list, physeq = ps_filt_extra, group_var = group_var, p.adjust.method = "fdr")
TbT_table_list <- lapply(1:length(TbTresult_list), function(i){
df <- head(TbTresult_list[[i]], head_values[i])
df <- dplyr::select(df, which(colnames(df) == extra_level), 2:3, 4:5, 10:11, 16:17)
colnames(df)[4:5] <- c("fisher_p", "fisher_sign")
df
})
names(TbT_table_list) <- names(TbTresult_list)
row_names_for_heat_maps <- lapply(TbT_table_list, function(df){
the_names <- paste(df[, 1], df$signi., sep = "")
the_name <- sapply(strsplit(the_names, split = "/"), `[`, 1)}) # in case of ambiguous species assignment keep only first one
tax_orders <- lapply(1:length(TbTresult_list), function(i){
df <- TbTresult_list[[i]]
as.character(df$Taxon[1:head_values[i]])
})
pruned_physeqs <- lapply(1:length(TbTresult_list), function(i){
prune_taxa(tax_orders[[i]], ps_filt_ra_extra)
})
heat_maps_tbt <- lapply(1:length(pruned_physeqs), function(i){
maps <- make_heat_map_physeq_levels(pruned_physeqs[[i]], group_var = group_var, max_abundance_for_color = .3, tax_order = tax_orders[[i]],
tax_names = row_names_for_heat_maps[[i]], color_sample_names = TRUE, gradient_steps = c(0.15, 0.3, 0.45, 1))
maps[[i]]
})
violin_plots_tbt <- lapply(1:length(tax_orders), function(i){
plotlist <- plot_top_abundances_boxAndviolin(physeq = pruned_physeqs[[i]], group_var = group_var, tax_order = tax_orders[[i]], tax_names = row_names_for_heat_maps[[i]])
plotlist[[i]]
})
violin_plots_tbt <- lapply(violin_plots_tbt, `[[`, 8)
heat_maps_tbt[[1]]
violin_plots_tbt[[1]]
ps_filt_ra_extra
plot_bar
physeq <- ps_filt_ra_extra
physeq
mdf = psmelt(physeq)
View(mdf)
x = "Sample"
y = "Abundance"
fill = extra_level
fill
Tr = ggplot(mdf, aes_string(x = x, y = y, fill = fill))
Tr <- ggplot(mdf, aes_string(x = x, y = y, fill = fill))
Tr +
geom_bar(stat = "identity", position = "stack")
