View(AlphaDiv)
colnames(AphaDiv)["Observed"]
colnames(AlphaDiv)["Observed"]
colnames(AlphaDiv)[colnames(AlphaDiv) == "Observed"] <- "Richness"
View(ReadSummary)
View(AlphaDiv)
physeq = ps
measures
measures = NULL
AlphaDiv <- estimate_richness(physeq, measures = measures)
measures = colnames(AlphaDiv)
ses = colnames(AlphaDiv)[grep("^se\\.", colnames(AlphaDiv))]
measures = measures[!measures %in% ses]
measures
source(file.path(functionpath, "Dada_PlotFunctions.R"))
TrList <- plotAlphaDiversity(ps, x = "samples", measures = c("Observed", "Shannon", "Chao1"), color = "Above50")
TrList[[1]]
TrListBP <- plotAlphaDiversity(ps, x = "Above50", color = "Above50", group = "Above50", measures = c("Observed", "Shannon", "Chao1"))
TrListBP[[1]]
TrListLm <- plotAlphaDivVsSeqDepth(physeq, measures = c("Observed", "Shannon", "Chao1"))
TrListLm[[1]]
rm(list = ls())
data("GlobalPatterns")
GP = GlobalPatterns
GP
GP = prune_taxa(taxa_sums(GlobalPatterns) > 0, GlobalPatterns)
GP
SD <- sample_data(GP)
View(SD)
get_variable(GP, "SampleType")
humantypes = c("Feces", "Mock", "Skin", "Tongue")
sample_data(GP)$human <- get_variable(GP, "SampleType") %in% humantypes
SD <- sample_data(GP)
View(SD)
mergedGP = merge_samples(GP, "SampleType")
mergedGP
SD = merge_samples(sample_data(GP), "SampleType")
View(SD)
SD1 <- sample_data(mergedGP)
identical(SD, SD1)
print(SD[, "SampleType"])
View(SD)
SD1 <- sample_data(mergedGP)
SD1 <- sample_data(GP)
View(SD1)
sample_names(GP)
sample_names(mergedGP)
OTUnames10 = names(sort(taxa_sums(GP), decreasing = TRUE)[1:10])
GP10  = prune_taxa(OTUnames10,  GP)
mGP10 = prune_taxa(OTUnames10, mergedGP)
sample_data(GP)
subset(sample_data(GP), SampleType=="Ocean")
class(subset(sample_data(GP), SampleType=="Ocean"))
?subset
ocean_samples = sample_names(subset(sample_data(GP), SampleType=="Ocean"))
ocean_samples
samples_are_rows(GP10)
taxa_are_rows(GP10)
otu_table(GP10)[, ocean_samples]
otu_table(mGP10)[, ocean_samples]
otu_table(mGP10)[, "ocean"]
rowSums(otu_table(GP10)[, ocean_samples])
taxa_are_rows(mGP10)
taxa_are_rows(GP)
taxa_are_rows(mergedGP)
otu_table(mGP10)["Ocean", ]
plot_richness(GP, x = "human", color = "SampleType", title="unmerged")
sample_names(mergedGP)
SD <- sample_data(GP)
SD1 <- sample_data(mergedGP)
View(SD)
View(SD1)
View(SD1)
identical(sample_data(mergedGP)$SampleType, sample_names(mergedGP))
sample_names(mergedGP)
sample_data(mergedGP)$SampleType
View(SD1)
sample_data(mergedGP)$SampleType = sample_names(mergedGP)
sample_data(mergedGP)$human = sample_names(mergedGP) %in% humantypes
plot_richness(mergedGP, "human", "SampleType", title="merged")
load("example-data.RData")
data("closedps")
plot_tree(closedps, color="Treatment", size="abundance", sizebase=2, label.tips="taxa_names")
get_taxa(GP\)
get_taxa(GP)
taxa_names(GP)
GP
rank_names(GP)
?merge_taxa
rank_names(GP)
rm(list = ls())
data("GlobalPatterns")
GP = GlobalPatterns
sample_variables(GP)
GPr  = transform_sample_counts(GlobalPatterns, function(x) x / sum(x) )
GPfr = filter_taxa(GPr, function(x) mean(x) > 1e-5, TRUE)
GPr
GPfr
GP.chl = subset_taxa(GlobalPatterns, Phylum=="Chlamydiae")
GP.chl
GP.chl = subset_taxa(GP, Phylum=="Chlamydiae")
GP.chl
GP.chl = prune_samples(sample_sums(GP.chl)>=20, GP.chl)
sample_sums(GP.chl)
?tax_glom
gpsfbg = tax_glom(gpsfb, "Family")
gpsfbg = tax_glom(GP, "Family")
unique(tax_table["Phylum"])
unique(tax_table(GP)[, "Phylum"])
unique(tax_table(GP)[, "Phylum"]) == "Bacteroides"
unique(tax_table(GP)[, "Phylum"])
unique(tax_table(GP)[, "Phylum"]) == "Bacteroidetes"
gpsfbg = subset_taxa(GP, Phylum == "Bacteroidetes")
gpsfbg
gpsfb = subset_taxa(GP, Phylum == "Bacteroidetes")
gpsfbg = tax_glom(gpsfb, "Family")
gpsfbg
gpsfb = subset_taxa(GP, Phylum == "Bacteroidetes")
unique(tax_table(gpsfb)[, "Phylum"])
tax_table(gpsfb)
GP
gpsfb = subset_taxa(GP, Phylum == "Bacteroidetes")
gpsfb
unique(tax_table(gpsfb)[, "Phylum"])
otu_table(gpsfb)[1:5, 1:5]
taxa_are_rows(GP)
taxa_are_rows(gpsfb)
rownames(otu_table(gpsfb))
otu_table(GP)[rownames(otu_table(gpsfb)), 1:5]
identical(otu_table(gpsfb), otu_table(GP)[rownames(otu_table(gpsfb)),])
unique(tax_table(gpsfb)[, "Family"])
length(unique(tax_table(gpsfb)[, "Family"]))
gpsfbg = tax_glom(gpsfb, "Family")
ntaxa(gpsfbg)
taxa_names(gpsfbg)
unique(tax_table(gpsfbg)[, "Family"])
?intersect()
setdiff(unique(tax_table(gpsfbg)[, "Family"]), unique(tax_table(gpsfb)[, "Family"]))
unique(tax_table(gpsfb)[, "Family"])
unique(tax_table(gpsfbg)[, "Family"])
intersect(unique(tax_table(gpsfbg)[, "Family"]), unique(tax_table(gpsfb)[, "Family"]))
setdiff(unique(tax_table(gpsfbg)[, "Family"]), unique(tax_table(gpsfb)[, "Family"]))
setdiff(names(unique(tax_table(gpsfbg)[, "Family"])), names(unique(tax_table(gpsfb)[, "Family"])))
names(unique(tax_table(gpsfbg)[, "Family"]))
rownames(unique(tax_table(gpsfbg)[, "Family"]))
setdiff(rownames(unique(tax_table(gpsfbg)[, "Family"])), rownames(unique(tax_table(gpsfb)[, "Family"])))
unique(tax_table(gpsfbg)[, "Family"])
unique(tax_table(gpsfb)[, "Family"])
intersect(unique(tax_table(gpsfbg)[, "Family"]), unique(tax_table(gpsfb)[, "Family"]))
setdiff(unique(tax_table(gpsfbg)[, "Family"]), unique(tax_table(gpsfb)[, "Family"]))
unique(tax_table(gpsfb)[, "Family"])
Uniquegpsfbg <- unique(tax_table(gpsfb)[, "Family"])
Uniquegpsfbg
class(Uniquegpsfbg)
gpsfbg
taxa_names(gpsfbg)
taxa_names(gpsfb)
taxa_names(gpsfbg) %in% taxa_names(gpsfb)
setdiff(rownames(unique(tax_table(gpsfbg)[, "Family"])), rownames(unique(tax_table(gpsfb)[, "Family"])))
OT <- otu_table(gpsfb)
dim(OT)
rownames(OT)
TT <- taxa_table(gpsfb)
gpsfb
TT <- tax_table(gpsfb)
dim(TT)
class(OT)
OT <- as.data.frame(otu_table(gpsfb))
TT <- as.data.frame(tax_table(gpsfb))
class(TT)
names(TT
)
OT$Family <- TT$Family
unique(OT$Family)
OT <- group_by(OT, Family)
OT
OTf <- summarise_each(OT, funs(sum))
OTf
View(OTf)
OTff <- as.data.frame(otu_table(gpsfbg))
View(OTff)
View(OTf)
tax_table(gpsfbg)
rownames(OTff)
tax_table(gpsfbg)$Family
get_taxa(gpsfbg, "Family")
tax_table(gpsfbg$Family)
tax_table(gpsfbg)
tax_table(gpsfbg)[, 4]
tax_table(gpsfbg)[, 5]
OTff$Family <- as.data.frame(tax_table(gpsfbg))$Family
View(OTff)
OTf <- arrange(OTf, Family)
OTff <- arrange(OTff, Family)
View(OTf)
View(OTff)
View(OTf)
View(OTff)
View(OTff)
View(OTf)
OTf[-16, -Family]
OTf[-16, -"Family"]
names(OTf)
names(OTff)
OTff <- select(OTff, Family)
OTff <- as.data.frame(otu_table(gpsfbg))
OTff$Family <- as.data.frame(tax_table(gpsfbg))$Family
OTf <- arrange(OTf, Family)
OTff <- arrange(OTff, Family)
OTff <- select(OTff, Family, 1:26)
identical(OTf[-16, ], OTff)
View(OTf)
View(OTff)
View(OTf)
View(OTff)
View(OTf)
all.equal(OTf[-16, ], OTff)
transform_sample_counts(GP.chl, function(OTU) OTU/sum(OTU))
GP
GPf = filter_taxa(GlobalPatterns, function(x) sum(x > 3) > (0.2*length(x)), TRUE)
GPf
GP = filter_taxa(GlobalPatterns, function(x) sum(x > 3) > (0.2*length(x)), TRUE) # keeps only taxa that have in at least 20% of samples more than 3 reads
sample_data(GP)$human = factor( get_variable(GP, "SampleType") %in% c("Feces", "Mock", "Skin", "Tongue") )
total = median(sample_sums(GP))
sample_sums(GP)
total
standf = function(x, t=total) round(t * (x / sum(x)))
gps = transform_sample_counts(GP, standf)
sample_sums(gps)
range(sample_sums(gps))
gps
GP
?filter_taxa
sample_sums(gps)
gm <- function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
GP
taxa_are_rows(GP)
apply(otu_table(GP), 1, gm)
apply(otu_table(GP), 2, gm)
apply(otu_table(GP), 1, gm)
class(apply(otu_table(GP), 1, gm))
x <- 1:10
gm(x)
x*gm(x)
x/gm(x)
prod(x/gm(x))
otu_table(GP)/GM
if(taxa_are_rows(GP)){
GM <- apply(otu_table(GP), 1, gm)
} else {
GM <- apply(otu_table(GP), 1, gm)
}
GM
otu_table(GP)/GM
apply(otu_table(GP)/GM, 1, prod)
?prod()
?prod
apply(otu_table(GP)/GM, 1, prod, na.rm = FALSE)
apply(otu_table(GP)/GM, 1, prod, na.rm = TRUE)
min(otu_table(GP)/GM)
apply((otu_table(GP)/GM)[otu_table(GP)/GM != 0], 1, prod, na.rm = TRUE)
OT <- otu_table(GP)
OT[OT == 0] <- 1
OT <- otu_table(GP)/GM
OT[OT == 0] <- 1
apply(OT, 1, prod, na.rm = TRUE)
GM
OT <- as.data.frame(otu_table(GP))
View(OT)
?sweep
OT <- sweep(OT, 1, GM, "/")
View(OT)
OT <- as.data.frame(otu_table(GP))
View(OT)
head(GM)
72/3.29
OT <- sweep(OT, 1, GM, "/")
OT == 0
OT[OT == 0] <- 1
View(OT)
apply(OT, 1, prod)
prod(OT[1,])
View(OT)
OT[1,]
prod(OT[1,])
prod(OT[1,][1:10])
prod(OT[1,][1:11])
prod(OT[1,][1:20])
OT <- as.data.frame(otu_table(GP))
OT[1,]
gm(OT[1,])
GM[1]
Test <- OT[1,][OT[1,]!= 0]
Test
gm(Test)
gm_mean = function(x, na.rm=TRUE, zero.propagate = FALSE){
if(any(x < 0, na.rm = TRUE)){
return(NaN)
}
if(zero.propagate){
if(any(x == 0, na.rm = TRUE)){
return(0)
}
exp(mean(log(x), na.rm = na.rm))
} else {
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
}
gm(Test)
gm_mean(Test)
gm_mean(OT1[,])
gm_mean(OT1[1,])
gm_mean(OT[1,])
gm_mean(OT[1,], zero.propagate = TRUE)
gm = function(x, na.rm=TRUE, zero.propagate = FALSE){
if(any(x < 0, na.rm = TRUE)){
return(NaN)
}
if(zero.propagate){
if(any(x == 0, na.rm = TRUE)){
return(0)
}
exp(mean(log(x), na.rm = na.rm))
} else {
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
}
x <- 1:10
prod(x/gm(x))
if(taxa_are_rows(GP)){
GM <- apply(otu_table(GP), 1, gm)
} else {
GM <- apply(otu_table(GP), 1, gm)
}
GM
taxa_are_rows(GP)
Test <- sweep(otu_table(GP), 1, GM, "/")
dim(Test)
SF <- apply(sweep(otu_table(GP), 1, GM, "/"), 2, median)
SF
colSums(otu_table(GP)==0)
colSums(otu_table(GP)==0)/ntaxa(GP)
colSums(otu_table(GP)==0)/ntaxa(GP)
total = median(sample_sums(GP))
total
?transform_sample_counts
sample_sums(otu_table(GP)==0)/ntaxa(GP)
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
library(DESeq2)
GPDE <- GP
if(taxa_are_rows(GPDE)){
otu_table(GPDE) <- sweep(otu_table(GPDE), 2, SF, "*")
} else {
otu_table(GPDE) <- sweep(otu_table(GPDE), 1, SF, "*")
}
otu_table(sweep(otu_table(GPDE), 2, SF, "*"))
otu_table(sweep(otu_table(GPDE), 2, SF, "*"), taxa_are_rows = TRUE)
otu_table(GPDE)
GPDE <- GP
otu_table(GPDE)
GPDE
if(taxa_are_rows(GPDE)){
otu_table(GPDE) <- otu_table(sweep(otu_table(GPDE), 2, SF, "*"), taxa_are_rows = TRUE)
} else {
otu_table(GPDE) <- otu_table(sweep(otu_table(GPDE), 1, SF, "*"), taxa_are_rows = FALSE)
}
otu_table(GPDE)
GP
variable.names(GP)
sample_variables(GP)
GPDES = phyloseq_to_deseq2(physeq, ~ human)
GPDES = phyloseq_to_deseq2(GP, ~ human)
GM
gm = function(x, na.rm=TRUE, zero.propagate = FALSE){
if(any(x < 0, na.rm = TRUE)){
return(NaN)
}
if(zero.propagate){
if(any(x == 0, na.rm = TRUE)){
return(0)
}
exp(mean(log(x), na.rm = na.rm))
} else {
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
}
apply(counts(GPDES), 1, gm)
SIZE <- estimateSizeFactors(GPDES, geoMeans = GM)
SIZE
OTU <- t(counts(SIZE, normalized = TRUE))
dim(OTU)
OTU <- counts(SIZE, normalized = TRUE)
dim(OTU)
View(OTU)
head(rownames(OTU))
head(taxa_names(GPDE))
OTUBefore <- counts(GPDES)
View(OTUBefore)
View(OTU)
class(OTU)
sizeFactors(SIZE)
SF
?median
if(taxa_are_rows(GP)){
SF <- apply(sweep(otu_table(GP), 1, GM, "/"), 2, median)
} else {
SF <- apply(sweep(otu_table(GP), 2, GM, "/"), 1, median)
}
SF
SFDES <- sizeFactors(SIZE)
SFDES
Test <- sweep(otu_table(GP), 1, GM, "/")
class(Test)
apply(Test[Test != 0], 2, median)
if(taxa_are_rows(GP)){
SF <- apply(sweep(otu_table(GP), 1, GM, "/"), 2, function(x){median(x[x>0]))
} else {
SF <- apply(sweep(otu_table(GP), 2, GM, "/"), 1, function(x){median(x[x>0]))
}
if(taxa_are_rows(GP)){
SF <- apply(sweep(otu_table(GP), 1, GM, "/"), 2, function(x){median(x[x>0])})
} else {
SF <- apply(sweep(otu_table(GP), 2, GM, "/"), 1, function(x){median(x[x>0])})
}
SF
SFDES
all.equal(SF, SFDES)
if(taxa_are_rows(GP)){
SF <- apply(sweep(otu_table(GP), 1, GM, "/"), 2, function(x){median(x[x!=0])})
} else {
SF <- apply(sweep(otu_table(GP), 2, GM, "/"), 1, function(x){median(x[x!=0])})
}
SF
cbind(SF, SFDES)
SF/SFDES
GPDE <- GP
if(taxa_are_rows(GPDE)){
otu_table(GPDE) <- otu_table(sweep(otu_table(GPDE), 2, SF, "*"), taxa_are_rows = TRUE)
} else {
otu_table(GPDE) <- otu_table(sweep(otu_table(GPDE), 1, SF, "*"), taxa_are_rows = FALSE)
}
GPDES = phyloseq_to_deseq2(GP, ~ human)
OTUBefore <- counts(GPDES)
#GM <- apply(counts(GPDES), 1, gm)
SIZE <- estimateSizeFactors(GPDES, geoMeans = GM)
SFDES <- sizeFactors(SIZE)
# NOT SURE WHY SF is sometimes minimally bigger than SFDES
SF/SFDES
OTU <- counts(SIZE, normalized = TRUE)
GPDE
OTUSelf <- as.matrix(otu_table(GPDE))
View(OTU)
class(OTUSelf)
OTUSelf <- otu_table(GPDE, "matrix")
class(OTUSelf)
OTUSelf <- as.data.frame(otu_table(GPDE))
View(OTUSelf)
View(OTU)
View(OTUSelf)
SF
SFDES
GPDE <- GP
OTUBefS <- as.data.frame(otu_table(GPDE))
View(OTUBefS)
View(OTUBefore)
otu_table(GPDE)*SF
?sweep
otu_table(GPDE)*SF -> Test
Test <- as.data.frame(Test)
View(Test)
GM
GPDE <- GP
View(OTUBefore)
Test <- sweep(OTUBefore, 2, SFDES, "*")
View(Test)
View(OTU)
View(OTUBefore)
View(OTU)
SFDES
Test <- sweep(OTUBefore, 2, SFDES, "/")
View(Test)
GPDE <- GP
if(taxa_are_rows(GPDE)){
otu_table(GPDE) <- otu_table(sweep(otu_table(GPDE), 2, SF, "/"), taxa_are_rows = TRUE)
} else {
otu_table(GPDE) <- otu_table(sweep(otu_table(GPDE), 1, SF, "/"), taxa_are_rows = FALSE)
}
OTU <- as.data.frame(counts(SIZE, normalized = TRUE))
OTUSelf <- as.data.frame(otu_table(GPDE))
View(OTUBefS)
View(OTU)
View(OTUSelf)
all.equal(OTU, OTUSelf)
sample_sums(GPDE)
range(sample_sums(GPDE))
GPDES <- phyloseq(otu_table(OTU, taxa_are_rows = TRUE),
tax_table(GP),
sample_data(GP))
sample_sums(GPDES)
sample_sums(GPDES)
all.equal(sample_sums(GPDE), sample_sums(GPDES))
sample_sums(GP)
sort(sample_sums(GP))
sort(sample_sums(GPDE))
otu_table(gps)
gpsf = filter_taxa(gps, function(x) sd(x)/mean(x) > 3.0, prune = TRUE)
gpsf
GPDESf <- filter_taxa(GPDES, function(x) sd(x)/mean(x) > 3.0, prune = TRUE)
GPDESf
