list(1, 2, 3),
list("one", "two", "three"),
list("uno", "dos", "tres")
), paste)
reduce(c(1, 3, 5, 7), function(x, y){
message("x is ", x)
message("y is ", y)
message("")
x + y
})
# so reduce can be used to add all numbers in a vector
reduce(1:100, function(x, y){x + y})
100*99/2
101*100/2
# In contrast the reduce_right()function starts with the last element of a vector and then proceeds to the second to last element of a vector and so on:
reduce_right(letters[1:4], function(x, y){
message("x is ", x)
message("y is ", y)
message("")
paste0(x, y)
})
contains(letters, "a")
library(purrr)
?contains
purrr::contains
install.packages("purrr")
install.packages("purrr")
library(purrr)
?contains
has_element(letters, "a")
has_element(letters, "A")
A %in% letters
"A" %in% letters
detect(20:40, function(x){
x > 22 && x %% 2 == 0
})
# well:
which (20:40 > 22 && %% 2 == 0)
# well:
which (20:40 > 22 && 20:40 %% 2 == 0)
# well:
which (c(20:40) > 22 && c(20:40) %% 2 == 0)
# well:
x <- 20:40
x
x %% 2 == 0
which (x > 22 && x %% 2 == 0)
which (x > 22 & x %% 2 == 0)
which (x > 22 & x %% 2 == 0)[1]
detect_index(20:40, function(x){
x > 22 && x %% 2 == 0
})
keep(1:20, function(x){
x %% 2 == 0
})
discard(1:20, function(x){
x %% 2 == 0
})
every(1:20, function(x){
x %% 2 == 0
})
some(1:20, function(x){
x %% 2 == 0
})
n_unique <- compose(length, unique)
rep(1:5, 1:5)
n_unique(rep(1:5, 1:5))
mult_three_n <- function(x, y, z){
x * y * z
}
mult_by_15 <- partial(mult_three_n, x = 3, y = 5)
mult_by_15(z = 4)
walk(c("Friends, Romans, countrymen,",
"lend me your ears;",
"I come to bury Caesar,",
"not to praise him."), message)
vector_sum_rec <- function(v){
if(length(v) == 1){
v
} else {
v[1] + vector_sum_rec(v[-1])
}
}
vector_sum_rec(c(5, 40, 91))
0:100
fibonacci_seq <- function(v){
if(length(v) == 2){
v[1] + v[2]
} else {
c(v[1] + v[2], fibonacci_seq(v[-1]))
}
}
fibonacci_seq(0:10)
fib <- function(n){
stopifnot(n > 0)
if(n == 1){
0
} else if(n == 2){
1
} else {
fib(n - 1) + fib(n - 2)
}
}
fib(0)
fib(1)
fib(2)
fib(3)
fib(1:12)
fib_tbl <- c(0, 1, rep(NA, 23))
fib_tbl
fib_mem <- function(n){
stopifnot(n > 0)
if(!is.na(fib_tbl[n])){
fib_tbl[n]
} else {
fib_tbl[n - 1] <<- fib_mem(n - 1)
fib_tbl[n - 2] <<- fib_mem(n - 2)
fib_tbl[n - 1] + fib_tbl[n - 2]
}
}
map_dbl(1:12, fib_mem)
library(microbenchmark)
library(magrittr)
fib_data <- map(1:10, function(x){microbenchmark(fib(x), times = 100)$time})
fib_data
names(fib_data) <- paste0(letters[1:10], 1:10)
fib_data
fib_data <- as.data.frame(fib_data)
View(fib_data)
fib_data %<>%
gather(num, time) %>%
group_by(num) %>%
summarise(med_time = median(time))
fib_data %<>%
tidyr::gather(num, time) %>%
group_by(num) %>%
summarise(med_time = median(time))
library(tidyr)
library(dplyr)
fib_data %<>%
tidyr::gather(num, time) %>%
group_by(num) %>%
summarise(med_time = median(time))
fib_data
memo_data <- map(1:10, function(x){microbenchmark(fib_mem(x))$time})
names(memo_data) <- paste0(letters[1:10], 1:10)
memo_data <- as.data.frame(memo_data)
memo_data %<>%
gather(num, time) %>%
group_by(num) %>%
summarise(med_time = median(time))
memo_daata
memo_data
plot(1:10, fib_data$med_time, xlab = "Fibonacci Number", ylab = "Median Time (Nanoseconds)",
pch = 18, bty = "n", xaxt = "n", yaxt = "n")
axis(1, at = 1:10)
axis(2, at = seq(0, 350000, by = 50000))
points(1:10 + .1, memo_data$med_time, col = "blue", pch = 18)
legend(1, 300000, c("Not Memorized", "Memoized"), pch = 18,
col = c("black", "blue"), bty = "n", cex = 1, y.intersp = 1.5)
two_plus_two <- quote(2 + 2)
two_plus_two
class(two_plus_two)
eval(two_plus_two)
tpt_string <- "2 + 2"
tpt_expression <- parse(text = tpt_string)
eval(tpt_expression)
deparse(two_plus_two)
sum_expr <- quote(sum(1, 5))
eval(sum_expr)
sum_expr[[1]]
sum_expr[[1]]
sum_expr[[2]]
sum_expr[[3]]
sum_expr[[1]] <- quote(paste0)
sum_expr[[2]] <- quote(4)
sum_expr[[3]] <- quote(6)
eval(sum_expr)
# the call function
sum_40_50_expr <- call("sum", 40, 50)
sum_40_50_expr
sum(40, 50)
eval(sum_40_50_expr)
return_expression <- function(...){
match.call()
}
return_expression(2, col = "blue", FALSE)
return_expression(2, col = "blue", FALSE)
my_new_env <- new.env()
my_new_env$x <- 4
my_new_env$x
assign("y", 9, envir = my_new_env)
get("y", envir = my_new_env)
library(shiny); runApp('Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Calendar/app_Calendar.R')
library(phyloseq); # packageVersion("phyloseq")
library(ggplot2); # packageVersion("ggplot2")
library(dplyr); # packageVersion("dplyr")
library(tidyr); # packageVersion("tidyr")
library(gridExtra);
# source("https://bioconductor.org/biocLite.R")
# biocLite("Biostrings")
library(Biostrings)
functionpath <- "/Users/jvb740/MarieCurie_Work/NormalizationProjectNastya/Functions/"
source(file.path(functionpath, "Functions_qPCRDesign.R"))
functionpath <- "/Users/jvb740/MarieCurie_Work/NormalizationProjectNastya/Functions/"
source(file.path(functionpath, "Functions_qPCRDesign.R"))
# - read in the fasta file using Biostrings -
datapath <- "/Users/jvb740/MarieCurie_Work/NormalizationProjectNastya/DF_physeq/"
fastaFile <- readDNAStringSet(filepath = file.path(datapath, "rdp_species_assignment_16.fa"), format = "fasta")
length(fastaFile) # 234111 sequences
rdp_DF <- readRDS(file = file.path(datapath, "rdp_species_NameDF.rds"))
# NB: you could add the sequences
# rdp_DF <- cbind(rdp_DF, Sequence = fastaFile)
# --
# - define all possible primer sequences encompassed by -
# = get all primer combis covered by our primer =
# for primer combis see: IUPAC_CODE_MAP
# Primer515F <- DNAString("GTGCCAGCMGCCGCGGTAA")
Primer515F_A <- "GTGCCAGCAGCCGCGGTAA"
Primer515F_C <- "GTGCCAGCCGCCGCGGTAA"
# Primer806R <- DNAString("GGACTACHVGGGTWTCTAAT")
Primer806R_C_A_A <- "GGACTACCAGGGTATCTAAT"
Primer806R_A_A_A <- "GGACTACAAGGGTATCTAAT"
Primer806R_T_A_A <- "GGACTACTAGGGTATCTAAT"
Primer806R_C_C_A <- "GGACTACCCGGGTATCTAAT"
Primer806R_A_C_A <- "GGACTACACGGGTATCTAAT"
Primer806R_T_C_A <- "GGACTACTCGGGTATCTAAT"
Primer806R_C_G_A <- "GGACTACCGGGGTATCTAAT"
Primer806R_A_G_A <- "GGACTACAGGGGTATCTAAT"
Primer806R_T_G_A <- "GGACTACTGGGGTATCTAAT"
Primer806R_C_A_T <- "GGACTACCAGGGTTTCTAAT"
Primer806R_A_A_T <- "GGACTACAAGGGTTTCTAAT"
Primer806R_T_A_T <- "GGACTACTAGGGTTTCTAAT"
Primer806R_C_C_T <- "GGACTACCCGGGTTTCTAAT"
Primer806R_A_C_T <- "GGACTACACGGGTTTCTAAT"
Primer806R_T_C_T <- "GGACTACTCGGGTTTCTAAT"
Primer806R_C_G_T <- "GGACTACCGGGGTTTCTAAT"
Primer806R_A_G_T <- "GGACTACAGGGGTTTCTAAT"
Primer806R_T_G_T <- "GGACTACTGGGGTTTCTAAT"
ForwardPrimer <- c(Primer515F_A = Primer515F_A, Primer515F_C = Primer515F_C)
ReversePrimer <- c(Primer806R_C_A_A = Primer806R_C_A_A, Primer806R_A_A_A = Primer806R_A_A_A, Primer806R_T_A_A = Primer806R_T_A_A,
Primer806R_C_C_A = Primer806R_C_C_A, Primer806R_A_C_A = Primer806R_A_C_A, Primer806R_T_C_A = Primer806R_T_C_A,
Primer806R_C_G_A = Primer806R_C_G_A, Primer806R_A_G_A = Primer806R_A_G_A, Primer806R_T_G_A = Primer806R_T_G_A,
Primer806R_C_A_T = Primer806R_C_A_T, Primer806R_A_A_T = Primer806R_A_A_T, Primer806R_T_A_T = Primer806R_T_A_T,
Primer806R_C_C_T = Primer806R_C_C_T, Primer806R_A_C_T = Primer806R_A_C_T, Primer806R_T_C_T = Primer806R_T_C_T,
Primer806R_C_G_T = Primer806R_C_G_T, Primer806R_A_G_T = Primer806R_A_G_T, Primer806R_T_G_T = Primer806R_T_G_T)
# - find relevant sequences for selected species and remove duplicates and sequences < 1200 bp -
saveGenus <- "Alistipes"
selectedSpecies <- c("Alistipes putredinis", "Alistipes finegoldii", "Alistipes onderdonkii", "Alistipes shahii", "Alistipes obesi")
RL <- find_sequences_of_given_species(selected_species = selectedSpecies, rdp_DF = rdp_DF, fastaFile = fastaFile)
rdp_DF_selectedSpecies <- RL[[1]]
fastaFile_selectedSpecies <- RL[[2]]
View(rdp_DF_selectedSpecies)
paste(fastaFile_selectedSpecies[1])
fastaFile_selectedSpecies[2]
paste(fastaFile_selectedSpecies[2])
# - find relevant sequences for selected species and remove duplicates and sequences < 1200 bp -
saveGenus <- "Prevotella"
selectedSpecies <- c("Prevotella copri", "Prevotella corporis", "Prevotella buccalis",
"Prevotella xylaniphila")
RL <- find_sequences_of_given_species(selected_species = selectedSpecies, rdp_DF = rdp_DF, fastaFile = fastaFile)
rdp_DF_selectedSpecies <- RL[[1]]
fastaFile_selectedSpecies <- RL[[2]]
View(rdp_DF_selectedSpecies)
paste(fastaFile_selectedSpecies[1])
paste(fastaFile_selectedSpecies[2])
# - get the V4 amplicons and primer -
ResultList <- collect_V4_amplicons(DNA_string_set = fastaFile_selectedSpecies, Fprimer = ForwardPrimer, Rprimer = ReversePrimer)
fastaFile_selectedSpecies_Amplicons <- ResultList[[1]]
usedPrimer <- ResultList[[2]]
# only keep successful Amplicons
successfulAmplicons <- !width(fastaFile_selectedSpecies_Amplicons) >= 1200
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
# - make a save rdp_DF -
NameList <- strsplit(names(fastaFile_selectedSpecies_Amplicons), split = " ")
rdp_ids <- lapply(NameList, `[`, 1) %>% unlist()
rdp_species <- lapply(NameList, function(listi){listi[2:length(listi)]})
rdp_species <- sapply(rdp_species, function(charvec){paste(charvec, collapse = " ")}) # takes surprisingly long
rdp_DF_Amplicons <- data.frame(ID = rdp_ids, Species = rdp_species)
rdp_DF_Amplicons[] <- lapply(rdp_DF_Amplicons, as.character)
rdp_DF_Amplicons$Width <- width(fastaFile_selectedSpecies_Amplicons)
rdp_DF_Amplicons <- cbind(rdp_DF_Amplicons, Sequence = fastaFile_selectedSpecies_Amplicons)
View(rdp_DF_Amplicons)
paste(fastaFile_selectedSpecies[4])
paste(fastaFile_selectedSpecies[3])
View(rdp_DF_selectedSpecies)
# - find relevant sequences for selected species and remove duplicates and sequences < 1200 bp -
saveGenus <- "Escherichia"
paste(fastaFile_selectedSpecies[3])
selectedSpecies <- c("Escherichia coli", "Escherichia fergusonii", "Escherichia flexneri")
RL <- find_sequences_of_given_species(selected_species = selectedSpecies, rdp_DF = rdp_DF, fastaFile = fastaFile)
rdp_DF_selectedSpecies <- RL[[1]]
fastaFile_selectedSpecies <- RL[[2]]
View(rdp_DF_selectedSpecies)
fastaFile_selectedSpecies[2]
paste(fastaFile_selectedSpecies[2])
length(fastaFile_selectedSpecies)
# - get the V4 amplicons and primer -
ResultList <- collect_V4_amplicons(DNA_string_set = fastaFile_selectedSpecies, Fprimer = ForwardPrimer, Rprimer = ReversePrimer)
fastaFile_selectedSpecies_Amplicons <- ResultList[[1]]
usedPrimer <- ResultList[[2]]
View(usedPrimer)
# only keep successful Amplicons
successfulAmplicons <- !width(fastaFile_selectedSpecies_Amplicons) >= 1200
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
View(usedPrimer)
fastaFile_selectedSpecies_Amplicons[1]
fastaFile_selectedSpecies_Amplicons[1] %in% c("A", "C", "T", "G")
# - find relevant sequences for selected species and remove duplicates and sequences < 1200 bp -
saveGenus <- "Escherichia"
selectedSpecies <- c("Escherichia coli", "Escherichia fergusonii", "Escherichia flexneri")
RL <- find_sequences_of_given_species(selected_species = selectedSpecies, rdp_DF = rdp_DF, fastaFile = fastaFile)
rdp_DF_selectedSpecies <- RL[[1]]
fastaFile_selectedSpecies <- RL[[2]]]
fastaFile_selectedSpecies <- RL[[2]]
# - get the V4 amplicons and primer -
ResultList <- collect_V4_amplicons(DNA_string_set = fastaFile_selectedSpecies, Fprimer = ForwardPrimer, Rprimer = ReversePrimer)
fastaFile_selectedSpecies_Amplicons <- ResultList[[1]]
usedPrimer <- ResultList[[2]]
# only keep successful Amplicons
successfulAmplicons <- !width(fastaFile_selectedSpecies_Amplicons) >= 1200
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
grepl("N", paste(fastaFile_selectedSpecies_Amplicons[1]))
grepl("N", paste(fastaFile_selectedSpecies_Amplicons[2]))
grepl("N", paste(fastaFile_selectedSpecies_Amplicons[3]))
grepl("N", paste(fastaFile_selectedSpecies_Amplicons[4]))
?grepl
selectedSpecies <- c("Escherichia coli")
RL <- find_sequences_of_given_species(selected_species = selectedSpecies, rdp_DF = rdp_DF, fastaFile = fastaFile)
rdp_DF_selectedSpecies <- RL[[1]]
fastaFile_selectedSpecies <- RL[[2]]
# - get the V4 amplicons and primer -
ResultList <- collect_V4_amplicons(DNA_string_set = fastaFile_selectedSpecies, Fprimer = ForwardPrimer, Rprimer = ReversePrimer)
fastaFile_selectedSpecies_Amplicons <- ResultList[[1]]
usedPrimer <- ResultList[[2]]
# only keep successful Amplicons
successfulAmplicons <- !width(fastaFile_selectedSpecies_Amplicons) >= 1200
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
for (i in 1:100) {}
for (i in 1:100){
print(grepl("N", paste(fastaFile_selectedSpecies_Amplicons[i])))
}
grepl("N", fastaFile_selectedSpecies_Amplicons)
# - because there are so many kick out more -
# the ones that contain "N"
successfulAmplicons <- !grepl("N", fastaFile_selectedSpecies_Amplicons)
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
IUPAC_CODE_MAP
successfulAmplicons <- !grepl("W", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons
successfulAmplicons <- !grepl("W", fastaFile_selectedSpecies_Amplicons)
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
successfulAmplicons <- !grepl("V", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
IUPAC_CODE_MAP
successfulAmplicons <- !grepl("M", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("R", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons
successfulAmplicons <- !grepl("R", fastaFile_selectedSpecies_Amplicons)
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
IUPAC_CODE_MAP
successfulAmplicons <- !grepl("W", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("S", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("Y", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("Y", fastaFile_selectedSpecies_Amplicons)
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
IUPAC_CODE_MAP
successfulAmplicons <- !grepl("K", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("V", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("H", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("D", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("B", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("N", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
width(fastaFile_selectedSpecies_Amplicons)
# since still so many I only keep those with length = 292
successfulAmplicons <- width(fastaFile_selectedSpecies_Amplicons) == 292
successfulAmplicons
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
# - make a save rdp_DF -
NameList <- strsplit(names(fastaFile_selectedSpecies_Amplicons), split = " ")
rdp_ids <- lapply(NameList, `[`, 1) %>% unlist()
rdp_species <- lapply(NameList, function(listi){listi[2:length(listi)]})
rdp_species <- sapply(rdp_species, function(charvec){paste(charvec, collapse = " ")}) # takes surprisingly long
rdp_DF_Amplicons <- data.frame(ID = rdp_ids, Species = rdp_species)
rdp_DF_Amplicons[] <- lapply(rdp_DF_Amplicons, as.character)
rdp_DF_Amplicons$Width <- width(fastaFile_selectedSpecies_Amplicons)
rdp_DF_Amplicons <- cbind(rdp_DF_Amplicons, Sequence = fastaFile_selectedSpecies_Amplicons)
View(rdp_DF_selectedSpecies)
saveRDS(object = list(rdp_DF_Amplicons = rdp_DF_Amplicons, usedPrimer = usedPrimer), file = file.path(datapath,paste(saveGenus, "_DF_primer.rds", sep = "")))
writeXStringSet(fastaFile_selectedSpecies_Amplicons, filepath = file.path(datapath, paste(saveGenus, "_Amplicons.fa", sep = "")))
View(rdp_DF_Amplicons)
rdp_DF_Amplicons$Sequence[1]
fastaFile_selectedSpecies[1]
paste(fastaFile_selectedSpecies[1])
IUPAC_CODE_MAP
View(usedPrimer)
rm(list = ls())
rm(list = ls())
setwd("~/MarieCurie_Work/BackgroundKnowledge/16S_Learning/Dada_Pipel")
# ATTENTION: change pathToFunctions here if necessary#
pathToFunctions <- "/Users/jvb740/MarieCurie_Work/BackgroundKnowledge/16S_Learning/Dada_Pipel/Functions"
source(file.path(pathToFunctions, "Dada_PlotFunctions.R"))
source(file.path(pathToFunctions, "Dada_WrapFunctions.R"))
## dada2:
# source("https://bioconductor.org/biocLite.R")
try(library(dada2), biocLite("dada2"))
## Short Read
try(library(ShortRead), biocLite("ShortRead"))
## ggplot2
try(library(ggplot2), install.packages("ggplot2"))
## dplyr
try(library(dplyr), install.packages("dplyr"))
## dplyr
try(library(tidyr), install.packages("tidyr"))
pathToFunctions <- "/Users/jvb740/MarieCurie_Work/BackgroundKnowledge/16S_Learning/Dada_Pipel/Functions"
#pathToFunctions <- "/home/jvb740/Dada_Pipel"
source(file.path(pathToFunctions, "Dada_PlotFunctions.R"))
source(file.path(pathToFunctions, "Dada_WrapFunctions.R"))
# ----
# ---- Call the wrap function (Adjust INPUTS) ----
Dada2_QualityCheck(path = "MarieCurie_Work/NormalizationProjectNastya/Results/16S_Sequencing_Pre/Clean_Data/", #"/Users/jvb740/MarieCurie_Work/BackgroundKnowledge/16S_Learning/DanFunD",
F_pattern = "1.fq.gz",
R_pattern = "2.fq.gz",
path2 = "MarieCurie_Work/NormalizationProjectNastya/Results/16S_Sequencing_Pre/Dada_Analysis")
# ----
path = "MarieCurie_Work/NormalizationProjectNastya/Results/16S_Sequencing_Pre/Clean_Data/"
folders <- list.dirs(path, recursive = FALSE, full.names = FALSE)
folders
path = "/Users/jvb740/MarieCurie_Work/NormalizationProjectNastya/Results/16S_Sequencing_Pre/Clean_Data"
folders <- list.dirs(path, recursive = FALSE, full.names = FALSE)
folders
rm(list = ls())
source('~/MarieCurie_Work/BackgroundKnowledge/16S_Learning/Dada_Pipel/Dada_QualityCheck.R', echo=TRUE)
rm(list = ls())
source('~/MarieCurie_Work/BackgroundKnowledge/16S_Learning/Dada_Pipel/DadaWrapper.R', echo=TRUE)
rm(list = ls())
# source seqtab data and function
datapath <- "/Users/jvb740/MarieCurie_Work/NormalizationProjectNastya/Results/16S_Sequencing_Pre/"
load(file.path(datapath, "Dada_Data/DenoisedData.RData"))
# source seqtab data and function
datapath <- "/Users/jvb740/MarieCurie_Work/NormalizationProjectNastya/Results/16S_Sequencing_Pre/"
exists(file.path(datapath, "Dada_Data/DenoisedData.RData"))
# source seqtab data and function
datapath <- "/Users/jvb740/MarieCurie_Work/NormalizationProjectNastya/Results/16S_Sequencing_Pre/Dada_Analysis"
load(file.path(datapath, "Dada_Data/DenoisedData.RData"))
functpath <- "/Users/jvb740/MarieCurie_Work/BackgroundKnowledge/16S_Learning/Dada_Pipel/Functions"
source(file.path(functpath, "Dada_TaxonomyFunctions.R"))
if(!exists("seqtab.nochim")){
stop("no seqtab.nochim has been loaded")
}
assignTaxonomyaddSpecies(seqtab = seqtab.nochim,
minBoot = 50,
allowMultiple = TRUE,
PathToRefs = "/Users/jvb740/MarieCurie_Work/BackgroundKnowledge/16S_Learning/AssignTaxonomy",
RefDataBase = "silva_nr_v128_train_set.fa.gz",
SpeciesDB = "silva_species_assignment_v128.fa.gz",
PathToSave = "/Users/jvb740/MarieCurie_Work/NormalizationProjectNastya/Results/16S_Sequencing_Pre/Dada_Analysis/Dada_Taxonomy/Silva_v128",
tryRC = FALSE)
rm(list = ls())
PathToSave = "/Users/jvb740/MarieCurie_Work/NormalizationProjectNastya/Results/16S_Sequencing_Pre/Dada_Analysis/Dada_Taxonomy/Silva_v128"
exists(PathToSave)
rm(list =ls())
source('~/MarieCurie_Work/BackgroundKnowledge/16S_Learning/Dada_Pipel/Dada_WrapperAssignTaxonomyAddSpecies.R', echo=TRUE)
rm(list = ls())
# source seqtab data and function
datapath <- "/Users/jvb740/MarieCurie_Work/NormalizationProjectNastya/Results/16S_Sequencing_Pre/Dada_Analysis"
load(file.path(datapath, "Dada_Data/DenoisedData.RData"))
functpath <- "/Users/jvb740/MarieCurie_Work/BackgroundKnowledge/16S_Learning/Dada_Pipel/Functions"
source(file.path(functpath, "Dada_TaxonomyFunctions.R"))
if(!exists("seqtab.nochim")){
stop("no seqtab.nochim has been loaded")
}
assignTaxonomyaddSpecies(seqtab = seqtab.nochim,
minBoot = 50,
allowMultiple = TRUE,
PathToRefs = "/Users/jvb740/MarieCurie_Work/BackgroundKnowledge/16S_Learning/AssignTaxonomy",
RefDataBase = "silva_nr_v128_train_set.fa.gz",
SpeciesDB = "silva_species_assignment_v128.fa.gz",
PathToSave = "/Users/jvb740/MarieCurie_Work/NormalizationProjectNastya/Results/16S_Sequencing_Pre/Dada_Analysis/Dada_Taxonomy/Silva_v128/",
tryRC = FALSE)
rm(list = ls())
# source seqtab data and function
datapath <- "/Users/jvb740/MarieCurie_Work/NormalizationProjectNastya/Results/16S_Sequencing_Pre/Dada_Analysis"
load(file.path(datapath, "Dada_Data/DenoisedData.RData"))
functpath <- "/Users/jvb740/MarieCurie_Work/BackgroundKnowledge/16S_Learning/Dada_Pipel/Functions"
source(file.path(functpath, "Dada_TaxonomyFunctions.R"))
if(!exists("seqtab.nochim")){
stop("no seqtab.nochim has been loaded")
}
construct_phylogenetic_tree(seqtab.nochim = seqtab.nochim,
savepath = "/Users/jvb740/MarieCurie_Work/NormalizationProjectNastya/Results/16S_Sequencing_Pre/Dada_Analysis/Dada_phylogenetic_tree/")
