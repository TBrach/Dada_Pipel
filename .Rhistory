p.adjust.method = p.method)
class(result) <- "pairwise.htest"
return(result)
}
"dist" %in% class(dist_obj)
if (!("dist" %in% class(dist_obj)){
stop("dist_obj must be of class dist")
}
if (!("dist" %in% class(dist_obj)){
stop("dist_obj must be of class dist")
}
}
call <- match.call()
dname <- paste0(deparse(call$resp), " by ", deparse(substitute(fact)),
"\\n", nperm, " permutations")
fact <- factor(fact)
if ("dist" %in% class(resp)) {
fun.p <- function(i, j) {
fact2 <- droplevels(fact[as.numeric(fact) %in% c(i,
j)])
resp2 <- as.matrix(resp)
rows <- which(fact %in% levels(fact2))
resp2 <- as.dist(resp2[rows, rows])
vegan::adonis(resp2 ~ fact2, permutations = nperm)$aov.tab[1,
"Pr(>F)"]
}
multcomp <- pairwise.table(fun.p, levels(fact), p.adjust.method = p.method)
method <- "permutation MANOVAs on a distance matrix"
}
else {
if (nrow(resp) != length(fact)) {
stop(paste("'", deparse(substitute(resp)), "' and '",
deparse(substitute(fact)), "' lengths differ",
sep = ""))
}
test <- match.arg(test)
if (!is.matrix(resp)) {
resp <- as.matrix(resp)
}
if (!is.factor(fact)) {
fact <- factor(fact)
}
fun.p <- function(i, j) {
resp2 <- resp[as.numeric(fact) %in% c(i, j), ]
fact2 <- droplevels(fact[as.numeric(fact) %in% c(i,
j)])
perm.manova(resp2, fact2, test = test, nperm = nperm,
progress)
}
multcomp <- pairwise.table(fun.p, levels(fact), p.adjust.method = p.method)
method <- paste0("permutation MANOVAs (test: ", test,
")")
}
result <- list(method = method, data.name = dname, p.value = multcomp,
p.adjust.method = p.method)
class(result) <- "pairwise.htest"
return(result)
}
if (!("dist" %in% class(dist_obj))){
stop("dist_obj must be of class dist")
}
group_fac <- samdf$Group
group_fac
is.factor(group_fac)
factor(group_fac)
group_fac <- factor(group_fac)
group_fac
dim(dist_obj)
?pairwise.table
pairwise.table
?setNames
level.names <- levels(group_fac)
level.names
ix <- setNames(seq_along(level.names), level.names)
ix
?outer
pairwise.perm.manova
ix[-1L]
ix[-length(ix)]
fit1
as.numeric(group_fac)
group_fac
?droplevels
dist_obj_mat <- as.matrix(dist_obj)
View(dist_obj_mat)
i = 1
j = 2
group_fac2 <- droplevels(group_fac[as.numeric(group_fac) %in% c(i,
j)])
group_fac2
rows <- which(group_fac %in% levels(group_fac2))
rows
group_fac
dist_obj2 <- as.dist(dist_obj_mat[rows, rows])
nperm
nperm = 999
vegan::adonis(dist_obj2 ~ group_fact2, permutations = nperm)
vegan::adonis(dist_obj2 ~ group_fac2, permutations = nperm)
vegan::adonis(dist_obj2 ~ group_fac2, permutations = nperm)$aov.tab[1,
c("R2", "Pr(>F)")]
R2plusP <- vegan::adonis(dist_obj2 ~ group_fac2, permutations = nperm)$aov.tab[1,
c("R2", "Pr(>F)")]
R2plusP
class(R2plusP)
as.vector(R2plusP)
level.names
ix <- setNames(seq_along(level.names), level.names)
ix
pairwise.table
level.names
ix
outer(ix[-1], ix[-length(ix)])
pairwise.perm.manova(dist_list[[1]], fact = samdf$Group, nperm = 999, progress = TRUE, p.method = "none")
ix
outer(ix, ix)
dist_obj
group_fac
fac_levels <- levels(group_fac)
fac_levels
setNames(seq_along(fac_levels), fac_levels)
fac_levels_num <- setNames(seq_along(fac_levels), fac_levels) # see pairwise.table
outer(fac_levels_num)
outer(fac_levels_num, fac_levels_num)
outer(fac_levels_num, fac_levels_num, function(ivec, jvec){
sapply(seq_along(ivec) function(x){
i <- ivec[x]
j <- jvec[x]
c(i, j)
})
})
pairwise.table
outer(fac_levels_num, fac_levels_num, function(ivec, jvec)
sapply(seq_along(ivec) function(x){
i <- ivec[x]
j <- jvec[x]
c(i, j)
})
)
outer(fac_levels_num, fac_levels_num, function(ivec, jvec)
sapply(seq_along(ivec) function(x){
i <- ivec[x]
j <- jvec[x]
i
})
)
outer(fac_levels_num, fac_levels_num, function(ivec, jvec)
sapply(seq_along(ivec), function(x){
i <- ivec[x]
j <- jvec[x]
i
})
)
outer(fac_levels_num, fac_levels_num, function(ivec, jvec)
sapply(seq_along(ivec), function(x){
i <- ivec[x]
j <- jvec[x]
c(i, j)
})
)
outer(fac_levels_num, fac_levels_num, function(ivec, jvec)
sapply(seq_along(ivec), function(x){
i <- ivec[x]
j <- jvec[x]
as.numeric(paste(i, j, sep = ""))
})
)
indexes <- outer(fac_levels_num, fac_levels_num, function(ivec, jvec)
sapply(seq_along(ivec), function(x){
i <- ivec[x]
j <- jvec[x]
as.numeric(paste(i, j, sep = ""))
})
)
indexes
indexes[upper.tri(indexes)]
class(indexes)
upper.tri(indexes)
indexes
indexes <- outer(fac_levels_num, fac_levels_num, function(ivec, jvec){
sapply(seq_along(ivec), function(x){
i <- ivec[x]
j <- jvec[x]
as.numeric(paste(i, j, sep = ""))
})
})
indexes
strsplit(as.character(11))
strsplit(as.character(11), split = "")
i_s <- outer(fac_levels_num, fac_levels_num, function(ivec, jvec){
sapply(seq_along(ivec), function(x){
i <- ivec[x]
})
})
i_s
j_s <- outer(fac_levels_num, fac_levels_num, function(ivec, jvec){
sapply(seq_along(ivec), function(x){
j <- jvec[x]
})
})
j_s
colnames(upper.tri(j_s))
i_s <- i_s[upper.tri(i_s)]
i_s
j_s <- j_s[upper.tri(j_s)]
j_s
fac_levels_num
?adonis
fac_levels_num[i_s]
names(fac_levels_num[i_s])
group_fac
group_fac <- factor(group_fac)
fac_levels <- levels(group_fac)
fac_levels_num <- setNames(seq_along(fac_levels), fac_levels) # see pairwise.table
i_s <- outer(fac_levels_num, fac_levels_num, function(ivec, jvec){
sapply(seq_along(ivec), function(x){
i <- ivec[x]
})
})
j_s <- outer(fac_levels_num, fac_levels_num, function(ivec, jvec){
sapply(seq_along(ivec), function(x){
j <- jvec[x]
})
})
i_s <- i_s[upper.tri(i_s)]
j_s <- j_s[upper.tri(j_s)]
group_fac
i_s
p_vals <- vector(mode = "numeric", length = length(i_s))
r2s <- vector(mode = "numeric", length = length(i_s))
k = 1
i <- i_s[k]
j <- j_s[k]
i
j
as.numeric(group_fac)
group_fac2 <- droplevels(group_fac[as.numeric(group_fac) %in% c(i, j)])
group_fac2
dist_obj_mat <- as.matrix(dist_obj)
group_fac %in% levels(group_fac2)
levels(group_fac2)
rows <- which(group_fac %in% levels(group_fac2))
dist_obj2 <- as.dist(dist_obj_mat[rows, rows])
dist_obj2
nperm
fit <- vegan::adonis(dist_obj2 ~ group_fac2, permutations = nperm)
fit
fit$aov.tab[1, "Pr(>F)"]
p_vals <- vector(mode = "numeric", length = length(i_s))
r2s <- vector(mode = "numeric", length = length(i_s))
for (k in seq_along(i_s)){
i <- i_s[k]
j <- j_s[k]
group_fac2 <- droplevels(group_fac[as.numeric(group_fac) %in% c(i, j)])
dist_obj_mat <- as.matrix(dist_obj)
rows <- which(group_fac %in% levels(group_fac2))
dist_obj2 <- as.dist(dist_obj_mat[rows, rows])
fit <- vegan::adonis(dist_obj2 ~ group_fac2, permutations = nperm)
p_vals[k] <- fit$aov.tab[1, "Pr(>F)"]
r2s[k] <- fit$aov.tab[1, "R2"]
}
pvals
p_vals
r2s
result_df <- data.frame(Comparison = paste0(names(fac_levels_num[i_s]), names(fac_levels_num[j_s]), sep = "_vs_"),
addonis_p_value = p_vals, adonis_R2 = r2s)
View(result_df)
result_df <- data.frame(Comparison = paste0(names(fac_levels_num[i_s]), "_vs_", names(fac_levels_num[j_s]), sep = ""),
addonis_p_value = p_vals, adonis_R2 = r2s)
View(result_df)
p_vals
p.adjust(p_vals, "fdr")
p.adjust(p_vals, "none")
pairwise.perm.manova()
?pairwise.perm.manova
?adonis
pairwise.perm.manova.own <- function(dist_obj, group_fac, nperm = 999,
p.adj.method = "none") {
if (!("dist" %in% class(dist_obj))){
stop("dist_obj must be of class dist")
}
group_fac <- factor(group_fac)
fac_levels <- levels(group_fac)
fac_levels_num <- setNames(seq_along(fac_levels), fac_levels) # see pairwise.table
i_s <- outer(fac_levels_num, fac_levels_num, function(ivec, jvec){
sapply(seq_along(ivec), function(x){
i <- ivec[x]
})
})
j_s <- outer(fac_levels_num, fac_levels_num, function(ivec, jvec){
sapply(seq_along(ivec), function(x){
j <- jvec[x]
})
})
i_s <- i_s[upper.tri(i_s)]
j_s <- j_s[upper.tri(j_s)]
p_vals <- vector(mode = "numeric", length = length(i_s))
r2s <- vector(mode = "numeric", length = length(i_s))
for (k in seq_along(i_s)){
i <- i_s[k]
j <- j_s[k]
group_fac2 <- droplevels(group_fac[as.numeric(group_fac) %in% c(i, j)])
dist_obj_mat <- as.matrix(dist_obj)
rows <- which(group_fac %in% levels(group_fac2))
dist_obj2 <- as.dist(dist_obj_mat[rows, rows])
fit <- vegan::adonis(dist_obj2 ~ group_fac2, permutations = nperm)
p_vals[k] <- fit$aov.tab[1, "Pr(>F)"]
r2s[k] <- fit$aov.tab[1, "R2"]
}
result_df <- data.frame(Comparison = paste0(names(fac_levels_num[i_s]), "_vs_", names(fac_levels_num[j_s]), sep = ""),
addonis_p_value = p_vals, adonis_R2 = r2s, p_val_adj = p.adjust(p_vals, p.adj.method))
}
dist_list <- calc_distances(ps_filt_ra, dist_methods) # produces objects of class "dist"
group_var
group_fac <- sample_data(physeq)[[group_var]]
class(group_fac)
length(levels(group_fac)) > 2
Overalls <- lapply(dist_list, function(dist_obj){
fit <- vegan::adonis(dist_obj ~ group_fac, permutations = 999)
data.frame(Comparison = "Overall",
addonis_p_value = fit$aov.tab[1, "Pr(>F)"],
adonis_R2 = fit$aov.tab[1, "R2"],
p_val_adj = fit$aov.tab[1, "Pr(>F)"])
})
Overalls[[1]]
names(Overalls)
Groupwise <- lapply(dist_list, function(dist_obj){
pairwise.perm.manova.own(dist_obj = dist_obj,
group_fac = group_fac,
nperm = 999,
p.adj.method = "fdr")
})
Groupwise[[1]]
i
rbind(Overalls[[i]], Groupwise[[i]])
adonis_list <- lapply(1:length(Groupwise), function(i){
rbind(Overalls[[i]], Groupwise[[i]])
})
names(adonis_list)
names(adonis_list) <- names(Overalls)
names(adonis_list)
adonis_list <- lapply(dist_list, function(dist_obj){
fit <- vegan::adonis(dist_obj ~ group_fac, permutations = 999)
data.frame(Comparison = "Overall",
addonis_p_value = fit$aov.tab[1, "Pr(>F)"],
adonis_R2 = fit$aov.tab[1, "R2"],
p_val_adj = fit$aov.tab[1, "Pr(>F)"])
})
adonis_list[[1]]
group_fac <- sample_data(physeq)[[group_var]]
if (length(levels(group_fac)) > 2){
Overalls <- lapply(dist_list, function(dist_obj){
fit <- vegan::adonis(dist_obj ~ group_fac, permutations = 999)
data.frame(Comparison = "Overall_group_var",
addonis_p_value = fit$aov.tab[1, "Pr(>F)"],
adonis_R2 = fit$aov.tab[1, "R2"],
p_val_adj = fit$aov.tab[1, "Pr(>F)"])
})
Groupwise <- lapply(dist_list, function(dist_obj){
pairwise.perm.manova.own(dist_obj = dist_obj,
group_fac = group_fac,
nperm = 999,
p.adj.method = "fdr")
})
adonis_list <- lapply(1:length(Groupwise), function(i){
rbind(Overalls[[i]], Groupwise[[i]])
})
names(adonis_list) <- names(Overalls)
} else {
adonis_list <- lapply(dist_list, function(dist_obj){
fit <- vegan::adonis(dist_obj ~ group_fac, permutations = 999)
data.frame(Comparison = "Overall_group_var",
addonis_p_value = fit$aov.tab[1, "Pr(>F)"],
adonis_R2 = fit$aov.tab[1, "R2"],
p_val_adj = fit$aov.tab[1, "Pr(>F)"])
})
}
adonis_list[[2]]
adonis_list[[1]]
dist_list <- calc_distances(ps_filt_ra, dist_methods) # produces objects of class "dist"
dist_list2 <- calc_distances(ps_taa_filt, dist_methods)
dist_analysis_list <- distance_t_analyse(dist_list = dist_list, physeq = ps_filt_ra, group_var = group_var)
dist_analysis_list2 <- distance_t_analyse(dist_list = dist_list2, physeq = ps_taa_filt, group_var = group_var)
group_fac <- sample_data(ps_filt_ra)[[group_var]]
if (length(levels(group_fac)) > 2){
Overalls <- lapply(dist_list, function(dist_obj){
fit <- vegan::adonis(dist_obj ~ group_fac, permutations = 999)
data.frame(Comparison = "Overall_group_var",
addonis_p_value = fit$aov.tab[1, "Pr(>F)"],
adonis_R2 = fit$aov.tab[1, "R2"],
p_val_adj = fit$aov.tab[1, "Pr(>F)"])
})
Groupwise <- lapply(dist_list, function(dist_obj){
pairwise.perm.manova.own(dist_obj = dist_obj,
group_fac = group_fac,
nperm = 999,
p.adj.method = "fdr")
})
adonis_list <- lapply(1:length(Groupwise), function(i){
rbind(Overalls[[i]], Groupwise[[i]])
})
names(adonis_list) <- names(Overalls)
} else {
adonis_list <- lapply(dist_list, function(dist_obj){
fit <- vegan::adonis(dist_obj ~ group_fac, permutations = 999)
data.frame(Comparison = "Overall_group_var",
addonis_p_value = fit$aov.tab[1, "Pr(>F)"],
adonis_R2 = fit$aov.tab[1, "R2"],
p_val_adj = fit$aov.tab[1, "Pr(>F)"])
})
}
ps_filt_ra
d_list <- dist_list
dist_analysis_list <- distance_t_analyse(dist_list = dist_list, physeq = ps_filt_ra, group_var = group_var)
dist_analysis_list2 <- distance_t_analyse(dist_list = dist_list2, physeq = ps_taa_filt, group_var = group_var)
group_fac <- sample_data(ps_filt_ra)[[group_var]]
d_list <- dist_list
if (length(levels(group_fac)) > 2){
Overalls <- lapply(d_list, function(dist_obj){
fit <- vegan::adonis(dist_obj ~ group_fac, permutations = 999)
data.frame(Comparison = "Overall_group_var",
addonis_p_value = fit$aov.tab[1, "Pr(>F)"],
adonis_R2 = fit$aov.tab[1, "R2"],
p_val_adj = fit$aov.tab[1, "Pr(>F)"])
})
Groupwise <- lapply(d_list, function(dist_obj){
pairwise.perm.manova.own(dist_obj = dist_obj,
group_fac = group_fac,
nperm = 999,
p.adj.method = "fdr")
})
adonis_list <- lapply(1:length(Groupwise), function(i){
rbind(Overalls[[i]], Groupwise[[i]])
})
names(adonis_list) <- names(Overalls)
} else {
adonis_list <- lapply(d_list, function(dist_obj){
fit <- vegan::adonis(dist_obj ~ group_fac, permutations = 999)
data.frame(Comparison = "Overall_group_var",
addonis_p_value = fit$aov.tab[1, "Pr(>F)"],
adonis_R2 = fit$aov.tab[1, "R2"],
p_val_adj = fit$aov.tab[1, "Pr(>F)"])
})
}
group_fac <- sample_data(ps_taa_filt)[[group_var]]
d_list <- dist_list2
if (length(levels(group_fac)) > 2){
Overalls <- lapply(d_list, function(dist_obj){
fit <- vegan::adonis(dist_obj ~ group_fac, permutations = 999)
data.frame(Comparison = "Overall_group_var",
addonis_p_value = fit$aov.tab[1, "Pr(>F)"],
adonis_R2 = fit$aov.tab[1, "R2"],
p_val_adj = fit$aov.tab[1, "Pr(>F)"])
})
Groupwise <- lapply(d_list, function(dist_obj){
pairwise.perm.manova.own(dist_obj = dist_obj,
group_fac = group_fac,
nperm = 999,
p.adj.method = "fdr")
})
adonis_list2 <- lapply(1:length(Groupwise), function(i){
rbind(Overalls[[i]], Groupwise[[i]])
})
names(adonis_list2) <- names(Overalls)
} else {
adonis_list2 <- lapply(d_list, function(dist_obj){
fit <- vegan::adonis(dist_obj ~ group_fac, permutations = 999)
data.frame(Comparison = "Overall_group_var",
addonis_p_value = fit$aov.tab[1, "Pr(>F)"],
adonis_R2 = fit$aov.tab[1, "R2"],
p_val_adj = fit$aov.tab[1, "Pr(>F)"])
})
}
pcoas <- calc_ordination_from_distances(ps_filt_ra, dist_list = dist_list, ordination_type = "PCoA", group_var = group_var, coord_cor = TRUE)
TrList_ra <- vector(mode = "list", length = 2*length(pcoas[["ordination_Tr_samples"]]))
counter <- 0
for (i in 1:length(pcoas[["ordination_Tr_samples"]])) {
counter <- counter + 1
TrList_ra[[counter]] <- pcoas[["ordination_Tr_samples"]][[i]]
counter <- counter + 1
TrList_ra[[counter]] <- pcoas[["ordination_Tr_taxa"]][[i]]
}
pcoas2 <- calc_ordination_from_distances(ps_taa_filt, dist_list = dist_list2, ordination_type = "PCoA", group_var = group_var)
TrList_counts <- vector(mode = "list", length = 2*length(pcoas2[["ordination_Tr_samples"]]))
counter <- 0
for (i in 1:length(pcoas2[["ordination_Tr_samples"]])) {
counter <- counter + 1
TrList_counts[[counter]] <- pcoas2[["ordination_Tr_samples"]][[i]]
counter <- counter + 1
TrList_counts[[counter]] <- pcoas2[["ordination_Tr_taxa"]][[i]]
}
names(dist_analysis_list)
dist_analysis_list[["DistanceBoxplots"]]
7*length(dist_analysis_list[["DistanceBoxplots"]])
do.call("grid.arrange", c(dist_analysis_list[["DistanceBoxplots"]], nrow = length(dist_analysis_list[["DistanceBoxplots"]])))
names(dist_analysis_list)
do.call("knitr::kable", dist_analysis_list[["DistancePValues"]]))
do.call("knitr::kable", dist_analysis_list[["DistancePValues"]])
knitr::kable
do.call("kable", dist_analysis_list[["DistancePValues"]])
library(knitr)
do.call("kable", dist_analysis_list[["DistancePValues"]])
do.call("kable", c(dist_analysis_list[["DistancePValues"]]))
?kable
do.call("kable", dist_analysis_list[["DistancePValues"]][[1]])
do.call("knitr::kable", dist_analysis_list[["DistancePValues"]][[1]])
knitr(dist_analysis_list[["DistancePValues"]][[1]])
kable(dist_analysis_list[["DistancePValues"]][[1]])
dist_analysis_list[["DistancePValues"]][[1]]
dist_analysis_list[["DistancePValues"]]
length(adonis_list)
adonis_list
rm(list = ls())
