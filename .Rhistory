}
if (length(eigvec[axes]) > 0){
fracvar = eigvec[axes]/sum(eigvec)
percvar = round(100 * fracvar, 1)
strivar = as(c(Tr$label$x, Tr$label$y), "character")
strivar = paste0(strivar, " (", percvar, " %)")
Tr <- Tr + xlab(strivar[1]) + ylab(strivar[2])
}
}
TrList_own[[i]] <- Tr
rm(Tr)
TrList[[i]] <- phyloseq::plot_ordination(physeq, ordination_list[[i]], color = group_var) + ggtitle(names(dist_list)[i])
}
names(ordination_list) <- names(TrList) <- names(DFList) <- names(TrList_own) <- names(dist_list)
out <- list(ordination_list = ordination_list, DFList = DFList, ordination_Tr_own = TrList_own, ordination_Tr = TrList)
}
pcoas <- calc_ordination_from_distances(ps_filt_ra, dist_list = dist_list, ordination_type = "PCoA", group_var = group_var)
names(pcoas)
do.call("grid.arrange", c(pcoas[["ordination_Tr_own"]], ncol = 2))
ordination_list <- vector("list", length(dist_list))
DFList <- vector("list", length(dist_list))
TrList <- vector("list", length(dist_list))
TrList_own <- vector("list", length(dist_list))
axes <- 1:2 # currently only allowed to plot first and second
i = 1
ordination_type = "NMDS"
ordination <- phyloseq::ordinate(physeq, method = ordination_type, distance = dist_list[[i]])
ordination_list[[i]] <- ordination
DF <- phyloseq::plot_ordination(physeq, ordination_list[[i]], color = group_var, justDF = TRUE)
DFList[[i]] <- DF # just the first two axes cbind to sample_data in physeq
x = colnames(DF)[1]
y = colnames(DF)[2]
class(ordination)
Tr <- ggplot(DF, aes_string(x = x, y = y, col = group_var))
Tr + geom_point() +
scale_color_manual("", values = cbPalette[2:8]) +
theme_bw(12)
Tr + geom_point() +
scale_color_manual("", values = cbPalette[2:8]) +
theme_bw(12) +
ggtitle(names(dist_list[[i]]))
Tr
Tr <- ggplot(DF, aes_string(x = x, y = y, col = group_var))
Tr + geom_point() +
scale_color_manual("", values = cbPalette[2:8]) +
theme_bw(12) +
ggtitle(names(dist_list[[i]]))
Tr + geom_point() +
scale_color_manual("", values = cbPalette[2:8]) +
theme_bw(12) +
ggtitle(names(dist_list)[i])
phyloseq:::extract_eigenvalue.default(ordination)
phyloseq:::extract_eigenvalue.rda(ordination)
phyloseq:::extract_eigenvalue.pcoa(ordination)
ordination
phyloseq:::extract_eigenvalue.decorana(ordination)
phyloseq:::extract_eigenvalue.cca(ordination)
phyloseq:::extract_eigenvalue.dpcoa(ordination)
phyloseq:::extract_eigenvalue.rda(ordination)
phyloseq:::extract_eigenvalue
View(DF)
phyloseq:::scores(ordination)
phyloseq:::scores.dpcoa(ordination)
phyloseq:::scores.dpcoa
calc_ordination_from_distances <- function(physeq, dist_list, ordination_type = "PCoA", group_var = NULL){
ordination_list <- vector("list", length(dist_list))
DFList <- vector("list", length(dist_list))
TrList <- vector("list", length(dist_list))
TrList_own <- vector("list", length(dist_list))
axes <- 1:2 # currently only allowed to plot first and second
for (i in seq_along(dist_list)) {
ordination <- phyloseq::ordinate(physeq, method = ordination_type, distance = dist_list[[i]])
ordination_list[[i]] <- ordination
DF <- phyloseq::plot_ordination(physeq, ordination_list[[i]], color = group_var, justDF = TRUE)
DFList[[i]] <- DF # just the first two axes cbind to sample_data in physeq
x = colnames(DF)[1]
y = colnames(DF)[2]
Tr <- ggplot(DF, aes_string(x = x, y = y, col = group_var))
Tr <- Tr + geom_point() +
scale_color_manual("", values = cbPalette[2:8]) +
theme_bw(12) +
ggtitle(names(dist_list)[i])
# for labelling axes
if (ordination_type == "PCoA" || ordination_type == "NMDS") {
if (ordination_type == "PCoA") {
eigvec <- phyloseq:::extract_eigenvalue.pcoa(ordination)
} else {
eigvec <- phyloseq:::extract_eigenvalue.default(ordination)
}
if (length(eigvec[axes]) > 0){
fracvar = eigvec[axes]/sum(eigvec)
percvar = round(100 * fracvar, 1)
strivar = as(c(Tr$label$x, Tr$label$y), "character")
strivar = paste0(strivar, " (", percvar, " %)")
Tr <- Tr + xlab(strivar[1]) + ylab(strivar[2])
}
}
TrList_own[[i]] <- Tr
rm(Tr)
TrList[[i]] <- phyloseq::plot_ordination(physeq, ordination_list[[i]], color = group_var) + ggtitle(names(dist_list)[i])
}
names(ordination_list) <- names(TrList) <- names(DFList) <- names(TrList_own) <- names(dist_list)
out <- list(ordination_list = ordination_list, DFList = DFList, ordination_Tr_own = TrList_own, ordination_Tr = TrList)
}
nmdss <- calc_ordination_from_distances(ps_filt_ra, dist_list = dist_list, ordination_type = "NMDS", group_var = group_var)
names(nmdss)
TL <- nmdss["ordination_Tr"]
TL[[1]]
rm(list = ls())
# source("https://bioconductor.org/biocLite.R")
# biocLite("phyloseq")
library(phyloseq); packageVersion("phyloseq")
library(dada2); packageVersion("dada2")
library(vegan); packageVersion("vegan")
library(ggplot2); packageVersion("ggplot2")
library(dplyr); packageVersion("dplyr")
library(tidyr); packageVersion("tidyr")
library(gridExtra); packageVersion("gridExtra")
PackageVersions <- data.frame(R = version$version.string,
dada2 = packageVersion("dada2"),
vegan = packageVersion("vegan"),
ggplot2 = packageVersion("ggplot2"),
dplyr = packageVersion("dplyr"),
tidyr = packageVersion("tidyr"),
gridExtra = packageVersion("gridExtra"))
for (i in 1:ncol(PackageVersions)){PackageVersions[,i] <- as.character(PackageVersions[,i])}
PackageVersionsAnal <- tidyr::gather(PackageVersions, key = Package, value = Version)
rm(list = ls())
# source("https://bioconductor.org/biocLite.R")
# biocLite("phyloseq")
library(phyloseq); packageVersion("phyloseq")
library(dada2); packageVersion("dada2")
library(vegan); packageVersion("vegan")
library(ggplot2); packageVersion("ggplot2")
library(dplyr); packageVersion("dplyr")
library(tidyr); packageVersion("tidyr")
library(gridExtra); packageVersion("gridExtra")
PackageVersions <- data.frame(R = version$version.string,
dada2 = packageVersion("dada2"),
vegan = packageVersion("vegan"),
ggplot2 = packageVersion("ggplot2"),
dplyr = packageVersion("dplyr"),
tidyr = packageVersion("tidyr"),
gridExtra = packageVersion("gridExtra"))
for (i in 1:ncol(PackageVersions)){PackageVersions[,i] <- as.character(PackageVersions[,i])}
PackageVersionsAnal <- tidyr::gather(PackageVersions, key = Package, value = Version)
# - filtering inputs -
prevalence <- 20 # in percent
min_obs <- 0L # a taxon will be considered present (for prevalence) if count > min_obs
taxa_sums_quantile <- 90 # in percent, taxa whose taxa_sums are above this threshold will be kept even if they do not pass prevalence
# --
# - rarefaction inputs -
seed <- 1234
step_size <- 200 # for rarefaction curves
rare_level <- NULL # IF NULL, min(sample_sums(ps)) is used!
rare_type <- "sample" # must be either "sample" or "vegan"
rare_max_total <- NULL # maximal total amplicons value to which rarefaction curves are calculated, if NULL: quantile(sample_sums(ps), probs = .25) is used
# --
# - plot/statistics inputs -
taxa_are_rows = FALSE
group_var <- "Group" # tha variable based on which samples will be grouped HAS TO BE SET IN samdf BELOW!!
group_var_levels <- c("Young", "MiddleAged", "Old") # the factor levels of the group_var in the order you want them in your plots
alpha_div_measures <- c("Observed", "Shannon")
#
# - beta diversity -
dist_methods <- c("bray", "jsd", "jaccard") # c("unifrac", "wunifrac", "jsd", "bray", "jaccard", "euclidean")
#
# - file/path inputs -
datapath <- "/Users/jvb740/MarieCurie_Work/MouseProject/ResultsAndProtocols/ManiAging_Results/16S_Sequencing/2017-07-13_DK_age_ManiAging/Dada2_Analysis_Pooled_Hulk"
# NB: taxonomy path should start in datapath
taxonomy.path <- "Dada_Taxonomy/Silva_v128/Taxonomy.RData"
functionpath <- "/Users/jvb740/MarieCurie_Work/BackgroundKnowledge/16S_Learning/Dada_Pipel/Functions/"
# --
# -- Load all data in --
# laod seqtab.nochim
load(file.path(datapath, "Dada_Data/DenoisedData.RData"))
# load QualityStats
load(file.path(datapath, "Dada_Data/QualityStats.RData"))
# load Taxonomy
load(file.path(datapath, taxonomy.path))
# sanity checks if sample names fit
sample.names <- rownames(seqtab.nochim)
if (!all.equal(rownames(seqtab.nochim), names(F_QualityStats))) {
stop("check sample names")
}
if (!all.equal(rownames(seqtab.nochim), as.character(ReadSummary$Sample))) {
stop("check sample names")
}
# # check the size of the objects
# all_objects <- ls()
# object_memory <- vector(mode = "character", length = length(all_objects))
# for (i in 1:length(all_objects)) {
#         object_memory[i] <- object.size(get(all_objects[i]))
# }
# data.frame(all_objects, object_memory)
rm(mergers, seqtab, taxa)
# ----
# -- load all functions in --
source(file.path(functionpath, "Dada_TaxonomyFunctions.R"))
source(file.path(functionpath, "Dada_PlotFunctions.R"))
# ----
# generate the data frame with the sample data
sample.path <- "/Users/jvb740/MarieCurie_Work/MouseProject/ResultsAndProtocols/ManiAging_Results/Results_RAnalysis"
load(file.path(sample.path, "ManiAging.RData"))
# I start with the quality report from the sequencing
samdf <- ManiAging[["QR"]]
# remove columns without information
samdf <- dplyr::select(samdf, -Tube.No., -TotalMass_mug, -Library.Type)
# adjust sample order in samdf to that of seqtab.nochim, and add rownames = rownames(seqtab.nochim)
samples.out <- rownames(seqtab.nochim)
Study <- sapply(strsplit(samples.out, "-"), `[`, 1)
IDfirst <- paste(sapply(strsplit(samples.out, "-"), `[`, 2))
IDsecond <- paste(sapply(strsplit(samples.out, "-"), `[`, 3))
IDorder <- vector(mode = "character", length = length(samples.out))
IDorder[IDsecond == "NA"] <- IDfirst[IDsecond == "NA"]
IDorder[IDsecond != "NA"] <- paste(IDfirst[IDsecond != "NA"], ".", IDsecond[IDsecond != "NA"], sep = "")
samdf <- samdf[match(IDorder, samdf$Mouse_ID),]
# add more columns/data collected for the samples: Example Hematology
Hematology <- ManiAging[["Hematology"]]
colnames(Hematology)[4:24] <- c("Leukocytes", "Erythrocytes", "Hemoglobin", "Hematocrit", "MCV", "MCHC", "Thrombocytes", "MPV", "MPC",
"PC_Neutrophils", "PC_Lymphocytes", "PC_Monocytes", "PC_Eosinophils", "PC_Basophils", "PC_LUC", "Neutrophils",
"Lymphocytes", "Monocytes", "Eosinophils", "Basophils", "LUC")
# add Lymphoid/Myeoloid Ratio CHECK
Hematology <- mutate(Hematology, Myeloid = Neutrophils + Monocytes + Eosinophils + Basophils + LUC, LymphoidToMyeloid = Lymphocytes/Myeloid)
Hematology <- select(Hematology, 1, 4:10,19:20, 25, 27) #remove also Group as it would be double
samdf <- merge(samdf, Hematology, by = "Mouse_ID", all.x = TRUE)
samdf$Group <- factor(samdf$Group, levels = group_var_levels, ordered = TRUE)
rownames(samdf) <- samples.out
# sanity check
if (!identical(samples.out, sample.names)) {
stop("sample names in samdf do not fit to seqtab.nochim, check")
}
# Generate the phyloseq file
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows = taxa_are_rows),
sample_data(samdf),
tax_table(taxa.species))
ps
InputDada <- data.frame(Argument = names(unlist(Input)), Value = unlist(Input))
rownames(InputDada) <- NULL
knitr::kable(PackageVersions)
knitr::kable(InputDada)
Tr <- QS_Median_OverviewPlot(QStatsList = F_QualityStats, SampleNames = sample.names)
Tr <- Tr +
geom_vline(xintercept = Input$trimLeft[1], color = 'darkred', linetype = "dashed", size = .5) +
geom_vline(xintercept = Input$truncLen[1], color = 'darkred', linetype = "dashed", size = .5) +
ggtitle(paste("Median quality scores: FW reads. No Samples: ", length(sample.names), "; trimLeft: ", Input$trimLeft[1],
"; truncLen: ", Input$truncLen[1], sep = ""))
TrR <- QS_Median_OverviewPlot(QStatsList = R_QualityStats, SampleNames = sample.names)
TrR <- TrR +
geom_vline(xintercept = Input$trimLeft[2], color = 'darkred', linetype = "dashed", size = .5) +
geom_vline(xintercept = Input$truncLen[2], color = 'darkred', linetype = "dashed", size = .5) +
ggtitle(paste("Median quality scores: RV reads. No Samples: ", length(sample.names), "; trimLeft: ", Input$trimLeft[1],
"; truncLen: ", Input$truncLen[2], sep = ""))
grid.arrange(Tr, TrR, nrow = 2)
Tr <- NoReads_StepsSimple(ReadSummary = ReadSummary, SampleNames = sample.names, sort = TRUE)
Tr <- Tr + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 10),
text = element_text(size=14))
Tr
df_ab_prev <- data.frame(SV_ID = 1:ncol(seqtab.nochim), abundance = colSums(seqtab.nochim), prevalence = colSums(seqtab.nochim != 0), sparsity = colSums(seqtab.nochim == 0), mean_abundance_nonzero = apply(seqtab.nochim, 2, function(x){mean(x[x > 0])}),
median_abundance_nonzero = apply(seqtab.nochim, 2, function(x){median(x[x > 0])}))
TrrList <- plot_correlations_abundance_prev_sparsity(df_ab_prev)
grid.arrange(TrrList[[1]], TrrList[[2]], ncol = 2)
do.call("grid.arrange", c(TrrList[3:10], ncol = 2))
assignment_distribution <- get_assignemnt_distribution(taxa.species)
knitr::kable(assignment_distribution)
# look at the species that have been assigned ambiguously
the_ambiguous_species <- unname(taxa.species[grep(pattern = "/", taxa.species[,'Species']), c('Genus', 'Species')])
colnames(the_ambiguous_species) <- c("Genus", "Species")
knitr::kable(as.data.frame(the_ambiguous_species))
assign_vs_ab <- check_assignment_vs_abundance(taxa.species, seqtab.nochim, abundanceQuantiles = seq(0, 95, by = 5))
assign_vs_prev <- check_assignment_vs_prevalence(taxa.species, seqtab.nochim, prevalences = seq(0, 95, by = 5))
grid.arrange(assign_vs_prev[[2]], assign_vs_ab[[2]], nrow = 2)
TrLists <- plotTaxLevelvsAbundPrev(taxa = taxa.species, seqtab = seqtab.nochim)
TrList_ab <- TrLists[["TrList_ab"]]
TrList_prev <- TrLists[["TrList_prev"]]
Last3Levels <- colnames(taxa.species)[(ncol(taxa.species)-2):ncol(taxa.species)]
TrList <- c(TrList_ab[Last3Levels], TrList_prev[Last3Levels])
rm(TrLists)
grid.arrange(TrList[[1]], TrList[[4]], TrList[[2]], TrList[[5]], TrList[[3]], TrList[[6]], ncol = 2)
DF_alpha_list <- calculate_alphadiversity(physeq = ps, measures = alpha_div_measures)
DF_alpha <- DF_alpha_list[[1]]
DF_alpha_no_rare <- DF_alpha # just to save it for comparison later
alpha_div_measures2 <- alpha_div_measures
if ("Observed" %in% alpha_div_measures) {
alpha_div_measures2[alpha_div_measures2 == "Observed"] <- "Richness"
}
pairwise.tt_rich <- pairwise.t.test(x = DF_alpha$Richness, g = DF_alpha[[group_var]], alternative = "two", p.adjust.method = "none", var.equal = F, pool.sd = F)
# compare, to get the same results as individual t.test you need pool.sd = F
# t.test(x = DF_alpha$Richness[DF_alpha$Group == "Old"], y = DF_alpha$Richness[DF_alpha$Group == "MiddleAged"], alternative = "two", var.equal = F)$p.value
pairwise.tt_shannon <- pairwise.t.test(x = DF_alpha$Shannon, g = DF_alpha[[group_var]], alternative = "two", p.adjust.method = "none", var.equal = F, pool.sd = F)
pairwise.tt_total <- pairwise.t.test(x = DF_alpha$Total, g = DF_alpha[[group_var]], alternative = "two", p.adjust.method = "none", var.equal = F, pool.sd = F)
pairwise.tt_rich_resids <- pairwise.t.test(x = DF_alpha$Richness_resids, g = DF_alpha[[group_var]], alternative = "two", p.adjust.method = "none", var.equal = F, pool.sd = F)
pairwise.tt_shannon_resids <- pairwise.t.test(x = DF_alpha$Shannon_resids, g = DF_alpha[[group_var]], alternative = "two", p.adjust.method = "none", var.equal = F, pool.sd = F)
# TrListBP <- plotAlphaDiversity(ps, x = group_var, color = group_var, group = group_var, measures = c("Observed", "Shannon"))
TrListBP <- boxplot_alphaDiv_fromDF(DF = DF_alpha, color = group_var, group = group_var, measures = c(alpha_div_measures2, paste(alpha_div_measures2, "resids", sep = "_")))
# TrList_lm <- plot_alphaDivVstotalAmplicons(physeq = ps, measures = alpha_div_measures, color = group_var)
TrList_lm <- plot_alphaDivVstotalAmplicons_fromList(DF_List = DF_alpha_list, measures = alpha_div_measures2, color = group_var)
grid.arrange(TrListBP[["Richness"]], TrListBP[["Shannon"]], ncol = 2)
knitr::kable(pairwise.tt_rich$p.value)
knitr::kable(pairwise.tt_shannon$p.value)
TrListBP[["Total"]] + ylab("total amplicons (sample_sums())")
knitr::kable(pairwise.tt_total$p.value)
grid.arrange(TrList_lm[["Richness"]], TrList_lm[["Shannon"]], ncol = 2)
grid.arrange(TrListBP[["Richness_resids"]], TrListBP[["Shannon_resids"]], ncol = 2)
knitr::kable(pairwise.tt_rich_resids$p.value)
knitr::kable(pairwise.tt_shannon_resids$p.value)
# -- rarefaction using vegan package: --
if (is.null(rare_level)) {
rare_level <- min(sample_sums(ps))
}
# rare_level <- 200
set.seed(seed)
if (rare_type == "vegan"){
seqtab.nochim.rare <- rrarefy(seqtab.nochim, sample = rare_level)
} else if (rare_type == "sample"){
seqtab.nochim.rare <- t(apply(seqtab.nochim, 1, function(cnts){rarefy_sample(cnts, size = rare_level)}))
dimnames(seqtab.nochim.rare) <- dimnames(seqtab.nochim)
} else {
stop("rare_type must be vegan or sample")
}
ps.rare <- phyloseq(otu_table(seqtab.nochim.rare, taxa_are_rows=FALSE),
sample_data(samdf),
tax_table(taxa.species))
DF_alpha_list <- calculate_alphadiversity(physeq = ps.rare, measures = alpha_div_measures)
DF_alpha <- DF_alpha_list[[1]]
alpha_div_measures2 <- alpha_div_measures
if ("Observed" %in% alpha_div_measures) {
alpha_div_measures2[alpha_div_measures2 == "Observed"] <- "Richness"
}
pairwise.tt_rich <- pairwise.t.test(x = DF_alpha$Richness, g = DF_alpha[[group_var]], alternative = "two", p.adjust.method = "none", var.equal = F, pool.sd = F)
pairwise.tt_shannon <- pairwise.t.test(x = DF_alpha$Shannon, g = DF_alpha[[group_var]], alternative = "two", p.adjust.method = "none", var.equal = F, pool.sd = F)
# NB: since Totals is now constant the residual p.values would be the same as richness directly
# pairwise.tt_rich_resids <- pairwise.t.test(x = DF_alpha$Richness_resids, g = DF_alpha[[group_var]], alternative = "two", p.adjust.method = "none", var.equal = F, pool.sd = F)
# TrListBP <- plotAlphaDiversity(ps, x = group_var, color = group_var, group = group_var, measures = c("Observed", "Shannon"))
TrListBP <- boxplot_alphaDiv_fromDF(DF = DF_alpha, color = group_var, group = group_var, measures = c(alpha_div_measures2, paste(alpha_div_measures2, "resids", sep = "_")))
grid.arrange(TrListBP[["Richness"]], TrListBP[["Shannon"]], TrListBP[["Richness_resids"]], TrListBP[["Shannon_resids"]], ncol = 2)
knitr::kable(pairwise.tt_rich$p.value)
knitr::kable(pairwise.tt_shannon$p.value)
all(sample_sums(ps.rare) == rare_level)
Comp_DF <- data.frame(Sample = rownames(DF_alpha), Diff_richness = DF_alpha_no_rare$Richness - DF_alpha$Richness, Diff_shannon = DF_alpha_no_rare$Shannon - DF_alpha$Shannon)
head(arrange(Comp_DF, desc(Diff_richness)))
rarefaction_curves <- rarefaction_curve_own_fast(physeq = ps, group_var = group_var, max_total = rare_max_total, step_size = step_size, seed = seed)
grid.arrange(rarefaction_curves[["Tr_richness_col"]], rarefaction_curves[["Tr_richness_group"]], ncol = 2)
rarefaction_curves[["Tr_richness_grad"]]
ps_taa <- adj_LS(ps) # taa for total amplicons adjusted
ps_taa_filt <- filter_taxa(ps_taa, function(x){(sum(x > min_obs) > (prevalence/100)*length(x)) || (sum(x) > quantile(taxa_sums(ps_taa), probs = taxa_sums_quantile/100))}, prune = TRUE)
ps_filt <- prune_taxa(taxa_names(ps_taa_filt), ps)
ps_filt_ra <- transform_sample_counts(ps_filt, function(x){x/sum(x)})
dist_list <- calc_distances(ps_filt_ra, dist_methods)
pcoas <- calc_ordination_from_distances(ps_filt_ra, dist_list = dist_list, ordination_type = "PCoA", group_var = group_var)
nmdss <- calc_ordination_from_distances(ps_filt_ra, dist_list = dist_list, ordination_type = "NMDS", group_var = group_var)
do.call("grid.arrange", c(pcoas[["ordination_Tr_own"]], ncol = 2))
do.call("grid.arrange", c(nmdss[["ordination_Tr_own"]], ncol = 2))
rm(list = ls())
getwd()
# source("https://bioconductor.org/biocLite.R")
# biocLite("phyloseq")
library(phyloseq); packageVersion("phyloseq")
library(dada2); packageVersion("dada2")
library(vegan); packageVersion("vegan")
library(ggplot2); packageVersion("ggplot2")
library(dplyr); packageVersion("dplyr")
library(tidyr); packageVersion("tidyr")
library(gridExtra); packageVersion("gridExtra")
PackageVersions <- data.frame(R = version$version.string,
dada2 = packageVersion("dada2"),
vegan = packageVersion("vegan"),
ggplot2 = packageVersion("ggplot2"),
dplyr = packageVersion("dplyr"),
tidyr = packageVersion("tidyr"),
gridExtra = packageVersion("gridExtra"))
for (i in 1:ncol(PackageVersions)){PackageVersions[,i] <- as.character(PackageVersions[,i])}
PackageVersionsAnal <- tidyr::gather(PackageVersions, key = Package, value = Version)
# - filtering inputs -
prevalence <- 20 # in percent
min_obs <- 0L # a taxon will be considered present (for prevalence) if count > min_obs
taxa_sums_quantile <- 90 # in percent, taxa whose taxa_sums are above this threshold will be kept even if they do not pass prevalence
# --
# - rarefaction inputs -
seed <- 1234
step_size <- 200 # for rarefaction curves
rare_level <- NULL # IF NULL, min(sample_sums(ps)) is used!
rare_type <- "sample" # must be either "sample" or "vegan"
rare_max_total <- NULL # maximal total amplicons value to which rarefaction curves are calculated, if NULL: quantile(sample_sums(ps), probs = .25) is used
# --
# - plot/statistics inputs -
taxa_are_rows = FALSE
group_var <- "Group" # tha variable based on which samples will be grouped HAS TO BE SET IN samdf BELOW!!
group_var_levels <- c("Young", "MiddleAged", "Old") # the factor levels of the group_var in the order you want them in your plots
alpha_div_measures <- c("Observed", "Shannon")
#
# - beta diversity -
dist_methods <- c("bray", "jsd", "jaccard") # c("unifrac", "wunifrac", "jsd", "bray", "jaccard", "euclidean")
#
# - file/path inputs -
datapath <- "/Users/jvb740/MarieCurie_Work/MouseProject/ResultsAndProtocols/ManiAging_Results/16S_Sequencing/2017-07-13_DK_age_ManiAging/Dada2_Analysis"
# NB: taxonomy path should start in datapath
taxonomy.path <- "Dada_Taxonomy/Silva_v128/Taxonomy_Silva128_minBoot50_allowMT.RData"
functionpath <- "/Users/jvb740/MarieCurie_Work/BackgroundKnowledge/16S_Learning/Dada_Pipel/Functions/"
# --
# -- Load all data in --
# laod seqtab.nochim
load(file.path(datapath, "Dada_Data/DenoisedData.RData"))
# load QualityStats
load(file.path(datapath, "Dada_Data/QualityStats.RData"))
# load Taxonomy
load(file.path(datapath, taxonomy.path))
# sanity checks if sample names fit
sample.names <- rownames(seqtab.nochim)
if (!all.equal(rownames(seqtab.nochim), names(F_QualityStats))) {
stop("check sample names")
}
if (!all.equal(rownames(seqtab.nochim), as.character(ReadSummary$Sample))) {
stop("check sample names")
}
# # check the size of the objects
# all_objects <- ls()
# object_memory <- vector(mode = "character", length = length(all_objects))
# for (i in 1:length(all_objects)) {
#         object_memory[i] <- object.size(get(all_objects[i]))
# }
# data.frame(all_objects, object_memory)
rm(mergers, seqtab, taxa)
# ----
# -- load all functions in --
source(file.path(functionpath, "Dada_TaxonomyFunctions.R"))
source(file.path(functionpath, "Dada_PlotFunctions.R"))
# ----
# -- Store Inputs --
if (is.null(rare_level)) {
rare_level <- min(sample_sums(ps))
}
if (is.null(rare_max_total)){
rare_max_total <- quantile(sample_sums(ps), probs = .25)
}
Inputs <- list(prevalence = prevalence,
min_obs = min_obs,
seed = seed,
step_size = step_size,
rare_level = rare_level,
rare_type = rare_type,
rare_max_total = rare_max_total,
group_var = group_var,
group_var_levels = group_var_levels,
alpha_div_measures = alpha_div_measures,
taxa_are_rows = taxa_are_rows,
datapath = datapath,
taxonomy.path = taxonomy.path,
functionpath = functionpath)
# ----
InputAnalysis <- data.frame(Argument = names(unlist(Inputs)), Value = unlist(Inputs))
rownames(InputAnalysis) <- NULL
knitr::kable(InputAnalysis)
knitr::kable(PackageVersionsAnal)
ps
# generate the data frame with the sample data
sample.path <- "/Users/jvb740/MarieCurie_Work/MouseProject/ResultsAndProtocols/ManiAging_Results/Results_RAnalysis"
load(file.path(sample.path, "ManiAging.RData"))
# I start with the quality report from the sequencing
samdf <- ManiAging[["QR"]]
# remove columns without information
samdf <- dplyr::select(samdf, -Tube.No., -TotalMass_mug, -Library.Type)
# adjust sample order in samdf to that of seqtab.nochim, and add rownames = rownames(seqtab.nochim)
samples.out <- rownames(seqtab.nochim)
Study <- sapply(strsplit(samples.out, "-"), `[`, 1)
IDfirst <- paste(sapply(strsplit(samples.out, "-"), `[`, 2))
IDsecond <- paste(sapply(strsplit(samples.out, "-"), `[`, 3))
IDorder <- vector(mode = "character", length = length(samples.out))
IDorder[IDsecond == "NA"] <- IDfirst[IDsecond == "NA"]
IDorder[IDsecond != "NA"] <- paste(IDfirst[IDsecond != "NA"], ".", IDsecond[IDsecond != "NA"], sep = "")
samdf <- samdf[match(IDorder, samdf$Mouse_ID),]
# add more columns/data collected for the samples: Example Hematology
Hematology <- ManiAging[["Hematology"]]
colnames(Hematology)[4:24] <- c("Leukocytes", "Erythrocytes", "Hemoglobin", "Hematocrit", "MCV", "MCHC", "Thrombocytes", "MPV", "MPC",
"PC_Neutrophils", "PC_Lymphocytes", "PC_Monocytes", "PC_Eosinophils", "PC_Basophils", "PC_LUC", "Neutrophils",
"Lymphocytes", "Monocytes", "Eosinophils", "Basophils", "LUC")
# add Lymphoid/Myeoloid Ratio CHECK
Hematology <- mutate(Hematology, Myeloid = Neutrophils + Monocytes + Eosinophils + Basophils + LUC, LymphoidToMyeloid = Lymphocytes/Myeloid)
Hematology <- select(Hematology, 1, 4:10,19:20, 25, 27) #remove also Group as it would be double
samdf <- merge(samdf, Hematology, by = "Mouse_ID", all.x = TRUE)
samdf$Group <- factor(samdf$Group, levels = group_var_levels, ordered = TRUE)
rownames(samdf) <- samples.out
# sanity check
if (!identical(samples.out, sample.names)) {
stop("sample names in samdf do not fit to seqtab.nochim, check")
}
# Generate the phyloseq file
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows = taxa_are_rows),
sample_data(samdf),
tax_table(taxa.species))
ps
?getSequences
getSequences(ps)
getSequences(as(otu_table(ps), "matrix"))
seqs <- getSequences(as(otu_table(ps), "matrix"))
length(seqs)
class(seqs)
names(seqs) <- seqs
?AlignSeqs
install.packages("DECIPHER")
library(DECIPHER)
source("https://bioconductor.org/biocLite.R")
biocLite("DECIPHER")
library(DECIPHER); packageVersion("phyloseq")
browseVignettes("DECIPHER")
seqs <- getSequences(seqtab.nochim)
names(seqs) <- seqs
seqs
DNAStringSet(seqs)
?AlignSeqs
library(DECIPHER)
detach("package:Biostrings", unload = TRUE)
