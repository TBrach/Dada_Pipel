Tr <- Tr +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = richness-se_richness, ymax = richness + se_richness), width = 1000) +
geom_errorbarh(aes(xmin = total - se_total, xmax = total + se_total), height = 5) +
scale_color_manual("", values = cbPalette[2:4]) +
xlab("total_amplicons") +
theme_bw()
zeros$Type <- as.character(zeros$Type)
zeros$Group <- factor(zeros$Group, levels = c("Young", "MiddleAged", "Old"), ordered = TRUE)
DF_filt_sum <- as.data.frame(rbind(zeros, DF_filt_sum))
Tr1 <- ggplot(DF_filt_sum, aes(x = total, y = richness, col = Group))
Tr1 <- Tr1 +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = richness-se_richness, ymax = richness + se_richness), width = 1000) +
geom_errorbarh(aes(xmin = total - se_total, xmax = total + se_total), height = 5) +
scale_color_manual("", values = cbPalette[2:4]) +
xlab("total_amplicons") +
theme_bw()
DF_rare <- rarefaction_curve[[1]]
DF_rare_sum <- summarise(group_by(DF_rare, Type, Group, Total), richness = mean(Richness), sd_richness = sd(Richness), n = n(), se_richness = sd_richness/sqrt(n))
DF_rare_sum$sd_total = 0
DF_rare_sum$se_total = 0
DF_rare_sum <- select(DF_rare_sum, Type, Group, total = Total, sd_total, richness, sd_richness, n, se_richness, se_total)
DF_rare_sum <- as.data.frame(DF_rare_sum)
DF_filt_sum$Type <- "rarefy on filtered reads"
DF_final <- rbind(DF_rare_sum, DF_filt_sum)
DF_final$Type
DF_final$Type[DF_final$Type == "rarefy_total_amplicons"] <- "rarefy on total amplicons"
DF_final$Type <- factor(DF_final$Type, levels = c("rarefy on total amplicons", "rarefy on filtered reads"), order = TRUE)
rm(list = ls())
rare_compare <- readRDS("/Users/jvb740/MarieCurie_Work/BackgroundKnowledge/16S_Learning/Dada_Pipel/Explanation_Files/rare_compare.rds")
DF_alphas_no_rare <- rare_compare[["DF_alphas_no_rare"]]
DF_alphas_rare <- rare_compare[["DF_alphas_rare"]]
rarefaction_curve <- rare_compare[["rarefaction_curve"]]
types <- names(DF_alphas_no_rare)
DF_filt_List <- list()
for (i in 2:length(DF_alphas_no_rare)) {
DF <- DF_alphas_no_rare[[i]]
DF$Type <- types[i]
DF <- select(DF, c("Sample", "Group", "Total", "Richness", "Type"))
DF_filt_List[[i-1]] <- DF
}
DF_filt <- do.call(rbind, DF_filt_List)
DF_filt <- group_by(DF_filt, Type, Group)
DF_filt_sum <- summarise(DF_filt, total = mean(Total), sd_total = sd(Total), richness = mean(Richness), sd_richness = sd(Richness),
n = n())
DF_filt_sum$se_richness <- DF_filt_sum$sd_richness/sqrt(DF_filt_sum$n)
DF_filt_sum$se_total <- DF_filt_sum$sd_total/sqrt(DF_filt_sum$n)
zeros <- data.frame(Type = c("filt_0", "filt_0", "filt_0"), Group = c("Young", "MiddleAged", "Old"),
total = c(0, 0, 0), sd_total = c(0, 0, 0), richness = c(0, 0, 0),
sd_richness = c(0, 0, 0), n = c(0, 0, 0), se_richness = c(0, 0, 0),
se_total = c(0, 0, 0))
DF_filt_sum <- as.data.frame(DF_filt_sum)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
Tr <- ggplot(DF_filt_sum, aes(x = total, y = richness, col = Group))
Tr <- Tr +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = richness-se_richness, ymax = richness + se_richness), width = 1000) +
geom_errorbarh(aes(xmin = total - se_total, xmax = total + se_total), height = 5) +
scale_color_manual("", values = cbPalette[2:4]) +
xlab("total_amplicons") +
theme_bw()
zeros$Type <- as.character(zeros$Type)
zeros$Group <- factor(zeros$Group, levels = c("Young", "MiddleAged", "Old"), ordered = TRUE)
DF_filt_sum <- as.data.frame(rbind(zeros, DF_filt_sum))
Tr1 <- ggplot(DF_filt_sum, aes(x = total, y = richness, col = Group))
Tr1 <- Tr1 +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = richness-se_richness, ymax = richness + se_richness), width = 1000) +
geom_errorbarh(aes(xmin = total - se_total, xmax = total + se_total), height = 5) +
scale_color_manual("", values = cbPalette[2:4]) +
xlab("total_amplicons") +
theme_bw()
DF_rare <- rarefaction_curve[[1]]
DF_rare_sum <- summarise(group_by(DF_rare, Type, Group, Total), richness = mean(Richness), sd_richness = sd(Richness), n = n(), se_richness = sd_richness/sqrt(n))
DF_rare_sum$sd_total = 0
DF_rare_sum$se_total = 0
DF_rare_sum <- select(DF_rare_sum, Type, Group, total = Total, sd_total, richness, sd_richness, n, se_richness, se_total)
DF_rare_sum <- as.data.frame(DF_rare_sum)
DF_filt_sum$Type <- "rarefy on filtered reads"
DF_final <- rbind(DF_rare_sum, DF_filt_sum)
DF_final$Type[DF_final$Type == "rarefy_total_amplicons"] <- "rarefy on total amplicons"
DF_final$Type <- factor(DF_final$Type, levels = c("rarefy on total amplicons", "rarefy on filtered reads"), order = TRUE)
Tr2 <- ggplot(DF_final, aes(x = total, y = richness, col = Group, shape = Type))
Tr2 <- Tr2 +
geom_errorbar(aes(ymin = richness-se_richness, ymax = richness + se_richness), width = 1000) +
geom_point() +
geom_line() +
# geom_errorbarh(aes(xmin = total - se_total, xmax = total + se_total), height = 5) +
scale_color_manual("", values = cbPalette[2:4]) +
xlab("total_amplicons") +
theme_bw() +
theme(legend.title = element_blank())
Tr2f <- ggplot(DF_final, aes(x = total, y = richness, col = Group))
Tr2f <- Tr2f +
geom_errorbar(aes(ymin = richness-se_richness, ymax = richness + se_richness), width = 1000) +
geom_point() +
geom_line() +
facet_grid(~ Type) +
# geom_errorbarh(aes(xmin = total - se_total, xmax = total + se_total), height = 5) +
scale_color_manual("", values = cbPalette[2:4]) +
xlab("total_amplicons") +
theme_bw() +
theme(legend.title = element_blank())
# only for the young group
DF_final_young <- DF_final[DF_final$Group == "Young", ]
Tr3 <- ggplot(DF_final_young, aes(x = total, y = richness, shape = Type))
Tr3 <- Tr3 +
geom_errorbar(aes(ymin = richness-se_richness, ymax = richness + se_richness), col = cbPalette[2], width = 1000) +
geom_point(col = cbPalette[2]) +
geom_line(col = cbPalette[2]) +
# geom_errorbarh(aes(xmin = total - se_total, xmax = total + se_total), height = 5) +
scale_color_manual("", values = cbPalette[2:4]) +
xlab("total_amplicons") +
theme_bw() +
theme(legend.title = element_blank(),
legend.position = "top")
DF_final_youngOld <- DF_final[DF_final$Group %in% c("Young", "Old"), ]
Tr4 <- ggplot(DF_final_youngOld, aes(x = total, y = richness, col = Group, shape = Type))
Tr4 <- Tr4 +
geom_errorbar(aes(ymin = richness-se_richness, ymax = richness + se_richness), width = 1000) +
geom_point() +
geom_line() +
facet_grid(~ Group) +
# geom_errorbarh(aes(xmin = total - se_total, xmax = total + se_total), height = 5) +
scale_color_manual("", values = cbPalette[2:4], guide = FALSE) +
xlab("total_amplicons") +
theme_bw() +
theme(legend.title = element_blank(),
legend.position = "top")
Tr4
DF_final_2 <- DF_final_youngOld
DF_final_2$Group[DF_final_2$Group == "Young"] = "grp1"
DF_final_2$Group[DF_final_2$Group == "Old"] = "grp2"
DF_final_2 <- DF_final_youngOld
DF_final_2$Group == "Young"
DF_final_2$Group[DF_final_2$Group == "Young"] = "grp1"
DF_final_2 <- DF_final_youngOld
DF_final2$Group <- as.character(DF_final2$Group)
DF_final_2$Group[DF_final_2$Group == "Young"] = "grp1"
DF_final_2$Group[DF_final_2$Group == "Old"] = "grp2"
DF_final_2 <- DF_final_youngOld
DF_final2$Group <- as.character(DF_final_2$Group)
DF_final_2$Group[DF_final_2$Group == "Young"] = "grp1"
DF_final_2 <- DF_final_youngOld
DF_final_2$Group <- as.character(DF_final_2$Group)
DF_final_2$Group[DF_final_2$Group == "Young"] = "grp1"
DF_final_2$Group[DF_final_2$Group == "Old"] = "grp2"
DF_final_2$Group <- facter(DF_final_2$Group, levels = c("grp1", "grp2"), ordered = TRUE)
DF_final_2$Group <- factor(DF_final_2$Group, levels = c("grp1", "grp2"), ordered = TRUE)
Tr5 <- ggplot(DF_final_youngOld, aes(x = total, y = richness, col = Group, shape = Type))
Tr5 <- Tr5 +
geom_errorbar(aes(ymin = richness-se_richness, ymax = richness + se_richness), width = 1000) +
geom_point() +
geom_line() +
facet_grid(~ Group) +
# geom_errorbarh(aes(xmin = total - se_total, xmax = total + se_total), height = 5) +
scale_color_manual("", values = cbPalette[2:4], guide = FALSE) +
xlab("total_amplicons") +
theme_bw() +
theme(legend.title = element_blank(),
legend.position = "top")
Tr5
Tr5 <- ggplot(DF_final_2, aes(x = total, y = richness, col = Group, shape = Type))
Tr5 <- Tr5 +
geom_errorbar(aes(ymin = richness-se_richness, ymax = richness + se_richness), width = 1000) +
geom_point() +
geom_line() +
facet_grid(~ Group) +
# geom_errorbarh(aes(xmin = total - se_total, xmax = total + se_total), height = 5) +
scale_color_manual("", values = cbPalette[2:4], guide = FALSE) +
xlab("total_amplicons") +
theme_bw() +
theme(legend.title = element_blank(),
legend.position = "top")
Tr5
getwd()
setwd("~/MarieCurie_Work/BackgroundKnowledge/16S_Learning/Dada_Pipel")
png(file = "rare_filt_reads_vs_rare_total_amplicons.png", width = 10, height = 10)
Tr5
dev.off()
Tr5
getwd()
?png
png(file = "rare_filt_reads_vs_rare_total_amplicons.png", width = 480, height = 480)
Tr5
dev.off()
Tr5 <- ggplot(DF_final_2, aes(x = total, y = richness, col = Group, shape = Type))
Tr5 <- Tr5 +
geom_errorbar(aes(ymin = richness-se_richness, ymax = richness + se_richness), width = 1000) +
geom_point(size = 2) +
geom_line() +
facet_grid(~ Group) +
# geom_errorbarh(aes(xmin = total - se_total, xmax = total + se_total), height = 5) +
scale_color_manual("", values = cbPalette[2:4], guide = FALSE) +
xlab("total_amplicons") +
theme_bw() +
theme(legend.title = element_blank(),
legend.position = "top")
png(file = "rare_filt_reads_vs_rare_total_amplicons.png", width = 500, height = 400)
Tr5
dev.off()
Tr5 <- ggplot(DF_final_2, aes(x = total, y = richness, col = Group, shape = Type))
Tr5 <- Tr5 +
geom_errorbar(aes(ymin = richness-se_richness, ymax = richness + se_richness), width = 1000) +
geom_point(size = 2.5) +
geom_line() +
facet_grid(~ Group) +
# geom_errorbarh(aes(xmin = total - se_total, xmax = total + se_total), height = 5) +
scale_color_manual("", values = cbPalette[2:4], guide = FALSE) +
xlab("total_amplicons") +
theme_bw() +
theme(legend.title = element_blank(),
legend.position = "top")
png(file = "rare_filt_reads_vs_rare_total_amplicons.png", width = 500, height = 400)
Tr5
dev.off()
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/170328_Vocabulary/app_Voc.R')
rm(list = ls())
datapath <- "/Users/jvb740/MarieCurie_Work/MouseProject/ResultsAndProtocols/ManiAging_Results/16S_Sequencing/2017-07-13_DK_age_ManiAging/Dada2_Analysis/phyloseq_analysis"
ps <- readRDS(file.path(datapath, "physeq.rds"))
functionpath <- "/Users/jvb740/MarieCurie_Work/BackgroundKnowledge/16S_Learning/Dada_Pipel/Functions/"
source(file.path(functionpath, "Dada_TaxonomyFunctions.R"))
source(file.path(functionpath, "Dada_PlotFunctions.R"))
table(tax_table(ps)[, "Phylum"], exclude = NULL) # without exclude NAs would not be counted
ps0 <- subset_taxa(ps, !is.na(Phylum))
prevdf <- data.frame(SV_ID = 1:ntaxa(ps0),
total_abundance = taxa_sums(ps0),
prevalence = colSums(as(otu_table(ps0), "matrix") != 0),
sparsity = colSums(as(otu_table(ps0), "matrix") == 0),
mean_abundance_nonzero = apply(as(otu_table(ps0), "matrix"), 2, function(x){mean(x[x > 0])}),
median_abundance_nonzero = apply(as(otu_table(ps0), "matrix"), 2, function(x){median(x[x > 0])}))
prevdf <- cbind(prevdf, tax_table(ps0))
summarise(group_by(prevdf, Phylum), mean_prevalence = mean(prevalence), total_prevalence = sum(prevalence), n_taxa = n())
prevdf1 <- prevdf
filterList <- plot_abundance_prev_filter(physeq = ps0, prevalence = 5, taxa_sums_quantile = 100)
filterList[[2]] # basically his plot
prevalenceThreshold <- 0.05 * nsamples(ps0)
keepTaxa <- rownames(prevdf1)[(prevdf1$prevalence >= prevalenceThreshold)]
ps2 <- prune_taxa(keepTaxa, ps0)
length(get_taxa_unique(ps2, taxonomic.rank = "Genus")) # This counts NA in
ps3 <- tax_glom(ps2, "Genus", NArm = TRUE) # here all taxa with Genus = NA removed!
plot_abundance = function(physeq, title = "",
Facet = "Order", Color = "Phylum"){
# Arbitrary subset, based on Phylum, for plotting
p1f = subset_taxa(physeq, Phylum %in% c("Firmicutes"))
mphyseq = psmelt(p1f)
mphyseq <- subset(mphyseq, Abundance > 0)
ggplot(data = mphyseq, mapping = aes_string(x = "Group",y = "Abundance")) +
geom_violin(fill = NA) +
geom_point(aes_string(col = Color, fill = Color), size = 1, alpha = 0.3,
position = position_jitter(width = 0.3)) +
facet_wrap(facets = Facet) + scale_y_log10() +
theme(legend.position="none")
}
ps3ra <- transform_sample_counts(ps3, function(x) {x/sum(x)})
plotBefore = plot_abundance(ps3, Color = "Sample")
plotAfter = plot_abundance(ps3ra, Color = "Sample")
# Combine each plot into one graphic.
grid.arrange(nrow = 2, plotBefore, plotAfter)
psOrd = subset_taxa(ps3ra, Order == "Lactobacillales")
plot_abundance(psOrd, Facet = "Genus", Color = NULL)
sample_data(ps)$sample_sums <- sample_sums(ps)
qplot(log10(sample_sums(ps)), binwidth = 0.01)
pslog <- transform_sample_counts(ps, function(x) log(1 + x))
qplot(sample_sums(pslog), binwidth = 0.01)
qplot(sample_sums(pslog))
out.wuf.log <- ordinate(pslog, method = "MDS", distance = "wunifrac")
evals <- out.wuf.log$values$Eigenvalues
plot_ordination(pslog, out.wuf.log, color = "Group") +
labs(col = "Group") +
coord_fixed(sqrt(evals[2] / evals[1]))
rel_abund <- t(apply(otu_table(ps), 1, function(x) x / sum(x)))
qplot(rel_abund[, 12], geom = "histogram") +
xlab("Relative abundance")
abund <- otu_table(pslog)
head(abund)
tt <- as.data.frame(abund)
View(tt)
log(1)
View(tt)
rank(tt[1,])
class(abund)
typeof(abund)
abund_ranks <- apply(abund, 1, rank)
View(abund_ranks)
abund_ranks <- t(apply(abund, 1, rank))
dim(abund)
View(abund_ranks)
abund_ranks <- abund_ranks - 329
abund_ranks[abund_ranks < 1] <- 1
abund5 <- abund[1:5,]
abund5 <- as.data.frame(abund[1:5,])
View(abund5)
abund_ranks5 <- as.data.frame(abund_ranks[1:5,])
View(abund_ranks)
View(abund_ranks5)
colnames(abund5) <- paste("SV", 1:869, sep = "_")
colnames(abund_ranks5) <- paste("SV", 1:869, sep = "_")
View(abund_ranks)
View(abund_ranks5)
abund5 <- gather(t(abund5), key = Sample, value = logCount)
abund5 <- gather(as.data.frame(t(abund5)), key = Sample, value = logCount)
View(abund5)
abund_rank5 <- gather(as.data.frame(t(abund_rank5)), key = Sample, value = logCount)
abund_ranks5 <- gather(as.data.frame(t(abund_ranks5)), key = Sample, value = logCount)
abund <- otu_table(pslog)
# NB: data still has a 0 where there were zeros, because log(1 + 0) = 0
abund_ranks <- t(apply(abund, 1, rank))
# each SV within each sample, NB: ties were not broken, so you have for example 325.5 in
# The issue he talks about here: If many microbes have very low abundance, there could be large differences in ranks that are actually small in abundance.
# So he introduces with the following transformation a rank threshold, all microbes below this rank are set to 1, the ranks of the others are shifted down
# he uses 329 as a threshold, I use the same, remember 869 SVs are in the data
abund_ranks <- abund_ranks - 329
abund_ranks[abund_ranks < 1] <- 1
#  since the code for figure 15 does not seem to be given, let's try to recapitulate
abund5 <- as.data.frame(abund[1:5,])
abund_ranks5 <- as.data.frame(abund_ranks[1:5,])
colnames(abund5) <- paste("SV", 1:869, sep = "_")
colnames(abund_ranks5) <- paste("SV", 1:869, sep = "_")
abund5 <- gather(as.data.frame(t(abund5)), key = Sample, value = logCount)
abund_ranks5 <- gather(as.data.frame(t(abund_ranks5)), key = Sample, value = rank)
abund5 <- merge(abund5, abund_ranks5, by = Sample)
abund5 <- merge(abund5, abund_ranks5, by = "Sample")
abund <- otu_table(pslog)
# NB: data still has a 0 where there were zeros, because log(1 + 0) = 0
abund_ranks <- t(apply(abund, 1, rank))
# each SV within each sample, NB: ties were not broken, so you have for example 325.5 in
# The issue he talks about here: If many microbes have very low abundance, there could be large differences in ranks that are actually small in abundance.
# So he introduces with the following transformation a rank threshold, all microbes below this rank are set to 1, the ranks of the others are shifted down
# he uses 329 as a threshold, I use the same, remember 869 SVs are in the data
abund_ranks <- abund_ranks - 329
abund_ranks[abund_ranks < 1] <- 1
#  since the code for figure 15 does not seem to be given, let's try to recapitulate
abund5 <- as.data.frame(abund[1:5,])
abund_ranks5 <- as.data.frame(abund_ranks[1:5,])
colnames(abund5) <- paste("SV", 1:869, sep = "_")
colnames(abund_ranks5) <- paste("SV", 1:869, sep = "_")
abund5 <- gather(as.data.frame(t(abund5)), key = Sample, value = logCount)
abund_ranks5 <- gather(as.data.frame(t(abund_ranks5)), key = Sample, value = rank)
View(abund5)
View(abund_ranks5)
View(abund5)
abund5$rank <- abund_ranks5$rank
View(abund5)
abund <- otu_table(pslog)
# NB: data still has a 0 where there were zeros, because log(1 + 0) = 0
abund_ranks <- t(apply(abund, 1, rank))
# each SV within each sample, NB: ties were not broken, so you have for example 325.5 in
# The issue he talks about here: If many microbes have very low abundance, there could be large differences in ranks that are actually small in abundance.
# So he introduces with the following transformation a rank threshold, all microbes below this rank are set to 1, the ranks of the others are shifted down
# he uses 329 as a threshold, I use the same, remember 869 SVs are in the data
abund_ranks <- abund_ranks - 329
abund_ranks[abund_ranks < 1] <- 1
#  since the code for figure 15 does not seem to be given, let's try to recapitulate
abund5 <- as.data.frame(abund[1:5,])
abund_ranks5 <- as.data.frame(abund_ranks[1:5,])
View(abund_ranks5)
colnames(abund5) <- paste("SV", 1:869, sep = "_")
colnames(abund_ranks5) <- paste("SV", 1:869, sep = "_")
View(abund_ranks)
View(abund_ranks5)
abund5 <- t(abund5)
View(abund5)
abund <- otu_table(pslog)
# NB: data still has a 0 where there were zeros, because log(1 + 0) = 0
abund_ranks <- t(apply(abund, 1, rank))
# each SV within each sample, NB: ties were not broken, so you have for example 325.5 in
# The issue he talks about here: If many microbes have very low abundance, there could be large differences in ranks that are actually small in abundance.
# So he introduces with the following transformation a rank threshold, all microbes below this rank are set to 1, the ranks of the others are shifted down
# he uses 329 as a threshold, I use the same, remember 869 SVs are in the data
abund_ranks <- abund_ranks - 329
abund_ranks[abund_ranks < 1] <- 1
#  since the code for figure 15 does not seem to be given, let's try to recapitulate
abund5 <- as.data.frame(abund[1:5,])
abund_ranks5 <- as.data.frame(abund_ranks[1:5,])
colnames(abund5) <- paste("SV", 1:869, sep = "_")
colnames(abund_ranks5) <- paste("SV", 1:869, sep = "_")
abund5 <- as.data.frame(t(abund5))
View(abund5)
abund5$SV <- rownames(abund5)
View(abund_ranks5)
View(abund5)
abund_ranks5 <- as.data.frame(t(abund_ranks5))
abund_ranks5$SV <- rownames(abund_ranks5)
View(abund_ranks5)
abund5 <- gather(abund5, key = Sample, value = logCount, -SV)
View(abund5)
?merge
abund_ranks5 <- gather(abund_ranks5, key = Sample, value = rank, -SV)
View(abund_ranks5)
merge(abund5, abund_ranks5, by = c("Sample", "SV"))
abund5 <- merge(abund5, abund_ranks5, by = c("Sample", "SV"))
View(abund5)
Tr <- ggplot(abund5, aes(x = logCount, y = rang, col = Sample))
Tr +
geom_point()
Tr <- ggplot(abund5, aes(x = logCount, y = rank, col = Sample))
Tr +
geom_point()
abund <- otu_table(pslog)
abund_ranks <- t(apply(abund, 1, rank))
abund_ranks <- abund_ranks - 329
range(abund_ranks)
abund <- otu_table(pslog)
# NB: data still has a 0 where there were zeros, because log(1 + 0) = 0
abund_ranks <- t(apply(abund, 1, rank))
# each SV within each sample, NB: ties were not broken, so you have for example 325.5 in
# The issue he talks about here: If many microbes have very low abundance, there could be large differences in ranks that are actually small in abundance.
# So he introduces with the following transformation a rank threshold, all microbes below this rank are set to 1, the ranks of the others are shifted down
# he uses 329 as a threshold, after seeing the plot below corresponding to figure 15 I realized that I had to use a higher threshold
abund_ranks <- abund_ranks - 550
abund_ranks[abund_ranks < 1] <- 1
#  since the code for figure 15 does not seem to be given, let's try to recapitulate
abund5 <- as.data.frame(abund[1:5,])
abund_ranks5 <- as.data.frame(abund_ranks[1:5,])
colnames(abund5) <- paste("SV", 1:869, sep = "_")
colnames(abund_ranks5) <- paste("SV", 1:869, sep = "_")
abund5 <- as.data.frame(t(abund5))
abund5$SV <- rownames(abund5)
abund_ranks5 <- as.data.frame(t(abund_ranks5))
abund_ranks5$SV <- rownames(abund_ranks5)
abund5 <- gather(abund5, key = Sample, value = logCount, -SV)
abund_ranks5 <- gather(abund_ranks5, key = Sample, value = rank, -SV)
abund5 <- merge(abund5, abund_ranks5, by = c("Sample", "SV"))
Tr <- ggplot(abund5, aes(x = logCount, y = rank, col = Sample))
Tr <- Tr +
geom_point()
Tr
abund <- otu_table(pslog)
# NB: data still has a 0 where there were zeros, because log(1 + 0) = 0
abund_ranks <- t(apply(abund, 1, rank))
# each SV within each sample, NB: ties were not broken, so you have for example 325.5 in
# The issue he talks about here: If many microbes have very low abundance, there could be large differences in ranks that are actually small in abundance.
# So he introduces with the following transformation a rank threshold, all microbes below this rank are set to 1, the ranks of the others are shifted down
# he uses 329 as a threshold, after seeing the plot below corresponding to figure 15 I realized that I had to use a higher threshold to get to a similar plot
abund_ranks <- abund_ranks - 650
abund_ranks[abund_ranks < 1] <- 1
#  since the code for figure 15 does not seem to be given, let's try to recapitulate
abund5 <- as.data.frame(abund[1:5,])
abund_ranks5 <- as.data.frame(abund_ranks[1:5,])
colnames(abund5) <- paste("SV", 1:869, sep = "_")
colnames(abund_ranks5) <- paste("SV", 1:869, sep = "_")
abund5 <- as.data.frame(t(abund5))
abund5$SV <- rownames(abund5)
abund_ranks5 <- as.data.frame(t(abund_ranks5))
abund_ranks5$SV <- rownames(abund_ranks5)
abund5 <- gather(abund5, key = Sample, value = logCount, -SV)
abund_ranks5 <- gather(abund_ranks5, key = Sample, value = rank, -SV)
abund5 <- merge(abund5, abund_ranks5, by = c("Sample", "SV"))
Tr <- ggplot(abund5, aes(x = logCount, y = rank, col = Sample))
Tr <- Tr +
geom_point()
Tr
abund <- otu_table(pslog)
# NB: data still has a 0 where there were zeros, because log(1 + 0) = 0
abund_ranks <- t(apply(abund, 1, rank))
# each SV within each sample, NB: ties were not broken, so you have for example 325.5 in
# The issue he talks about here: If many microbes have very low abundance, there could be large differences in ranks that are actually small in abundance.
# So he introduces with the following transformation a rank threshold, all microbes below this rank are set to 1, the ranks of the others are shifted down
# he uses 329 as a threshold, after seeing the plot below corresponding to figure 15 I realized that I had to use a higher threshold to get to a similar plot
abund_ranks <- abund_ranks - 700
abund_ranks[abund_ranks < 1] <- 1
#  since the code for figure 15 does not seem to be given, let's try to recapitulate
abund5 <- as.data.frame(abund[1:5,])
abund_ranks5 <- as.data.frame(abund_ranks[1:5,])
colnames(abund5) <- paste("SV", 1:869, sep = "_")
colnames(abund_ranks5) <- paste("SV", 1:869, sep = "_")
abund5 <- as.data.frame(t(abund5))
abund5$SV <- rownames(abund5)
abund_ranks5 <- as.data.frame(t(abund_ranks5))
abund_ranks5$SV <- rownames(abund_ranks5)
abund5 <- gather(abund5, key = Sample, value = logCount, -SV)
abund_ranks5 <- gather(abund_ranks5, key = Sample, value = rank, -SV)
abund5 <- merge(abund5, abund_ranks5, by = c("Sample", "SV"))
Tr <- ggplot(abund5, aes(x = logCount, y = rank, col = Sample))
Tr <- Tr +
geom_point()
Tr
ranks_pca <- dudi.pca(abund_ranks, scannf = F, nf = 3)
# source("https://bioconductor.org/biocLite.R")
# biocLite("phyloseq")
library(phyloseq); packageVersion("phyloseq")
library(dada2); packageVersion("dada2")
library(vegan); packageVersion("vegan")
library(ggplot2); packageVersion("ggplot2")
library(dplyr); packageVersion("dplyr")
library(tidyr); packageVersion("tidyr")
library(gridExtra); packageVersion("gridExtra")
library(xtable); packageVersion("xtable")
PackageVersions <- data.frame(R = version$version.string,
dada2 = packageVersion("dada2"),
vegan = packageVersion("vegan"),
ggplot2 = packageVersion("ggplot2"),
dplyr = packageVersion("dplyr"),
tidyr = packageVersion("tidyr"),
gridExtra = packageVersion("gridExtra"),
xtable = packageVersion("xtable"))
for (i in 1:ncol(PackageVersions)){PackageVersions[,i] <- as.character(PackageVersions[,i])}
PackageVersionsAnal <- tidyr::gather(PackageVersions, key = Package, value = Version)
install.packages("ade4")
install.packages("ade4")
install.packages("ade4")
install.packages("ade4")
install.packages("ade4")
library(ade4)
ranks_pca <- dudi.pca(abund_ranks, scannf = F, nf = 3)
search()
