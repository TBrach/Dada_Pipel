samdf$Group[samdf$Group == "Young"] <- "grp1"
samdf$Group[samdf$Group == "Old"] <- "grp2"
samdf$Group
if (!is.null(group_var) && !is.null(group_var_levels)){
samdf[[group_var]] <- factor(samdf[[group_var]], levels = group_var_levels, ordered = TRUE)
}
# sanity checks if sample names fit
sample.names <- rownames(seqtab.nochim)
if (!all.equal(sample.names, names(F_QualityStats))) {
stop("check sample names")
}
if (!all.equal(sample.names, as.character(ReadSummary$Sample))) {
stop("check sample names")
}
# # check the size of the objects
# all_objects <- ls()
# object_memory <- vector(mode = "character", length = length(all_objects))
# for (i in 1:length(all_objects)) {
#         object_memory[i] <- object.size(get(all_objects[i]))
# }
# data.frame(all_objects, object_memory)
# ----
# -- load all functions in --
source(file.path(functionpath, "Dada_TaxonomyFunctions.R"))
source(file.path(functionpath, "Dada_PlotFunctions.R"))
# ----
# -- generate phyloseq object --
# Generate the phyloseq file
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows = taxa_are_rows),
sample_data(samdf),
tax_table(taxa.species),
phy_tree(tree_list[["fitGTR"]]$tree))
ps
ps
FilteredReads <- ReadSummary[,c("Sample","FilteredReads")]
# usually should be in same order but better check:
FilteredReads <- FilteredReads[match(sample_names(ps), FilteredReads$Sample),]
sample_data(ps)$FilteredReads <- FilteredReads$FilteredReads
if (!identical(sample_names(ps), sample.names)) {
stop("check sample names")
}
sampleskeep <- rownames(samdf)[samdf$Group %in% c("grp1", "grp2")]
ps <- prune_samples(sampleskeep, ps)
ps <- filter_taxa(ps, flist = function(x){sum(x) > 0}, prune = TRUE)
ps
sample_data(ps)$Group
df_ab_prev <- data.frame(SV_ID = 1:ntaxa(ps),
total_abundance = taxa_sums(ps),
prevalence = colSums(as(otu_table(ps), "matrix") != 0),
sparsity = colSums(as(otu_table(ps), "matrix") == 0),
mean_abundance_nonzero = apply(as(otu_table(ps), "matrix"), 2, function(x){mean(x[x > 0])}),
median_abundance_nonzero = apply(as(otu_table(ps), "matrix"), 2, function(x){median(x[x > 0])}))
df_ab_prev <- cbind(df_ab_prev, tax_table(ps))
TrrList <- plot_correlations_abundance_prev_sparsity(df_ab_prev)
TrList <- plotSVdistributions(seqtab = as(otu_table(ps), "matrix"), prevalence = prevalence)
Phyla <- as.data.frame(table(tax_table(ps)[, "Phylum"], exclude = NULL))
names(Phyla) <- c("Phylum", "assigned_SVs")
Phyla$SV_PC <- round(100*Phyla$assigned_SVs/sum(Phyla$assigned_SVs),1)
knitr::kable(Phyla)
# print(xtable(Phyla, align = "|c|c|c|c|", digits = 1), include.rownames = FALSE)
ps <- subset_taxa(ps, !is.na(Phylum))
ps
alpha_div_wrap <- alpha_diversity_wrapper(physeq = ps, alpha_div_measures = alpha_div_measures)
DF_alpha_no_rare <- alpha_div_wrap[["DF_alpha_list"]]$DF_alpha # used later for comparison plots to rarefied version
TrListBP <- alpha_div_wrap[["TrListBP"]]
TrList_lm <- alpha_div_wrap[["TrList_lm"]]
TrList_lm_filt <- alpha_div_wrap[["TrList_lm_filteredReads"]]
pairwise_list <- alpha_div_wrap[grep("pairwise", names(alpha_div_wrap))]
pairwise_list <- pairwise_list[!is.na(pairwise_list)]
# generate a nice table of the p.values
p_values_wide <- arrange_p_values(pairwise_list)
# generate a nice table of the p.values of linear fits using Total or filtered_reads as one of the predictors
fitter_coef_list <- lapply(alpha_div_wrap[["fitter_list"]], function(fit) {as.data.frame(summary(fit)$coefficients)})
p_values_adjustedLM <- do.call(rbind, fitter_coef_list)
TrListBP[["Richness"]]
TrList_lm[["Richness"]]
400/5
# -- rarefaction using vegan package: --
if (is.null(rare_level)) {
rare_level <- min(sample_sums(ps))
}
# rare_level <- 200
set.seed(seed)
if (rare_type == "vegan"){
seqtab.nochim.rare <- rrarefy(as(otu_table(ps), "matrix"), sample = rare_level)
} else if (rare_type == "sample"){
seqtab.nochim.rare <- t(apply(as(otu_table(ps), "matrix"), 1, function(cnts){rarefy_sample(cnts, size = rare_level)}))
dimnames(seqtab.nochim.rare) <- dimnames(as(otu_table(ps), "matrix"))
} else {
stop("rare_type must be vegan or sample")
}
ps.rare <- ps
otu_table(ps.rare) <- otu_table(seqtab.nochim.rare, taxa_are_rows = taxa_are_rows)
alpha_div_wrap <- alpha_diversity_wrapper(physeq = ps.rare, alpha_div_measures = alpha_div_measures)
DF_alpha_rare <- alpha_div_wrap[["DF_alpha_list"]]$DF_alpha
TrListBP <- alpha_div_wrap[["TrListBP"]]
TrList_lm <- alpha_div_wrap[["TrList_lm"]]
TrList_lm_filt <- alpha_div_wrap[["TrList_lm_filteredReads"]]
pairwise_list <- alpha_div_wrap[grep("pairwise", names(alpha_div_wrap))]
pairwise_list <- pairwise_list[!is.na(pairwise_list)]
p_values_wide <- arrange_p_values(pairwise_list)
fitter_coef_list <- lapply(alpha_div_wrap[["fitter_list"]], function(fit) {as.data.frame(summary(fit)$coefficients)})
p_values_adjustedLM <- do.call(rbind, fitter_coef_list)
# add in addition lm plots to the old sample_sums
TrList_lm_PreRareTotal <- plot_alphaDivVSoriginalTotalAmplicons(DF_alpha_rare, DF_alpha_no_rare, measures = alpha_div_measures,
color = group_var)
TrrList <- plot_alphaDivVSoriginalTotalAmplicons2(DF_alpha_rare, DF_alpha_no_rare, measures = alpha_div_measures,
color = group_var)
TrrList[["TrList_total"]][["Richness"]]
TrrList[["TrList_total_one"]][["Richness"]]
# rare_curves <- rarefaction_curve_own(physeq = ps, group_var = group_var, step_size = step_size, seed = seed, type = "vegan")
# rare_curves_own <- rarefaction_curve_own(physeq = ps, group_var = group_var, step_size = step_size, seed = seed, type = "sample")
rarefaction_curves <- rarefaction_curve_own_fast(physeq = ps, group_var = group_var, max_total = rare_max_total, step_size = step_size, seed = seed)
rarefaction_curves[["Tr_richness_col"]]
rarefaction_curves[["Tr_richness_grad"]]
rarefaction_curves[["Tr_richness_group"]
]
rarefaction_curves[["Tr_richness_col"]]
getwd()
grid.arrange(TrList_lm[["Richness"]], TrListBP[["Richness"]],
ncol = 2)
?grid.arrange
grid.arrange(TrList_lm[["Richness"]], TrListBP[["Richness"]],
layout_matrix = c(1,1,2))
grid.arrange(TrList_lm[["Richness"]], TrListBP[["Richness"]],
layout_matrix = matrix(c(1,1,2), nrow = 1))
alpha_div_wrap <- alpha_diversity_wrapper(physeq = ps, alpha_div_measures = alpha_div_measures)
DF_alpha_no_rare <- alpha_div_wrap[["DF_alpha_list"]]$DF_alpha # used later for comparison plots to rarefied version
TrListBP <- alpha_div_wrap[["TrListBP"]]
TrList_lm <- alpha_div_wrap[["TrList_lm"]]
TrList_lm_filt <- alpha_div_wrap[["TrList_lm_filteredReads"]]
pairwise_list <- alpha_div_wrap[grep("pairwise", names(alpha_div_wrap))]
pairwise_list <- pairwise_list[!is.na(pairwise_list)]
# generate a nice table of the p.values
p_values_wide <- arrange_p_values(pairwise_list)
# generate a nice table of the p.values of linear fits using Total or filtered_reads as one of the predictors
fitter_coef_list <- lapply(alpha_div_wrap[["fitter_list"]], function(fit) {as.data.frame(summary(fit)$coefficients)})
p_values_adjustedLM <- do.call(rbind, fitter_coef_list)
grid.arrange(TrList_lm[["Richness"]], TrListBP[["Richness"]],
layout_matrix = matrix(c(1,1,2), nrow = 1))
getwd()
setwd("~/MarieCurie_Work/BackgroundKnowledge/16S_Learning/Dada_Pipel")
pdf(file = "alpha_div_no_pool.pdf", width = 8, height = 5)
grid.arrange(TrList_lm[["Richness"]], TrListBP[["Richness"]],
layout_matrix = matrix(c(1,1,2), nrow = 1))
dev.off()
?png
png(file = "alpha_div_no_pool.png", width = 8, height = 5)
grid.arrange(TrList_lm[["Richness"]], TrListBP[["Richness"]],
layout_matrix = matrix(c(1,1,2), nrow = 1))
dev.off()
400/8
png(file = "alpha_div_no_pool.png", width = 400, height = 250)
grid.arrange(TrList_lm[["Richness"]], TrListBP[["Richness"]],
layout_matrix = matrix(c(1,1,2), nrow = 1))
dev.off()
png(file = "alpha_div_no_pool.png", width = 500, height = 250)
grid.arrange(TrList_lm[["Richness"]], TrListBP[["Richness"]],
layout_matrix = matrix(c(1,1,2), nrow = 1))
dev.off()
png(file = "rarecurves_no_pool.png", width = 700, height = 300)
grid.arrange(rarefaction_curves[["Tr_richness_group"]], rarefaction_curves[["Tr_richness_grad"]],
layout_matrix = matrix(c(1,2), nrow = 1))
dev.off()
rm(list = ls())
# -- DadaWrapper --
Input_DadaWrapper <- data.frame(Argument = names(Input),
Value = sapply(Input, function(x){
if (is.null(x)){
"NULL"
} else if (length(x) > 5) {
"long entry"
} else if (length(x) > 1 && length(x) < 6){
paste(x, collapse = "; ")
} else {
as.character(x)
}}))
rownames(Input_DadaWrapper) <- NULL
# ----
# -- Dada_WrapperAssignTaxonomyAddSpecies --
InputSave <- InputSave[c("minBoot", "allowMultiple", "tryRC", "PathToRefs", "RefDataBase", "SpeciesDB", "PathToSave")]
Input_DadaAssignTaxonomy <- data.frame(Argument = names(unlist(InputSave)), Value = unlist(InputSave))
rownames(Input_DadaAssignTaxonomy) <- NULL
# ----
# -- construct_phylogenetic_tree -
Input_constructTree <- data.frame(Argument = names(tree_list[["Inputs"]]),
Value = sapply(tree_list[["Inputs"]], function(x){
if (length(x) > 1) {
"long entry"
} else {
as.character(x)
}}))
rownames(Input_constructTree) <- NULL
# ----
# -- This phyloseq analysis --
if (is.null(rare_level)) {
rare_level <- min(sample_sums(ps))
}
if (is.null(rare_max_total)){
rare_max_total <- quantile(sample_sums(ps), probs = .25)
}
Inputs_phyloseqAnalysis <- list(prevalence = prevalence,
min_obs = min_obs,
taxa_sums_quantile = taxa_sums_quantile,
seed = seed,
step_size = step_size,
rare_level = rare_level,
rare_type = rare_type,
rare_max_total = rare_max_total,
taxa_are_rows = taxa_are_rows,
group_var = group_var,
group_var_levels = group_var_levels,
alpha_div_measures = alpha_div_measures,
dist_methods = dist_methods,
datapath = datapath,
taxonomy.path = taxonomy.path,
tree.path = tree.path,
sample.path = sample.path,
functionpath = functionpath)
Inputs_phyloseqAnalysis <- data.frame(Argument = names(Inputs_phyloseqAnalysis),
Value = sapply(Inputs_phyloseqAnalysis, function(x){
if (is.null(x)){
"NULL"
} else if (length(x) > 7) {
"long entry"
} else if (length(x) > 1 && length(x) < 8){
paste(x, collapse = "; ")
} else {
as.character(x)
}}))
rownames(Inputs_phyloseqAnalysis) <- NULL
# ----
knitr::kable(PackageVersions, caption = "Package Versions DadaWrapper")
knitr::kable(Input_DadaWrapper, caption = "input arguments DadaWrapper")
knitr::kable(Input_DadaAssignTaxonomy, caption = "input arguments Dada_WrapperAssignTaxonomyAddSpecies")
knitr::kable(Input_constructTree, caption = "input arguments for function construct_phylogenetic_tree")
knitr::kable(tree_list[["PackageVersions"]], caption = "package Versions for contruct_phylogenetic_tree")
knitr::kable(Inputs_phyloseqAnalysis, caption = "input arguments for this phyloseq analysis")
knitr::kable(PackageVersionsAnal, caption = "package Versions for this phyloseq analysis")
# ---- Set input arguments including file paths ----
# - filtering inputs -
prevalence <- 20 # in percent
min_obs <- 0L # a taxon will be considered present (for prevalence) if count > min_obs
taxa_sums_quantile <- 90 # in percent, taxa whose taxa_sums are above this threshold will be kept even if they do not pass prevalence
# --
# - rarefaction inputs -
seed <- 1234
step_size <- 200 # for rarefaction curves
rare_level <- NULL # IF NULL, min(sample_sums(ps)) is used!
rare_type <- "sample" # must be either "sample" or "vegan"
rare_max_total <- NULL # maximal total amplicons value to which rarefaction curves are calculated, if NULL: quantile(sample_sums(ps), probs = .25) is used
# --
# - plot/statistics inputs -
taxa_are_rows = FALSE
group_var <- "Group" # tha variable based on which samples will be grouped
# group_var_levels <- c("Young", "Old") # the factor levels of the group_var in the order you want them in your plots (set to NULL if you do not care)
group_var_levels <- c("grp1", "grp2")
alpha_div_measures <- c("Observed", "Shannon")
# --
# - beta diversity -
dist_methods <- c("jsd", "unifrac", "wunifrac") # otions: see unlist(distanceMethodList)
# --
# - file/path inputs -
datapath <- "/Users/jvb740/MarieCurie_Work/MouseProject/ResultsAndProtocols/ManiAging_Results/16S_Sequencing/2017-07-13_DK_age_ManiAging/Dada2_Analysis"
# NB: taxonomy, tree, and sample path should start in datapath (otherwise change code below)
taxonomy.path <- "Dada_Taxonomy/Silva_v128/Taxonomy_Silva128_minBoot50_allowMT.RData"
tree.path <- "Dada_phylogenetic_tree/phylog_tree.rds"
sample.path <- "sample_data/samdf.rds"
functionpath <- "/Users/jvb740/MarieCurie_Work/BackgroundKnowledge/16S_Learning/Dada_Pipel/Functions/"
# --
# ----
# -- Load all data in --
# laod seqtab.nochim
load(file.path(datapath, "Dada_Data/DenoisedData.RData"))
# load QualityStats
load(file.path(datapath, "Dada_Data/QualityStats.RData"))
# load Taxonomy
load(file.path(datapath, taxonomy.path))
# load tree
tree_list <- readRDS(file.path(datapath, tree.path))
# load samdf
samdf <- readRDS(file.path(datapath, sample.path))
samdf$Group <- as.character(samdf$Group)
samdf$Group[samdf$Group == "Young"] <- "grp1"
samdf$Group[samdf$Group == "Old"] <- "grp2"
if (!is.null(group_var) && !is.null(group_var_levels)){
samdf[[group_var]] <- factor(samdf[[group_var]], levels = group_var_levels, ordered = TRUE)
}
# sanity checks if sample names fit
sample.names <- rownames(seqtab.nochim)
if (!all.equal(sample.names, names(F_QualityStats))) {
stop("check sample names")
}
if (!all.equal(sample.names, as.character(ReadSummary$Sample))) {
stop("check sample names")
}
# # check the size of the objects
# all_objects <- ls()
# object_memory <- vector(mode = "character", length = length(all_objects))
# for (i in 1:length(all_objects)) {
#         object_memory[i] <- object.size(get(all_objects[i]))
# }
# data.frame(all_objects, object_memory)
# ----
# -- load all functions in --
source(file.path(functionpath, "Dada_TaxonomyFunctions.R"))
source(file.path(functionpath, "Dada_PlotFunctions.R"))
# ----
# -- generate phyloseq object --
# Generate the phyloseq file
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows = taxa_are_rows),
sample_data(samdf),
tax_table(taxa.species),
phy_tree(tree_list[["fitGTR"]]$tree))
ps
# the number of Filtered reads are added to later check the relation of alpha diversity measures to the number of filtered reads
FilteredReads <- ReadSummary[,c("Sample","FilteredReads")]
# usually should be in same order but better check:
FilteredReads <- FilteredReads[match(sample_names(ps), FilteredReads$Sample),]
sample_data(ps)$FilteredReads <- FilteredReads$FilteredReads
if (!identical(sample_names(ps), sample.names)) {
stop("check sample names")
}
# remove middle age:
# remove middle-aged samples:
#sampleskeep <- rownames(samdf)[samdf$Group %in% c("Young", "Old")]
sampleskeep <- rownames(samdf)[samdf$Group %in% c("grp1", "grp2")]
ps <- prune_samples(sampleskeep, ps)
ps <- filter_taxa(ps, flist = function(x){sum(x) > 0}, prune = TRUE)
# ----
df_ab_prev <- data.frame(SV_ID = 1:ntaxa(ps),
total_abundance = taxa_sums(ps),
prevalence = colSums(as(otu_table(ps), "matrix") != 0),
sparsity = colSums(as(otu_table(ps), "matrix") == 0),
mean_abundance_nonzero = apply(as(otu_table(ps), "matrix"), 2, function(x){mean(x[x > 0])}),
median_abundance_nonzero = apply(as(otu_table(ps), "matrix"), 2, function(x){median(x[x > 0])}))
df_ab_prev <- cbind(df_ab_prev, tax_table(ps))
TrrList <- plot_correlations_abundance_prev_sparsity(df_ab_prev)
TrList <- plotSVdistributions(seqtab = as(otu_table(ps), "matrix"), prevalence = prevalence)
Phyla <- as.data.frame(table(tax_table(ps)[, "Phylum"], exclude = NULL))
names(Phyla) <- c("Phylum", "assigned_SVs")
Phyla$SV_PC <- round(100*Phyla$assigned_SVs/sum(Phyla$assigned_SVs),1)
knitr::kable(Phyla)
# print(xtable(Phyla, align = "|c|c|c|c|", digits = 1), include.rownames = FALSE)
ps <- subset_taxa(ps, !is.na(Phylum))
alpha_div_wrap <- alpha_diversity_wrapper(physeq = ps, alpha_div_measures = alpha_div_measures)
DF_alpha_no_rare <- alpha_div_wrap[["DF_alpha_list"]]$DF_alpha # used later for comparison plots to rarefied version
TrListBP <- alpha_div_wrap[["TrListBP"]]
TrList_lm <- alpha_div_wrap[["TrList_lm"]]
TrList_lm_filt <- alpha_div_wrap[["TrList_lm_filteredReads"]]
pairwise_list <- alpha_div_wrap[grep("pairwise", names(alpha_div_wrap))]
pairwise_list <- pairwise_list[!is.na(pairwise_list)]
# generate a nice table of the p.values
p_values_wide <- arrange_p_values(pairwise_list)
# generate a nice table of the p.values of linear fits using Total or filtered_reads as one of the predictors
fitter_coef_list <- lapply(alpha_div_wrap[["fitter_list"]], function(fit) {as.data.frame(summary(fit)$coefficients)})
p_values_adjustedLM <- do.call(rbind, fitter_coef_list)
png(file = "alpha_div_pool.png", width = 500, height = 250)
grid.arrange(TrList_lm[["Richness"]], TrListBP[["Richness"]],
layout_matrix = matrix(c(1,1,2), nrow = 1))
dev.off()
rm(list = ls())
# ---- Set input arguments including file paths ----
# - filtering inputs -
prevalence <- 20 # in percent
min_obs <- 0L # a taxon will be considered present (for prevalence) if count > min_obs
taxa_sums_quantile <- 90 # in percent, taxa whose taxa_sums are above this threshold will be kept even if they do not pass prevalence
# --
# - rarefaction inputs -
seed <- 1234
step_size <- 200 # for rarefaction curves
rare_level <- NULL # IF NULL, min(sample_sums(ps)) is used!
rare_type <- "sample" # must be either "sample" or "vegan"
rare_max_total <- NULL # maximal total amplicons value to which rarefaction curves are calculated, if NULL: quantile(sample_sums(ps), probs = .25) is used
# --
# - plot/statistics inputs -
taxa_are_rows = FALSE
group_var <- "Group" # tha variable based on which samples will be grouped
# group_var_levels <- c("Young", "MiddleAged", "Old") # the factor levels of the group_var in the order you want them in your plots (set to NULL if you do not care)
group_var_levels <- c("grp1", "grp2")
alpha_div_measures <- c("Observed", "Shannon")
# --
# - beta diversity -
dist_methods <- c("jsd", "unifrac", "wunifrac") # otions: see unlist(distanceMethodList)
# --
# - file/path inputs -
datapath <- "/Users/jvb740/MarieCurie_Work/MouseProject/ResultsAndProtocols/ManiAging_Results/16S_Sequencing/2017-07-13_DK_age_ManiAging/Dada2_Analysis_Pooled_Porus"
# NB: taxonomy, tree, and sample path should start in datapath (otherwise change code below)
taxonomy.path <- "Dada_Taxonomy/Silva_v128/Taxonomy.RData"
tree.path <- "Dada_phylogenetic_tree/phylog_tree.rds"
sample.path <- "sample_data/samdf.rds"
functionpath <- "/Users/jvb740/MarieCurie_Work/BackgroundKnowledge/16S_Learning/Dada_Pipel/Functions/"
# --
# ----
# -- Load all data in --
# laod seqtab.nochim
load(file.path(datapath, "Dada_Data/DenoisedData.RData"))
# load QualityStats
load(file.path(datapath, "Dada_Data/QualityStats.RData"))
# load Taxonomy
load(file.path(datapath, taxonomy.path))
# load tree
tree_list <- readRDS(file.path(datapath, tree.path))
# load samdf
samdf <- readRDS(file.path(datapath, sample.path))
samdf$Group <- as.character(samdf$Group)
samdf$Group[samdf$Group == "Young"] <- "grp1"
samdf$Group[samdf$Group == "Old"] <- "grp2"
if (!is.null(group_var) && !is.null(group_var_levels)){
samdf[[group_var]] <- factor(samdf[[group_var]], levels = group_var_levels, ordered = TRUE)
}
# sanity checks if sample names fit
sample.names <- rownames(seqtab.nochim)
if (!all.equal(sample.names, names(F_QualityStats))) {
stop("check sample names")
}
if (!all.equal(sample.names, as.character(ReadSummary$Sample))) {
stop("check sample names")
}
# # check the size of the objects
# all_objects <- ls()
# object_memory <- vector(mode = "character", length = length(all_objects))
# for (i in 1:length(all_objects)) {
#         object_memory[i] <- object.size(get(all_objects[i]))
# }
# data.frame(all_objects, object_memory)
# ----
# -- load all functions in --
source(file.path(functionpath, "Dada_TaxonomyFunctions.R"))
source(file.path(functionpath, "Dada_PlotFunctions.R"))
# ----
# -- generate phyloseq object --
# Generate the phyloseq file
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows = taxa_are_rows),
sample_data(samdf),
tax_table(taxa.species),
phy_tree(tree_list[["fitGTR"]]$tree))
ps
# the number of Filtered reads are added to later check the relation of alpha diversity measures to the number of filtered reads
FilteredReads <- ReadSummary[,c("Sample","FilteredReads")]
# usually should be in same order but better check:
FilteredReads <- FilteredReads[match(sample_names(ps), FilteredReads$Sample),]
sample_data(ps)$FilteredReads <- FilteredReads$FilteredReads
if (!identical(sample_names(ps), sample.names)) {
stop("check sample names")
}
# remove middle-aged samples:
# sampleskeep <- rownames(samdf)[samdf$Group %in% c("Young", "Old")]
sampleskeep <- rownames(samdf)[samdf$Group %in% c("grp1", "grp2")]
ps <- prune_samples(sampleskeep, ps)
ps <- filter_taxa(ps, flist = function(x){sum(x) > 0}, prune = TRUE)
# ----
Phyla <- as.data.frame(table(tax_table(ps)[, "Phylum"], exclude = NULL))
names(Phyla) <- c("Phylum", "assigned_SVs")
Phyla$SV_PC <- round(100*Phyla$assigned_SVs/sum(Phyla$assigned_SVs),1)
knitr::kable(Phyla)
# print(xtable(Phyla, align = "|c|c|c|c|", digits = 1), include.rownames = FALSE)
ps <- subset_taxa(ps, !is.na(Phylum))
alpha_div_wrap <- alpha_diversity_wrapper(physeq = ps, alpha_div_measures = alpha_div_measures)
DF_alpha_no_rare <- alpha_div_wrap[["DF_alpha_list"]]$DF_alpha # used later for comparison plots to rarefied version
TrListBP <- alpha_div_wrap[["TrListBP"]]
TrList_lm <- alpha_div_wrap[["TrList_lm"]]
TrList_lm_filt <- alpha_div_wrap[["TrList_lm_filteredReads"]]
pairwise_list <- alpha_div_wrap[grep("pairwise", names(alpha_div_wrap))]
pairwise_list <- pairwise_list[!is.na(pairwise_list)]
# generate a nice table of the p.values
p_values_wide <- arrange_p_values(pairwise_list)
# generate a nice table of the p.values of linear fits using Total or filtered_reads as one of the predictors
fitter_coef_list <- lapply(alpha_div_wrap[["fitter_list"]], function(fit) {as.data.frame(summary(fit)$coefficients)})
p_values_adjustedLM <- do.call(rbind, fitter_coef_list)
png(file = "alpha_div_pool.png", width = 500, height = 250)
grid.arrange(TrList_lm[["Richness"]], TrListBP[["Richness"]],
layout_matrix = matrix(c(1,1,2), nrow = 1))
dev.off()
# -- rarefaction using vegan package: --
if (is.null(rare_level)) {
rare_level <- min(sample_sums(ps))
}
# rare_level <- 200
set.seed(seed)
if (rare_type == "vegan"){
seqtab.nochim.rare <- rrarefy(as(otu_table(ps), "matrix"), sample = rare_level)
} else if (rare_type == "sample"){
seqtab.nochim.rare <- t(apply(as(otu_table(ps), "matrix"), 1, function(cnts){rarefy_sample(cnts, size = rare_level)}))
dimnames(seqtab.nochim.rare) <- dimnames(as(otu_table(ps), "matrix"))
} else {
stop("rare_type must be vegan or sample")
}
ps.rare <- ps
otu_table(ps.rare) <- otu_table(seqtab.nochim.rare, taxa_are_rows = taxa_are_rows)
alpha_div_wrap <- alpha_diversity_wrapper(physeq = ps.rare, alpha_div_measures = alpha_div_measures)
DF_alpha_rare <- alpha_div_wrap[["DF_alpha_list"]]$DF_alpha
TrListBP <- alpha_div_wrap[["TrListBP"]]
TrList_lm <- alpha_div_wrap[["TrList_lm"]]
TrList_lm_filt <- alpha_div_wrap[["TrList_lm_filteredReads"]]
pairwise_list <- alpha_div_wrap[grep("pairwise", names(alpha_div_wrap))]
pairwise_list <- pairwise_list[!is.na(pairwise_list)]
p_values_wide <- arrange_p_values(pairwise_list)
fitter_coef_list <- lapply(alpha_div_wrap[["fitter_list"]], function(fit) {as.data.frame(summary(fit)$coefficients)})
p_values_adjustedLM <- do.call(rbind, fitter_coef_list)
# add in addition lm plots to the old sample_sums
TrList_lm_PreRareTotal <- plot_alphaDivVSoriginalTotalAmplicons(DF_alpha_rare, DF_alpha_no_rare, measures = alpha_div_measures,
color = group_var)
TrrList <- plot_alphaDivVSoriginalTotalAmplicons2(DF_alpha_rare, DF_alpha_no_rare, measures = alpha_div_measures,
color = group_var)
# rare_curves <- rarefaction_curve_own(physeq = ps, group_var = group_var, step_size = step_size, seed = seed, type = "vegan")
# rare_curves_own <- rarefaction_curve_own(physeq = ps, group_var = group_var, step_size = step_size, seed = seed, type = "sample")
rarefaction_curves <- rarefaction_curve_own_fast(physeq = ps, group_var = group_var, max_total = rare_max_total, step_size = step_size, seed = seed)
png(file = "rarecurves_pool.png", width = 700, height = 300)
grid.arrange(rarefaction_curves[["Tr_richness_group"]], rarefaction_curves[["Tr_richness_grad"]],
layout_matrix = matrix(c(1,2), nrow = 1))
dev.off()
