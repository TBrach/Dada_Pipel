# - find relevant sequences for selected species and remove duplicates and sequences < 1200 bp -
saveGenus <- "Alistipes"
selectedSpecies <- c("Alistipes putredinis", "Alistipes finegoldii", "Alistipes onderdonkii", "Alistipes shahii", "Alistipes obesi")
RL <- find_sequences_of_given_species(selected_species = selectedSpecies, rdp_DF = rdp_DF, fastaFile = fastaFile)
rdp_DF_selectedSpecies <- RL[[1]]
fastaFile_selectedSpecies <- RL[[2]]
View(rdp_DF_selectedSpecies)
paste(fastaFile_selectedSpecies[1])
fastaFile_selectedSpecies[2]
paste(fastaFile_selectedSpecies[2])
# - find relevant sequences for selected species and remove duplicates and sequences < 1200 bp -
saveGenus <- "Prevotella"
selectedSpecies <- c("Prevotella copri", "Prevotella corporis", "Prevotella buccalis",
"Prevotella xylaniphila")
RL <- find_sequences_of_given_species(selected_species = selectedSpecies, rdp_DF = rdp_DF, fastaFile = fastaFile)
rdp_DF_selectedSpecies <- RL[[1]]
fastaFile_selectedSpecies <- RL[[2]]
View(rdp_DF_selectedSpecies)
paste(fastaFile_selectedSpecies[1])
paste(fastaFile_selectedSpecies[2])
# - get the V4 amplicons and primer -
ResultList <- collect_V4_amplicons(DNA_string_set = fastaFile_selectedSpecies, Fprimer = ForwardPrimer, Rprimer = ReversePrimer)
fastaFile_selectedSpecies_Amplicons <- ResultList[[1]]
usedPrimer <- ResultList[[2]]
# only keep successful Amplicons
successfulAmplicons <- !width(fastaFile_selectedSpecies_Amplicons) >= 1200
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
# - make a save rdp_DF -
NameList <- strsplit(names(fastaFile_selectedSpecies_Amplicons), split = " ")
rdp_ids <- lapply(NameList, `[`, 1) %>% unlist()
rdp_species <- lapply(NameList, function(listi){listi[2:length(listi)]})
rdp_species <- sapply(rdp_species, function(charvec){paste(charvec, collapse = " ")}) # takes surprisingly long
rdp_DF_Amplicons <- data.frame(ID = rdp_ids, Species = rdp_species)
rdp_DF_Amplicons[] <- lapply(rdp_DF_Amplicons, as.character)
rdp_DF_Amplicons$Width <- width(fastaFile_selectedSpecies_Amplicons)
rdp_DF_Amplicons <- cbind(rdp_DF_Amplicons, Sequence = fastaFile_selectedSpecies_Amplicons)
View(rdp_DF_Amplicons)
paste(fastaFile_selectedSpecies[4])
paste(fastaFile_selectedSpecies[3])
View(rdp_DF_selectedSpecies)
# - find relevant sequences for selected species and remove duplicates and sequences < 1200 bp -
saveGenus <- "Escherichia"
paste(fastaFile_selectedSpecies[3])
selectedSpecies <- c("Escherichia coli", "Escherichia fergusonii", "Escherichia flexneri")
RL <- find_sequences_of_given_species(selected_species = selectedSpecies, rdp_DF = rdp_DF, fastaFile = fastaFile)
rdp_DF_selectedSpecies <- RL[[1]]
fastaFile_selectedSpecies <- RL[[2]]
View(rdp_DF_selectedSpecies)
fastaFile_selectedSpecies[2]
paste(fastaFile_selectedSpecies[2])
length(fastaFile_selectedSpecies)
# - get the V4 amplicons and primer -
ResultList <- collect_V4_amplicons(DNA_string_set = fastaFile_selectedSpecies, Fprimer = ForwardPrimer, Rprimer = ReversePrimer)
fastaFile_selectedSpecies_Amplicons <- ResultList[[1]]
usedPrimer <- ResultList[[2]]
View(usedPrimer)
# only keep successful Amplicons
successfulAmplicons <- !width(fastaFile_selectedSpecies_Amplicons) >= 1200
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
View(usedPrimer)
fastaFile_selectedSpecies_Amplicons[1]
fastaFile_selectedSpecies_Amplicons[1] %in% c("A", "C", "T", "G")
# - find relevant sequences for selected species and remove duplicates and sequences < 1200 bp -
saveGenus <- "Escherichia"
selectedSpecies <- c("Escherichia coli", "Escherichia fergusonii", "Escherichia flexneri")
RL <- find_sequences_of_given_species(selected_species = selectedSpecies, rdp_DF = rdp_DF, fastaFile = fastaFile)
rdp_DF_selectedSpecies <- RL[[1]]
fastaFile_selectedSpecies <- RL[[2]]]
fastaFile_selectedSpecies <- RL[[2]]
# - get the V4 amplicons and primer -
ResultList <- collect_V4_amplicons(DNA_string_set = fastaFile_selectedSpecies, Fprimer = ForwardPrimer, Rprimer = ReversePrimer)
fastaFile_selectedSpecies_Amplicons <- ResultList[[1]]
usedPrimer <- ResultList[[2]]
# only keep successful Amplicons
successfulAmplicons <- !width(fastaFile_selectedSpecies_Amplicons) >= 1200
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
grepl("N", paste(fastaFile_selectedSpecies_Amplicons[1]))
grepl("N", paste(fastaFile_selectedSpecies_Amplicons[2]))
grepl("N", paste(fastaFile_selectedSpecies_Amplicons[3]))
grepl("N", paste(fastaFile_selectedSpecies_Amplicons[4]))
?grepl
selectedSpecies <- c("Escherichia coli")
RL <- find_sequences_of_given_species(selected_species = selectedSpecies, rdp_DF = rdp_DF, fastaFile = fastaFile)
rdp_DF_selectedSpecies <- RL[[1]]
fastaFile_selectedSpecies <- RL[[2]]
# - get the V4 amplicons and primer -
ResultList <- collect_V4_amplicons(DNA_string_set = fastaFile_selectedSpecies, Fprimer = ForwardPrimer, Rprimer = ReversePrimer)
fastaFile_selectedSpecies_Amplicons <- ResultList[[1]]
usedPrimer <- ResultList[[2]]
# only keep successful Amplicons
successfulAmplicons <- !width(fastaFile_selectedSpecies_Amplicons) >= 1200
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
for (i in 1:100) {}
for (i in 1:100){
print(grepl("N", paste(fastaFile_selectedSpecies_Amplicons[i])))
}
grepl("N", fastaFile_selectedSpecies_Amplicons)
# - because there are so many kick out more -
# the ones that contain "N"
successfulAmplicons <- !grepl("N", fastaFile_selectedSpecies_Amplicons)
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
IUPAC_CODE_MAP
successfulAmplicons <- !grepl("W", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons
successfulAmplicons <- !grepl("W", fastaFile_selectedSpecies_Amplicons)
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
successfulAmplicons <- !grepl("V", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
IUPAC_CODE_MAP
successfulAmplicons <- !grepl("M", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("R", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons
successfulAmplicons <- !grepl("R", fastaFile_selectedSpecies_Amplicons)
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
IUPAC_CODE_MAP
successfulAmplicons <- !grepl("W", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("S", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("Y", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("Y", fastaFile_selectedSpecies_Amplicons)
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
IUPAC_CODE_MAP
successfulAmplicons <- !grepl("K", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("V", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("H", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("D", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("B", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("N", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
width(fastaFile_selectedSpecies_Amplicons)
# since still so many I only keep those with length = 292
successfulAmplicons <- width(fastaFile_selectedSpecies_Amplicons) == 292
successfulAmplicons
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
# - make a save rdp_DF -
NameList <- strsplit(names(fastaFile_selectedSpecies_Amplicons), split = " ")
rdp_ids <- lapply(NameList, `[`, 1) %>% unlist()
rdp_species <- lapply(NameList, function(listi){listi[2:length(listi)]})
rdp_species <- sapply(rdp_species, function(charvec){paste(charvec, collapse = " ")}) # takes surprisingly long
rdp_DF_Amplicons <- data.frame(ID = rdp_ids, Species = rdp_species)
rdp_DF_Amplicons[] <- lapply(rdp_DF_Amplicons, as.character)
rdp_DF_Amplicons$Width <- width(fastaFile_selectedSpecies_Amplicons)
rdp_DF_Amplicons <- cbind(rdp_DF_Amplicons, Sequence = fastaFile_selectedSpecies_Amplicons)
View(rdp_DF_selectedSpecies)
saveRDS(object = list(rdp_DF_Amplicons = rdp_DF_Amplicons, usedPrimer = usedPrimer), file = file.path(datapath,paste(saveGenus, "_DF_primer.rds", sep = "")))
writeXStringSet(fastaFile_selectedSpecies_Amplicons, filepath = file.path(datapath, paste(saveGenus, "_Amplicons.fa", sep = "")))
View(rdp_DF_Amplicons)
rdp_DF_Amplicons$Sequence[1]
fastaFile_selectedSpecies[1]
paste(fastaFile_selectedSpecies[1])
IUPAC_CODE_MAP
View(usedPrimer)
rm(list = ls())
setwd("~/MarieCurie_Work/MouseProject/ResultsAndProtocols/Exp1_ThermogenesisTest/raw_results/171108_qPCR_Standardcurves")
# source("https://bioconductor.org/biocLite.R")
# biocLite("phyloseq")
library(ggplot2); packageVersion("ggplot2")
library(dplyr); packageVersion("dplyr")
library(tidyr); packageVersion("tidyr")
library(gridExtra); packageVersion("gridExtra")
functionpath <- "/Users/jvb740/MarieCurie_Work/MouseProject/ResultsAndProtocols/Exp1_ThermogenesisTest/raw_results/171108_qPCR_Standardcurves"
source(file.path(functionpath, "Functions/171109_qPCRFunctions.R"))
datapath <- "/Users/jvb740/MarieCurie_Work/MouseProject/ResultsAndProtocols/Exp1_ThermogenesisTest/raw_results/171123_UCP1_36b4_Exp1"
CPs <- "CPs_UCP1_testDNA.txt"
ECurve <- "EffCurve_UCP1_testDNA.txt"
FCurve <- "FlCurves_UCP1_testDNA.txt"
MCurve <- "TMsChart_UCP1_testDNA.txt"
TMs <- "TMs_UCP1_testDNA.txt"
TMs
Sample_Name <- "UCP1_testDNA"
Real_concentrations <- c(67.24, 33.92, 16.8, 8.5, 4.24, 2.16, 1.16, 0)
res_list <- overall_standard_curve_analysis(datapath, CPs, ECurve, FCurve, MCurve, TMs, Sample_Name, Real_concentrations)
CPs
datapath
datapath <- "/Users/jvb740/MarieCurie_Work/MouseProject/ResultsAndProtocols/Exp1_ThermogenesisTest/raw_results/171123_UCP1_36b4_Exp1"
CPs <- "CPs_UCP1_testDNA.txt"
# -- load Cp table to make your own efficiency curve (straight lines) --
CP <- read.table(file = file.path(datapath, CPs), header = TRUE, sep="\t", na.strings = "NA", stringsAsFactors = FALSE, skip = 1)
exists(file.path(datapath, CPs))
datapath <- "/Users/jvb740/MarieCurie_Work/MouseProject/ResultsAndProtocols/Exp1_ThermogenesisTest/raw_results/171108_qPCR_Standardcurves"
source(file.path(datapath, "Functions/171109_qPCRFunctions.R"))
# -- load Cp tables to make your own efficiency curves (straight lines) --
CPsUCP1 <- read.table(file = file.path(datapath, "CPsUCP1.txt"), header = TRUE, sep="\t", na.strings = "NA", stringsAsFactors = FALSE, skip = 1)
View(CPsUCP1)
rm(list = ls())
setwd("~/MarieCurie_Work/BackgroundKnowledge/16S_Learning/Dada_Pipel/DESeq2_SizeFactors")
# source("https://bioconductor.org/biocLite.R")
# biocLite("phyloseq")
library(phyloseq); packageVersion("phyloseq")
library(dada2); packageVersion("dada2")
library(vegan); packageVersion("vegan")
library(ggplot2); packageVersion("ggplot2")
library(dplyr); packageVersion("dplyr")
library(tidyr); packageVersion("tidyr")
library(gridExtra); packageVersion("gridExtra")
library(xtable); packageVersion("xtable")
library(RVAideMemoire); packageVersion("RVAideMemoire")
library(viridis); packageVersion("viridis")
library(scales); packageVersion("scales") # for the oob = squish option in gradient plots
library(ggthemes); packageVersion("ggthemes")
library(DESeq2); packageVersion("DESeq2")
datapath <- "/Users/jvb740/MarieCurie_Work/BackgroundKnowledge/16S_Learning/Dada_Pipel/DESeq2_SizeFactors"
ps_name <- "TestPhyloseq.rds"
ps <- readRDS(file = file.path(datapath, ps_name))
ps
group_var <- "Group"
# generate a new phyloseq object that contains only taxa with at least one zero count in one of the samples
count_table <- t(as(otu_table(ps), "matrix")) # taxa are rows now
dim(count_table)
sum(rowSums(count_table == 0) > 0)
rowSums(count_table == 0) > 0
ps2 <- prune_taxa(taxa = rowSums(count_table == 0) > 0, x = ps)
ps2
DES = phyloseq_to_deseq2(ps2, formula(paste("~", group_var)))
# I use this gm function found
gm_own = function(x, na.rm=FALSE, zeros.count = TRUE){
if(any(x < 0, na.rm = TRUE)){
return(NaN)
}
if(zeros.count){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
} else {
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x[x > 0]))
}
}
GM_referenceSample <- apply(otu_table(ps2), 2, gm_own, zeros.count = FALSE)
GM_referenceSample_zerosCount <- apply(otu_table(ps2), 2, gm_own, zeros.count = TRUE)
range(GM_referenceSample/GM_referenceSample_zerosCount) # in each case in which there is a zero the GM is bigger when zeros not count than when they count.
SFs <- sizeFactors(estimateSizeFactors(DES, type = "ratio", geoMeans = GM_referenceSample))
SFs_zerosCount <- sizeFactors(estimateSizeFactors(DES, type = "ratio", geoMeans = GM_referenceSample_zerosCount))
SFs2 <- sizeFactors(estimateSizeFactors(DES, type = "poscounts"))
identical(SFs_zerosCount, SFs2) # TRUE
# GM_referenceSample is always equal or bigger than GM_referenceSample_zerosCount
range(GM_referenceSample/GM_referenceSample_zerosCount)
# I would therefore expect that all SFs (zeros.count = FALSE) would be smaller than SFs_zerosCount, but
range(SFs/SFs_zerosCount)
?estimateSizeFactors
identical(SFs_zerosCount, SFs2) # TRUE
# let's calculate ourselfs for samples 1 and 2
CT <- counts(DES, normalized = TRUE)
# let's calculate ourselfs for samples 1 and 2
CT <- counts(DES, normalized = FALSE)
dim(CT)
class(CT)
OTUT <- t(as(otu_table(ps2), "matrix"))
dim(OTUT)
all.equal(CT, OTUT)
SFs
head(SFs)
GM1 <- OTUT[,1]
GM1
range(GM_referenceSample)
range(GM_referenceSample_zerosCount)
SFs1 <- sizeFactors(estimateSizeFactors(DES, type = "ratio", geoMeans = GM1))
SFs1
body(estimateSizeFactors)
median(OTUT[,1]/GM1)
median(OTUT[,1]/GM1, na.rm = T)
body(estimateSizeFactorsForMatrix)
estimateSizeFactorsForMatrix
counts <- OTUT
dim(counts)
colnames(counts)
head(colnames(counts))
log(10)
GM_referenceSample_zerosCount[1]
prod(OTUT[1,])
prod(OTUT[1,][OTUT[1,]>0])
prod(OTUT[1,][OTUT[1,]>0]) -> produtto
produtto^(1/61)
log(produtto^(1/61))
sum(log(OTUT[1,]))
sum(log(OTUT[1,][OTUT[1,] > 0]))
sum(log(OTUT[1,][OTUT[1,] > 0]))/61
counts
class(counts)
rowMeans(log(counts))
log(10^3)
3 * log(10)
loggeomeans <- rowMeans(log(counts))
loggeomenas
loggeomeans
is.infinite(loggeomeans)
all(is.infinite(loggeomeans))
geoMeans <- GM_referenceSample_zerosCount
loggeomeans <- log(geoMeans)
loggeomeans
geoMeans
cnts <- OTUT[,1]
cnts
?locfunc
DESeq2::locfunc
?DESeq2::locfunc
??DESeq2::locfunc
DESeq2:::locfunc
# -- recapitulate the size factor calculation from DESeq2 --
# see estimateSizeFactorsForMatrix
geoMeans <- GM_referenceSample_zerosCount
loggeomeans <- log(geoMeans)
counts <- OTUT
logRatios <- apply(counts, 2, function(cnts){
log(cnts) - loggeomeans
})
dim(logRatios)
logRatios[,1]
all.equal(logRatios[,1], log(OTUT[,1] - loggeomeans))
all.equal(logRatios[,1], log(OTUT[,1]) - loggeomeans)
is.finite(loggeomeans)
all(is.finite(loggeomeans))
testerfunction <- function (counts, locfunc = stats::median, geoMeans, controlGenes)
{
if (missing(geoMeans)) {
incomingGeoMeans <- FALSE
loggeomeans <- rowMeans(log(counts))
}
else {
incomingGeoMeans <- TRUE
if (length(geoMeans) != nrow(counts)) {
stop("geoMeans should be as long as the number of rows of counts")
}
loggeomeans <- log(geoMeans)
}
if (all(is.infinite(loggeomeans))) {
stop("every gene contains at least one zero, cannot compute log geometric means")
}
sf <- if (missing(controlGenes)) {
apply(counts, 2, function(cnts) {
exp(locfunc((log(cnts) - loggeomeans)[is.finite(loggeomeans) &
cnts > 0]))
})
}
else {
if (!(is.numeric(controlGenes) | is.logical(controlGenes))) {
stop("controlGenes should be either a numeric or logical vector")
}
loggeomeansSub <- loggeomeans[controlGenes]
apply(counts[controlGenes, , drop = FALSE], 2, function(cnts) {
exp(locfunc((log(cnts) - loggeomeansSub)[is.finite(loggeomeansSub) &
cnts > 0]))
})
}
if (incomingGeoMeans) {
sf <- sf/exp(mean(log(sf)))
}
sf
}
locfunc = stats::median
logRatios <- apply(counts, 2, function(cnts){
(log(cnts) - loggeomeans)[cnts > 0]
})
logRatios[[1]]
length(logRatios[[1]])
locfunc
locfunc(logRatios[[1]])
exp(locfunc(logRatios[[1]]))
?gm_own
logRatios <- apply(counts, 2, function(cnts){
(log(cnts) - loggeomeans)[is.finite(loggeomeans) & cnts > 0] # so 0 ratios are ignored
})
locfunc <- stats::median
sapply(logRatios, function(loggedratios){exp(locfunc(loggedratios))})
SFs <- sapply(logRatios, function(loggedratios){exp(locfunc(loggedratios))})
SFs
SFs2 <- sapply(logRatios, function(loggedratios){locfunc(exp(loggedratios))})
SFs2
identical(SFs, SFs2)
SFs
SFs2
SFs
SFs2
rm(list = ls())
# TestPhyloseq.rds must be in working directory
datapath <- "/Users/jvb740/MarieCurie_Work/BackgroundKnowledge/16S_Learning/Dada_Pipel/DESeq2_SizeFactors"
ps_name <- "TestPhyloseq.rds"
ps <- readRDS(file = file.path(datapath, ps_name))
group_var <- "Group"
# generate a new phyloseq object that contains only taxa with at least one zero count in one of the samples
count_table <- t(as(otu_table(ps), "matrix")) # taxa are rows now
sum(rowSums(count_table == 0) > 0)
# 836 of the 862 ASV contain at least one zero
ps2 <- prune_taxa(taxa = rowSums(count_table == 0) > 0, x = ps)
ps2
# "only" the 836 taxa with at least one zero count
DES = phyloseq_to_deseq2(ps2, formula(paste("~", group_var)))
# I use this gm function that I found and adjusted
gm_own = function(x, na.rm=FALSE, zeros.count = TRUE){
if(any(x < 0, na.rm = TRUE)){
return(NaN)
}
if(zeros.count){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
} else {
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x[x > 0]))
}
}
GM_referenceSample <- apply(otu_table(ps2), 2, gm_own, zeros.count = FALSE)
GM_referenceSample_zerosCount <- apply(otu_table(ps2), 2, gm_own, zeros.count = TRUE)
range(GM_referenceSample/GM_referenceSample_zerosCount) # in each case in which there is a zero the GM is bigger when zeros not count than when they count.
SFs <- sizeFactors(estimateSizeFactors(DES, type = "ratio", geoMeans = GM_referenceSample))
SFs_zerosCount <- sizeFactors(estimateSizeFactors(DES, type = "ratio", geoMeans = GM_referenceSample_zerosCount))
SFs2 <- sizeFactors(estimateSizeFactors(DES, type = "poscounts"))
identical(SFs_zerosCount, SFs2) # TRUE
counts <- OTUT
# -- recapitulate the size factor calculation from DESeq2 --
# see estimateSizeFactorsForMatrix!!!!
# --- calculating the size factors how I would have expected them ---
CT <- counts(DES, normalized = FALSE)
OTUT <- t(as(otu_table(ps2), "matrix"))
all.equal(CT, OTUT) # TRUE
Ratios <- OTUT/GM_referenceSample_zerosCount
View(Ratios)
View(Ratios)
SFs
identical(SFs_zerosCount, SFs2) # TRUE
prod(SFs_zerosCount)
locfunc <- stats::median
SFsSelf <- lapply(as.data.frame(Ratios), function(ratios){locfunc(ratios[ratios>0])})
SFsSelf
SFsSelf <- sapply(as.data.frame(Ratios), function(ratios){locfunc(ratios[ratios>0])})
SFsSelf
gm_own(SFsSelf, zeros.count = TRUE)
# ------
# you notice that SFsSelf are much bigger than SFs_zerosCount
# in fact that is what I would have expected that SFs_zerosCount are much bigger than SFs
# the solution to this riddle is in the very end of estimateSizeFactorsForMatrix:
# DESeq2 normalises the size factors by their geometric mean!
SFsSelf_Normed <- SFsSelf/gm_own(SFsSelf, zeros.count = TRUE)
identical(SFsSelf_Normed, SFs_zerosCount)
SFsSelf_Normed
SFs2
SFs2-SFsSelf_Normed
all.equal(SFsSelf_Normed, SFs_zerosCount)
SFsSelf_Normed2 <- SFsSelf/exp(mean(log(SFsSelf)))
identical(SFsSelf_Normed, SFsSelf_Normed2)
# SFsSelf_Normed2 <- SFsSelf/exp(mean(log(SFsSelf)))
# also NB:
prod(SFs_zerosCount)
prod(SFsSelf_Normed)
# here the way DESeq2 does the calculations
geoMeans <- GM_referenceSample_zerosCount
loggeomeans <- log(geoMeans)
logRatios <- apply(counts, 2, function(cnts){
(log(cnts) - loggeomeans)[is.finite(loggeomeans) & cnts > 0] # is.finite(loggeomeans) makes sure that genes with a zero in are ingored,
# cnts > 0 makes sure that 0 ratios/cnts are ignored
})
logRatios <- lapply(as.data.frame(counts), function(cnts){
(log(cnts) - loggeomeans)[is.finite(loggeomeans) & cnts > 0] # is.finite(loggeomeans) makes sure that genes with a zero in are ingored,
# cnts > 0 makes sure that 0 ratios/cnts are ignored
})
# here the way DESeq2 does the calculations
geoMeans <- GM_referenceSample_zerosCount
loggeomeans <- log(geoMeans)
class(counts)
logRatios <- lapply(as.data.frame(OTUT), function(cnts){
(log(cnts) - loggeomeans)[is.finite(loggeomeans) & cnts > 0] # is.finite(loggeomeans) makes sure that genes with a zero in are ingored,
# cnts > 0 makes sure that 0 ratios/cnts are ignored
})
length(logRatios)
SFsDeS <- sapply(logRatios, function(loggedratios){exp(locfunc(loggedratios))})
SFsDeS
SFsDeS2 <- sapply(logRatios, function(loggedratios){locfunc(exp(loggedratios))})
SFsSelf-SFsDeS
SFsSelf-SFsDeS2
all.equal(SFsSelf, SFsDeS)
all.equal(SFsSelf, SFsDeS2)
# the critical thing explaining why the SFs are not so big as expected for zeros.count = TRUE is the normalisation by DeSeq
SFsDeS_Normed <- SFsDeS/exp(mean(log(SFsDeS)))
identical(SFs_zerosCount, SFsDeS_Normed)
# - for later, also have one wher you only keep the taxa with 100% prevalence -
ps3 <- prune_taxa(taxa = rowSums(count_table == 0) == 0, x = ps)
ps3
DES2 = phyloseq_to_deseq2(ps3, formula(paste("~", group_var)))
DES2
# so far you learned that all size factors calculated by DeSeq2 with geoMEans given have a product of 1, since they are normalised that way (type = "ratio")
#
SFs3 <- sizeFactors(estimateSizeFactors(DES2, type = "ratio"))
SFs3
prod(SFs3)
DES2 = phyloseq_to_deseq2(ps, formula(paste("~", group_var)))
# so far you learned that all size factors calculated by DeSeq2 with geoMEans given have a product of 1, since they are normalised that way (type = "ratio")
#
SFs3 <- sizeFactors(estimateSizeFactors(DES2, type = "ratio"))
prod(SFs3) # clearly bigger than 1
# takes about a minute or two on my MAC:
SF_iterate <- sizeFactors(estimateSizeFactors(DES, type = "iterate"))
prod(SF_iterate)
SFs
cor(SF_iterate, SFs)
cor(SF_iterate, SFs2)
cor(SFs, SFs2)
plot(SF_iterate, SFs2)
plot(SF_iterate, SFs)
rm(list = ls())
